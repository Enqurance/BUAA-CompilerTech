INTTK int
IDENFR global_var1
ASSIGN =
INTCON 9
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
INTTK int
IDENFR global_var2
<VarDef>
COMMA ,
IDENFR global_var3
ASSIGN =
INTCON 10
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
CONSTTK const
INTTK int
IDENFR con1
ASSIGN =
INTCON 44
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
<ConstDef>
SEMICN ;
<ConstDecl>
CONSTTK const
INTTK int
IDENFR con2
ASSIGN =
INTCON 56
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
INTCON 12
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 6
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
<ConstDef>
COMMA ,
IDENFR con4
ASSIGN =
INTCON 888
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
<ConstDef>
SEMICN ;
<ConstDecl>
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR con3
ASSIGN =
IDENFR con1
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR con2
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
DIV /
INTCON 39
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
<ConstDef>
SEMICN ;
<ConstDecl>
PRINTFTK printf
LPARENT (
STRCON "(20373335)\n"
RPARENT )
SEMICN ;
<Stmt>
PRINTFTK printf
LPARENT (
STRCON "C level,test a code has decl,no func\n"
RPARENT )
SEMICN ;
<Stmt>
PRINTFTK printf
LPARENT (
STRCON "con1 is %d\n"
COMMA ,
IDENFR con1
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
SEMICN ;
<Stmt>
PRINTFTK printf
LPARENT (
STRCON "con2 is %d,con3 is %d\n"
COMMA ,
IDENFR con2
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
COMMA ,
IDENFR con3
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
SEMICN ;
<Stmt>
INTTK int
IDENFR var1
<VarDef>
COMMA ,
IDENFR var2
ASSIGN =
IDENFR con3
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
INTTK int
IDENFR var3
<VarDef>
SEMICN ;
<VarDecl>
IDENFR var3
<LVal>
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
<Stmt>
LBRACE {
SEMICN ;
<Stmt>
RBRACE }
<Block>
<Stmt>
LBRACE {
LBRACE {
RBRACE }
<Block>
<Stmt>
RBRACE }
<Block>
<Stmt>
IDENFR var1
<LVal>
ASSIGN =
IDENFR var2
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
MINU -
IDENFR var3
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
IDENFR var2
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
LPARENT (
IDENFR con2
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
IDENFR var3
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<MulExp>
MOD %
LPARENT (
IDENFR con1
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR con3
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
PRINTFTK printf
LPARENT (
STRCON "the left val is %d\n"
COMMA ,
IDENFR var1
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
SEMICN ;
<Stmt>
IDENFR var2
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
MINU -
IDENFR var3
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
IDENFR var2
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
LPARENT (
IDENFR con2
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
IDENFR var3
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<MulExp>
MOD %
LPARENT (
IDENFR con1
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR con3
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
INTTK int
IDENFR var5
ASSIGN =
MINU -
<UnaryOp>
PLUS +
<UnaryOp>
MINU -
<UnaryOp>
PLUS +
<UnaryOp>
MINU -
<UnaryOp>
IDENFR con1
<LVal>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<UnaryExp>
<UnaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
IFTK if
LPARENT (
IDENFR var1
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
GRE >
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "var1 greater than 1\n"
RPARENT )
SEMICN ;
<Stmt>
RBRACE }
<Block>
<Stmt>
<Stmt>
IFTK if
LPARENT (
IDENFR con3
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
GEQ >=
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT )
LBRACE {
IDENFR var3
<LVal>
ASSIGN =
IDENFR var1
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
DIV /
IDENFR con1
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR var2
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
INTCON 1225
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
RBRACE }
<Block>
<Stmt>
ELSETK else
LBRACE {
IFTK if
LPARENT (
IDENFR var2
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
LSS <
IDENFR con4
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT )
LBRACE {
IDENFR var2
<LVal>
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
<Stmt>
RBRACE }
<Block>
<Stmt>
<Stmt>
RBRACE }
<Block>
<Stmt>
<Stmt>
IFTK if
LPARENT (
IDENFR var5
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
LEQ <=
IDENFR con4
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR var5
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
EQL ==
IDENFR con1
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "var5 equal to con1\n"
RPARENT )
SEMICN ;
<Stmt>
RBRACE }
<Block>
<Stmt>
<Stmt>
IFTK if
LPARENT (
INTCON 23
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
NEQ !=
INTCON 22
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
MINU -
INTCON 7
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
INTCON 55
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MOD %
INTCON 9
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 7
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
DIV /
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
LEQ <=
INTCON 24
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT )
LBRACE {
SEMICN ;
<Stmt>
RBRACE }
<Block>
<Stmt>
<Stmt>
RBRACE }
<Block>
<Stmt>
<Stmt>
WHILETK while
LPARENT (
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 56
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
INTTK int
IDENFR j
ASSIGN =
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
IFTK if
LPARENT (
IDENFR j
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
LEQ <=
IDENFR i
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
<Stmt>
RBRACE }
<Block>
<Stmt>
ELSETK else
LBRACE {
INTTK int
IDENFR k
<VarDef>
SEMICN ;
<VarDecl>
CONTINUETK continue
SEMICN ;
<Stmt>
RBRACE }
<Block>
<Stmt>
<Stmt>
RBRACE }
<Block>
<Stmt>
<Stmt>
RETURNTK return
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
RBRACE }
<Block>
<MainFuncDef>
<CompUnit>
