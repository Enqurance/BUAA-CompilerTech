CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 2
SEMICN ;
CONSTTK const
INTTK int
IDENFR b
ASSIGN =
INTCON 1
PLUS +
INTCON 2
MULT *
INTCON 3
MINU -
INTCON 2
DIV /
INTCON 2
MOD %
INTCON 2
SEMICN ;
CONSTTK const
INTTK int
IDENFR m
ASSIGN =
INTCON 2
COMMA ,
IDENFR n
ASSIGN =
INTCON 5
SEMICN ;
CONSTTK const
INTTK int
IDENFR p
ASSIGN =
INTCON 1
COMMA ,
IDENFR q
ASSIGN =
INTCON 2
COMMA ,
IDENFR r
ASSIGN =
INTCON 3
SEMICN ;
CONSTTK const
INTTK int
IDENFR c
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR d
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 2
COMMA ,
INTCON 3
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR var_a
SEMICN ;
INTTK int
IDENFR var_b
ASSIGN =
INTCON 3
SEMICN ;
INTTK int
IDENFR var_c
ASSIGN =
LPARENT (
INTCON 2
PLUS +
INTCON 3
RPARENT )
MULT *
INTCON 2
SEMICN ;
INTTK int
IDENFR var_m
ASSIGN =
INTCON 1
COMMA ,
IDENFR var_n
ASSIGN =
INTCON 2
SEMICN ;
INTTK int
IDENFR var_1
ASSIGN =
INTCON 2
COMMA ,
IDENFR var_2
ASSIGN =
INTCON 3
COMMA ,
IDENFR var_3
ASSIGN =
INTCON 4
SEMICN ;
INTTK int
IDENFR var_d
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 7
COMMA ,
INTCON 8
COMMA ,
INTCON 9
RBRACE }
SEMICN ;
INTTK int
IDENFR var_e
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 2
RBRACE }
RBRACE }
SEMICN ;
VOIDTK void
IDENFR nothing1
LPARENT (
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR nothing2
LPARENT (
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
INTTK int
IDENFR f_a
LPARENT (
INTTK int
IDENFR x
RPARENT )
LBRACE {
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
INTTK int
IDENFR f_b
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
IDENFR f_c
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f_d
LPARENT (
RPARENT )
LBRACE {
IDENFR var_d
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR f_e
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
MULT *
IDENFR b
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
IDENFR if_1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
LSS <
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR if_2
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
INTCON 1
RPARENT )
LBRACE {
RETURNTK return
INTCON 2
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 3
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR if_3
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
LSS <
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
IDENFR b
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
RETURNTK return
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR while_1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 10
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR i
SEMICN ;
RBRACE }
INTTK int
IDENFR while_2
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR j
ASSIGN =
INTCON 5
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR j
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GEQ >=
INTCON 3
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
RETURNTK return
IDENFR i
SEMICN ;
RBRACE }
INTTK int
IDENFR while_3
LPARENT (
INTTK int
IDENFR n
RPARENT )
LBRACE {
INTTK int
IDENFR cnt
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR x
LEQ <=
IDENFR n
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR x
MOD %
INTCON 2
EQL ==
INTCON 0
RPARENT )
CONTINUETK continue
SEMICN ;
IFTK if
LPARENT (
IDENFR x
MOD %
INTCON 2
NEQ !=
INTCON 0
RPARENT )
LBRACE {
IDENFR cnt
ASSIGN =
IDENFR cnt
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
RETURNTK return
IDENFR cnt
SEMICN ;
RBRACE }
INTTK int
IDENFR cond_1
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
LSS <
IDENFR b
OR ||
IDENFR b
LSS <
IDENFR c
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR b
AND &&
IDENFR b
GRE >
IDENFR c
RPARENT )
LBRACE {
RETURNTK return
IDENFR c
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR a
LSS <
INTCON 0
OR ||
IDENFR b
LSS <
INTCON 0
OR ||
IDENFR c
LSS <
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR cond_2
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR a
LSS <
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR in_1
COMMA ,
IDENFR in_2
SEMICN ;
INTTK int
IDENFR ans
ASSIGN =
IDENFR cond_1
LPARENT (
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RPARENT )
SEMICN ;
IDENFR in_1
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR in_2
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR t1
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
RBRACE }
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "20373974\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR f_a
LPARENT (
IDENFR in_1
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR f_b
LPARENT (
IDENFR t1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR f_c
LPARENT (
INTCON 1
COMMA ,
INTCON 2
RPARENT )
RPARENT )
SEMICN ;
IDENFR f_d
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR f_e
LPARENT (
INTCON 2
COMMA ,
IDENFR t1
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR if_1
LPARENT (
RPARENT )
PLUS +
IDENFR if_2
LPARENT (
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR if_3
LPARENT (
INTCON 2
COMMA ,
INTCON 3
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR while_1
LPARENT (
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR while_2
LPARENT (
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR while_3
LPARENT (
INTCON 10
RPARENT )
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
