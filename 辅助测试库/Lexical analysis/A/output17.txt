CONSTTK const
INTTK int
IDENFR _1
ASSIGN =
INTCON 4
COMMA ,
IDENFR _3
ASSIGN =
IDENFR _1
MULT *
IDENFR _1
MULT *
IDENFR _1
COMMA ,
IDENFR _____
ASSIGN =
INTCON 376789
MOD %
INTCON 326
PLUS +
INTCON 23167
MINU -
PLUS +
INTCON 3427
MULT *
INTCON 276
DIV /
INTCON 13
SEMICN ;
CONSTTK const
INTTK int
IDENFR _2
ASSIGN =
IDENFR _1
PLUS +
INTCON 10
MULT *
LPARENT (
IDENFR _1
DIV /
INTCON 2
RPARENT )
SEMICN ;
CONSTTK const
INTTK int
IDENFR _10
ASSIGN =
MINU -
INTCON 10
PLUS +
INTCON 123
MULT *
LPARENT (
INTCON 3
DIV /
INTCON 2
PLUS +
LPARENT (
INTCON 666
PLUS +
IDENFR _1
RPARENT )
MOD %
INTCON 233
RPARENT )
DIV /
LPARENT (
INTCON 21
PLUS +
INTCON 3
RPARENT )
PLUS +
LPARENT (
PLUS +
LPARENT (
MINU -
LPARENT (
PLUS +
LPARENT (
MINU -
LPARENT (
PLUS +
LPARENT (
LPARENT (
INTCON 0
RPARENT )
RPARENT )
RPARENT )
RPARENT )
RPARENT )
RPARENT )
RPARENT )
SEMICN ;
CONSTTK const
INTTK int
IDENFR aaa
LBRACK [
INTCON 4
DIV /
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 10086
COMMA ,
IDENFR _1
MULT *
IDENFR _1
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR A
LBRACK [
INTCON 4
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
MULT *
LPARENT (
INTCON 233
PLUS +
INTCON 3
RPARENT )
PLUS +
INTCON 212132
COMMA ,
IDENFR _1
PLUS +
INTCON 2
MULT *
IDENFR _1
PLUS +
IDENFR _3
COMMA ,
INTCON 1234
DIV /
IDENFR _1
RBRACE }
COMMA ,
LBRACE {
MINU -
INTCON 3
PLUS +
INTCON 2
PLUS +
INTCON 657
DIV /
INTCON 24
COMMA ,
IDENFR _2
PLUS +
INTCON 57024
COMMA ,
IDENFR _10
MULT *
IDENFR _2
DIV /
INTCON 2
MULT *
INTCON 4
MULT *
IDENFR _3
RBRACE }
COMMA ,
LBRACE {
INTCON 8792
COMMA ,
MINU -
INTCON 289
MULT *
INTCON 2378
MINU -
INTCON 89
COMMA ,
INTCON 908
RBRACE }
COMMA ,
LBRACE {
IDENFR _10
COMMA ,
INTCON 2
MULT *
LPARENT (
INTCON 2768
MOD %
INTCON 13
PLUS +
INTCON 56
RPARENT )
COMMA ,
LPARENT (
INTCON 0
RPARENT )
PLUS +
LPARENT (
INTCON 10086
RPARENT )
PLUS +
MINU -
INTCON 2
PLUS +
PLUS +
INTCON 20
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR _3cg
ASSIGN =
IDENFR _10
MULT *
INTCON 2364
PLUS +
INTCON 324567
DIV /
LPARENT (
MINU -
INTCON 34
RPARENT )
MULT *
MINU -
INTCON 213
MOD %
INTCON 10009921
COMMA ,
IDENFR hdc33ec_dyu
ASSIGN =
MINU -
INTCON 278
MULT *
INTCON 2318
DIV /
INTCON 10009921
PLUS +
PLUS +
INTCON 234
MINU -
INTCON 831
SEMICN ;
INTTK int
IDENFR cdh3yi_23
COMMA ,
IDENFR duhih2_23c
ASSIGN =
INTCON 1983
COMMA ,
IDENFR _23879
LBRACK [
INTCON 4
RBRACK ]
ASSIGN =
LBRACE {
INTCON 2323
COMMA ,
PLUS +
INTCON 9382
MULT *
INTCON 23
DIV /
INTCON 23
MINU -
INTCON 128
COMMA ,
LPARENT (
MINU -
INTCON 0
RPARENT )
COMMA ,
INTCON 390042
MINU -
INTCON 204
MULT *
INTCON 8137
RBRACE }
SEMICN ;
INTTK int
IDENFR dijhw
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
IDENFR cdwuh
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
IDENFR wuei
COMMA ,
IDENFR _3u22
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 287
COMMA ,
IDENFR _____
MULT *
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 287
COMMA ,
INTCON 2786
MINU -
MINU -
INTCON 8719
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR jdfo_
SEMICN ;
INTTK int
IDENFR __my_Ha_s__h
LPARENT (
INTTK int
IDENFR _
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR len
RPARENT )
LBRACE {
INTTK int
IDENFR __
COMMA ,
IDENFR I
SEMICN ;
IDENFR __
ASSIGN =
IDENFR len
SEMICN ;
IDENFR I
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR I
LSS <
IDENFR len
RPARENT )
LBRACE {
IDENFR __
ASSIGN =
IDENFR __
PLUS +
INTCON 98326464
SEMICN ;
IDENFR __
ASSIGN =
IDENFR __
MULT *
INTCON 20373381
SEMICN ;
IDENFR __
ASSIGN =
IDENFR __
PLUS +
INTCON 23667832
SEMICN ;
IDENFR __
ASSIGN =
IDENFR __
DIV /
INTCON 133
SEMICN ;
IDENFR __
ASSIGN =
IDENFR __
PLUS +
INTCON 1347887899
SEMICN ;
IDENFR __
ASSIGN =
IDENFR __
MOD %
INTCON 99998099
SEMICN ;
IDENFR __
ASSIGN =
LPARENT (
IDENFR __
MULT *
INTCON 123671861
MINU -
INTCON 236234
RPARENT )
MULT *
LPARENT (
LPARENT (
IDENFR __
PLUS +
INTCON 135632
RPARENT )
RPARENT )
DIV /
INTCON 7
SEMICN ;
IDENFR I
ASSIGN =
IDENFR I
PLUS +
LPARENT (
MINU -
INTCON 0
PLUS +
INTCON 2
MINU -
LPARENT (
INTCON 1234
DIV /
INTCON 888
RPARENT )
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
IDENFR __
SEMICN ;
RBRACE }
VOIDTK void
IDENFR ___
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "   !!! ()*+,-./:;<>=@?^_`{}|~[]  called func: ___\n"
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR ____
LPARENT (
INTTK int
IDENFR _arg
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "//called func: ____, _arg = %d\n"
COMMA ,
IDENFR _arg
MULT *
INTCON 2
MULT *
INTCON 3
DIV /
INTCON 6
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR __
LPARENT (
INTTK int
IDENFR _arr_Ay
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR useless
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "called func: __, array[0] = %d\n\n\n"
COMMA ,
IDENFR _arr_Ay
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR _Main
LPARENT (
INTTK int
IDENFR _arr_Ay
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "called func: Main, array[0][0] = %d, array[0][1] = %d\n\n"
COMMA ,
IDENFR _arr_Ay
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR _arr_Ay
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR _add_fake
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
PLUS +
IDENFR b
GEQ >=
INTCON 100
PLUS +
INTCON 10086
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
PLUS +
LPARENT (
INTCON 203
MULT *
IDENFR b
RPARENT )
DIV /
INTCON 201
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR a
PLUS +
IDENFR b
MINU -
INTCON 10086
LSS <
INTCON 12345678
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
INTCON 1003
MULT *
IDENFR a
DIV /
INTCON 1009
RPARENT )
PLUS +
INTCON 2022
MULT *
IDENFR b
DIV /
INTCON 2019
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
MINU -
INTCON 233
SEMICN ;
RBRACE }
RETURNTK return
MINU -
INTCON 10086
SEMICN ;
RBRACE }
INTTK int
IDENFR _add
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
PLUS +
IDENFR c
SEMICN ;
RBRACE }
INTTK int
IDENFR _get_id
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR _2_wj5qhidw_
SEMICN ;
IDENFR _2_wj5qhidw_
ASSIGN =
INTCON 76
SEMICN ;
LBRACE {
SEMICN ;
INTCON 123
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR _2_wj5qhidw_
RPARENT )
SEMICN ;
IDENFR _2_wj5qhidw_
ASSIGN =
INTCON 10086
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR _2_wj5qhidw_
RPARENT )
SEMICN ;
INTTK int
IDENFR _2_wj5qhidw_
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 10
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR _2_wj5qhidw_
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
INTCON 20373381
SEMICN ;
RBRACE }
INTTK int
IDENFR _M__a_G_I___c
LPARENT (
INTTK int
IDENFR num
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
LPARENT (
LPARENT (
LPARENT (
IDENFR num
PLUS +
MINU -
INTCON 763835168
RPARENT )
MOD %
INTCON 1996325548
RPARENT )
MULT *
INTCON 1881457024
RPARENT )
DIV /
INTCON 11
RPARENT )
MULT *
INTCON 540488577
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
LBRACE {
LBRACE {
LBRACE {
LBRACE {
RBRACE }
RBRACE }
RBRACE }
RBRACE }
INTTK int
IDENFR ___2_0_3_7_3_3_8_1___X___J___h_____
COMMA ,
IDENFR _for___
COMMA ,
IDENFR _Int
COMMA ,
IDENFR _2233
COMMA ,
IDENFR a10086__
SEMICN ;
CONSTTK const
INTTK int
IDENFR __array
LBRACK [
MINU -
INTCON 1
MULT *
INTCON 2
PLUS +
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 6
PLUS +
INTCON 13
MINU -
INTCON 11
RBRACK ]
LBRACK [
INTCON 4
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
RBRACE }
COMMA ,
LBRACE {
INTCON 5
COMMA ,
INTCON 6
COMMA ,
INTCON 7
COMMA ,
INTCON 8
RBRACE }
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR aaaaa
ASSIGN =
INTCON 10
COMMA ,
IDENFR bbbbb
ASSIGN =
INTCON 20
SEMICN ;
INTTK int
IDENFR _0
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR _main
ASSIGN =
INTCON 0
COMMA ,
IDENFR Main
ASSIGN =
INTCON 1
SEMICN ;
IDENFR ___2_0_3_7_3_3_8_1___X___J___h_____
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR _for___
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR _Int
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR _2233
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR a10086__
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR ___2_0_3_7_3_3_8_1___X___J___h_____
EQL ==
INTCON 20373381
RPARENT )
LBRACE {
IDENFR Main
ASSIGN =
IDENFR Main
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
SEMICN ;
IDENFR _main
ASSIGN =
IDENFR _main
PLUS +
INTCON 1332
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR _for___
GRE >
INTCON 200
RPARENT )
IDENFR Main
ASSIGN =
IDENFR Main
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR _Int
GEQ >=
INTCON 111
RPARENT )
IFTK if
LPARENT (
IDENFR _2233
NEQ !=
INTCON 2234
RPARENT )
IDENFR Main
ASSIGN =
IDENFR Main
PLUS +
INTCON 1
SEMICN ;
ELSETK else
IDENFR Main
ASSIGN =
IDENFR Main
PLUS +
INTCON 2729
SEMICN ;
INTTK int
IDENFR j
ASSIGN =
INTCON 0
COMMA ,
IDENFR sum
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
NOT !
INTCON 0
RPARENT )
LBRACE {
IDENFR sum
ASSIGN =
IDENFR sum
PLUS +
IDENFR aaa
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR j
GEQ >=
IDENFR _1
DIV /
INTCON 2
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR k
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR array
LBRACK [
INTCON 12
RBRACK ]
SEMICN ;
WHILETK while
LPARENT (
INTCON 1
LEQ <=
INTCON 2
RPARENT )
LBRACE {
IDENFR array
LBRACK [
IDENFR k
RBRACK ]
ASSIGN =
INTCON 0
SEMICN ;
IFTK if
LPARENT (
IDENFR k
EQL ==
INTCON 5
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
IDENFR k
PLUS +
INTCON 1
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR k
GRE >
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IDENFR array
LBRACK [
IDENFR k
RBRACK ]
ASSIGN =
IDENFR k
SEMICN ;
IDENFR k
ASSIGN =
IDENFR k
PLUS +
INTCON 1
SEMICN ;
IDENFR sum
ASSIGN =
IDENFR sum
PLUS +
IDENFR k
MULT *
IDENFR k
SEMICN ;
IDENFR Main
ASSIGN =
IDENFR Main
PLUS +
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR temp
ASSIGN =
INTCON 0
SEMICN ;
IFTK if
LPARENT (
IDENFR _1
LSS <
INTCON 5
OR ||
IDENFR aaa
LBRACK [
INTCON 0
RBRACK ]
LSS <
INTCON 10
RPARENT )
LBRACE {
IDENFR temp
ASSIGN =
IDENFR temp
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR _2
LSS <
INTCON 0
AND &&
IDENFR aaa
LBRACK [
INTCON 0
RBRACK ]
GRE >
INTCON 10
RPARENT )
LBRACE {
IDENFR temp
ASSIGN =
IDENFR temp
PLUS +
INTCON 2
SEMICN ;
RBRACE }
IDENFR dijhw
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR dijhw
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR dijhw
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR cdwuh
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR cdwuh
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR wuei
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR wuei
ASSIGN =
IDENFR wuei
PLUS +
IDENFR cdwuh
LBRACK [
INTCON 0
RBRACK ]
MULT *
IDENFR cdwuh
LBRACK [
INTCON 1
RBRACK ]
PLUS +
IDENFR dijhw
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
DIV /
LPARENT (
INTCON 2
MULT *
INTCON 1
RPARENT )
SEMICN ;
IDENFR dijhw
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR dijhw
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
MULT *
IDENFR dijhw
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR jdfo_
ASSIGN =
IDENFR sum
MULT *
IDENFR sum
PLUS +
IDENFR _add
LPARENT (
IDENFR aaaaa
COMMA ,
IDENFR bbbbb
COMMA ,
INTCON 3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "20373381\n"
RPARENT )
SEMICN ;
IDENFR sum
ASSIGN =
IDENFR sum
PLUS +
IDENFR _get_id
LPARENT (
RPARENT )
PLUS +
IDENFR _add_fake
LPARENT (
INTCON 123243
COMMA ,
IDENFR ___2_0_3_7_3_3_8_1___X___J___h_____
RPARENT )
SEMICN ;
IDENFR ___
LPARENT (
RPARENT )
SEMICN ;
IDENFR _Main
LPARENT (
IDENFR _3u22
RPARENT )
SEMICN ;
IDENFR __
LPARENT (
IDENFR _23879
COMMA ,
INTCON 3432
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "temp: %d\n"
COMMA ,
IDENFR temp
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d %d %d %d %d %d %d\n%d %d %d %d %d %d %d %d %d %d\n%d %d %d %d %d %d %d %d %d %d\n%d %d %d %d %d %d %d %d %d %d\n"
COMMA ,
IDENFR __my_Ha_s__h
LPARENT (
IDENFR array
COMMA ,
INTCON 12
RPARENT )
COMMA ,
IDENFR sum
COMMA ,
INTCON 1
COMMA ,
IDENFR _3
COMMA ,
IDENFR _2
COMMA ,
IDENFR _10
COMMA ,
IDENFR aaa
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR aaa
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR A
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR A
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR A
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
IDENFR A
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR A
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR A
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
IDENFR A
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR A
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR A
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
IDENFR A
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR A
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR A
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
IDENFR _3cg
COMMA ,
IDENFR hdc33ec_dyu
COMMA ,
IDENFR cdh3yi_23
COMMA ,
IDENFR duhih2_23c
COMMA ,
IDENFR dijhw
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR dijhw
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR dijhw
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR dijhw
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR dijhw
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR dijhw
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR cdwuh
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR cdwuh
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR wuei
COMMA ,
IDENFR jdfo_
COMMA ,
IDENFR _M__a_G_I___c
LPARENT (
IDENFR __my_Ha_s__h
LPARENT (
IDENFR cdwuh
COMMA ,
INTCON 2
RPARENT )
RPARENT )
COMMA ,
IDENFR __my_Ha_s__h
LPARENT (
IDENFR _3u22
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
INTCON 2
RPARENT )
COMMA ,
IDENFR _main
COMMA ,
IDENFR _0
COMMA ,
IDENFR a10086__
COMMA ,
IDENFR __array
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
SEMICN ;
IDENFR ____
LPARENT (
IDENFR Main
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
