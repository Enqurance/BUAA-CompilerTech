CONSTTK const
INTTK int
IDENFR _a
ASSIGN =
INTCON 0
SEMICN ;
CONSTTK const
INTTK int
IDENFR HelLo_World
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 55
COMMA ,
INTCON 0
COMMA ,
INTCON 10
COMMA ,
PLUS +
INTCON 9999
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR a_r__r
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
MINU -
INTCON 1
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 6
COMMA ,
MINU -
INTCON 555
RBRACE }
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR _A
ASSIGN =
INTCON 6
COMMA ,
IDENFR B
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 9966
RBRACE }
RBRACE }
COMMA ,
IDENFR _
ASSIGN =
INTCON 12
COMMA ,
IDENFR c
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 555
RBRACE }
COMMA ,
IDENFR __
ASSIGN =
INTCON 4
COMMA ,
IDENFR con_6
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 6
RBRACE }
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR lll
ASSIGN =
INTCON 1
COMMA ,
IDENFR rrr
ASSIGN =
INTCON 2
SEMICN ;
CONSTTK const
INTTK int
IDENFR awk_
ASSIGN =
IDENFR _A
PLUS +
IDENFR _a
PLUS +
INTCON 5
SEMICN ;
CONSTTK const
INTTK int
IDENFR const_num
ASSIGN =
INTCON 1
PLUS +
INTCON 5
MINU -
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR yyy
LBRACK [
INTCON 1
PLUS +
INTCON 1
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 0
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
MINU -
INTCON 1
COMMA ,
INTCON 3
COMMA ,
MINU -
INTCON 4
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR var_1
SEMICN ;
INTTK int
IDENFR var_2
LBRACK [
INTCON 100
RBRACK ]
SEMICN ;
INTTK int
IDENFR var_3
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 12
RBRACK ]
SEMICN ;
INTTK int
IDENFR varr_1
COMMA ,
IDENFR varr_2
ASSIGN =
INTCON 10
COMMA ,
IDENFR varr_3
LBRACK [
INTCON 1
PLUS +
INTCON 1
RBRACK ]
COMMA ,
IDENFR varr_4
LBRACK [
INTCON 5
RBRACK ]
LBRACK [
INTCON 999
RBRACK ]
SEMICN ;
INTTK int
IDENFR varrr_1
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR varrr_2
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
INTTK int
IDENFR varrr_3
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 0
PLUS +
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 6
COMMA ,
INTCON 6
RBRACE }
COMMA ,
LBRACE {
MINU -
INTCON 1
COMMA ,
INTCON 0
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR varrrr_1
ASSIGN =
INTCON 666
COMMA ,
IDENFR varrrr_2
COMMA ,
IDENFR varrrr_3
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 5
COMMA ,
INTCON 1
COMMA ,
INTCON 96
COMMA ,
MINU -
INTCON 5
RBRACE }
COMMA ,
IDENFR varrrr_4
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 555
COMMA ,
MINU -
INTCON 5
RBRACE }
RBRACE }
SEMICN ;
VOIDTK void
IDENFR func1
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
LBRACE {
IDENFR _a
PLUS +
INTCON 1
PLUS +
INTCON 2
MINU -
INTCON 1
SEMICN ;
RBRACE }
LBRACE {
INTTK int
IDENFR func1_var
ASSIGN =
INTCON 1
SEMICN ;
LBRACE {
INTTK int
IDENFR func1_var
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
RBRACE }
RBRACE }
INTTK int
IDENFR func2
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
SEMICN ;
SEMICN ;
IDENFR a
ASSIGN =
IDENFR _A
PLUS +
INTCON 5
MINU -
INTCON 6
SEMICN ;
IDENFR b
LBRACK [
IDENFR _A
MINU -
INTCON 6
RBRACK ]
ASSIGN =
INTCON 46554646
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 5
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR a
LSS <
INTCON 10
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1000
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR a
ASSIGN =
IDENFR b
LBRACK [
IDENFR _A
MINU -
INTCON 5
RBRACK ]
SEMICN ;
RBRACE }
RETURNTK return
INTCON 666
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func3
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IFTK if
LPARENT (
IDENFR a
LBRACK [
IDENFR _
MINU -
INTCON 12
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
GRE >
INTCON 10
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RBRACE }
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 100
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 50
RPARENT )
LBRACE {
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
BREAKTK break
SEMICN ;
RETURNTK return
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
RBRACE }
RBRACE }
INTTK int
IDENFR func4
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR c
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
LBRACE {
IDENFR a
SEMICN ;
IDENFR b
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR c
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
INTCON 123456
SEMICN ;
INTCON 111111111
SEMICN ;
IDENFR a
PLUS +
IDENFR b
LBRACK [
INTCON 1
RBRACK ]
PLUS +
IDENFR c
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
MINU -
LPARENT (
INTCON 1
PLUS +
IDENFR a
RPARENT )
PLUS +
LPARENT (
INTCON 1
PLUS +
IDENFR a
PLUS +
INTCON 44
PLUS +
LPARENT (
INTCON 1
PLUS +
INTCON 2
RPARENT )
RPARENT )
SEMICN ;
INTCON 1
MULT *
INTCON 5
DIV /
INTCON 4
MINU -
INTCON 5
MULT *
INTCON 4
MOD %
INTCON 4
SEMICN ;
PLUS +
INTCON 6
MULT *
IDENFR a
SEMICN ;
INTCON 1
MULT *
INTCON 6
SEMICN ;
INTCON 8
DIV /
INTCON 444
PLUS +
INTCON 6
SEMICN ;
INTCON 55
DIV /
INTCON 8
SEMICN ;
INTCON 5
MULT *
INTCON 9
SEMICN ;
INTCON 9
MOD %
INTCON 44
SEMICN ;
RETURNTK return
INTCON 999
SEMICN ;
RBRACE }
INTTK int
IDENFR func5
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
INTCON 1
EQL ==
INTCON 2
OR ||
INTCON 2
NEQ !=
IDENFR _a
AND &&
INTCON 6666
PLUS +
INTCON 5
EQL ==
INTCON 4
RPARENT )
LBRACE {
RETURNTK return
INTCON 1111
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
NOT !
INTCON 666
NEQ !=
MINU -
IDENFR _
RPARENT )
LBRACE {
RETURNTK return
INTCON 5464
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR __
LEQ <=
INTCON 55
MULT *
IDENFR var_3
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
OR ||
INTCON 2
GEQ >=
INTCON 54564
OR ||
PLUS +
INTCON 1
MINU -
PLUS +
INTCON 2
EQL ==
INTCON 6
RPARENT )
LBRACE {
RETURNTK return
INTCON 4564665
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
INTCON 1
OR ||
INTCON 1
LSS <
INTCON 2
PLUS +
IDENFR varrrr_2
OR ||
INTCON 8
GRE >
IDENFR _a
RPARENT )
LBRACE {
RETURNTK return
INTCON 5456
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 55555
SEMICN ;
RBRACE }
RETURNTK return
MINU -
INTCON 555
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR arr
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
MULT *
IDENFR _a
COMMA ,
INTCON 2
MULT *
INTCON 8
COMMA ,
PLUS +
INTCON 3
RBRACE }
COMMA ,
LBRACE {
INTCON 123
MINU -
IDENFR a_r__r
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
INTCON 5555
DIV /
IDENFR varrrr_1
COMMA ,
INTCON 0
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR bv
LBRACK [
INTCON 4
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
DIV /
INTCON 2
COMMA ,
INTCON 6
MULT *
IDENFR arr
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
INTCON 5555
COMMA ,
INTCON 22
MINU -
INTCON 5
MULT *
INTCON 8
DIV /
INTCON 4
MULT *
INTCON 5
PLUS +
INTCON 5
MOD %
INTCON 4
RBRACE }
SEMICN ;
INTTK int
IDENFR a
COMMA ,
IDENFR b
SEMICN ;
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "20373379\n"
RPARENT )
SEMICN ;
IDENFR func1
LPARENT (
IDENFR varr_2
RPARENT )
SEMICN ;
IDENFR arr
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR func2
LPARENT (
INTCON 111
COMMA ,
IDENFR arr
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
IDENFR func3
LPARENT (
IDENFR arr
RPARENT )
SEMICN ;
IDENFR bv
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR func4
LPARENT (
IDENFR a
COMMA ,
IDENFR bv
COMMA ,
IDENFR arr
RPARENT )
SEMICN ;
IDENFR func5
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
