INTTK int
IDENFR no1
SEMICN ;
INTTK int
IDENFR no2
SEMICN ;
INTTK int
IDENFR ano
LBRACK [
INTCON 100
RBRACK ]
SEMICN ;
INTTK int
IDENFR bno
LBRACK [
INTCON 20
RBRACK ]
LBRACK [
INTCON 30
RBRACK ]
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
INTCON 4
SEMICN ;
INTTK int
IDENFR b
ASSIGN =
INTCON 5
SEMICN ;
INTTK int
IDENFR a1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
INTTK int
IDENFR x
ASSIGN =
INTCON 7
COMMA ,
IDENFR y
ASSIGN =
INTCON 8
SEMICN ;
CONSTTK const
INTTK int
IDENFR zero
ASSIGN =
INTCON 0
SEMICN ;
CONSTTK const
INTTK int
IDENFR changyiwei
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR changerwei
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR dududu
ASSIGN =
INTCON 1
COMMA ,
IDENFR lululu
ASSIGN =
INTCON 2
COMMA ,
IDENFR lalala
ASSIGN =
INTCON 3
SEMICN ;
CONSTTK const
INTTK int
IDENFR ttt
ASSIGN =
INTCON 1
COMMA ,
IDENFR tututu
ASSIGN =
INTCON 2
SEMICN ;
INTTK int
IDENFR c
ASSIGN =
LPARENT (
INTCON 2
MINU -
INTCON 1
RPARENT )
MULT *
INTCON 3
COMMA ,
IDENFR d
ASSIGN =
LPARENT (
INTCON 3
PLUS +
INTCON 7
MINU -
INTCON 5
RPARENT )
DIV /
INTCON 2
COMMA ,
IDENFR e
ASSIGN =
LPARENT (
LPARENT (
INTCON 4
MULT *
INTCON 3
PLUS +
INTCON 2
RPARENT )
DIV /
INTCON 5
PLUS +
INTCON 6
RPARENT )
MOD %
INTCON 3
SEMICN ;
INTTK int
IDENFR b1
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR sum3
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
INTTK int
IDENFR num
ASSIGN =
INTCON 0
SEMICN ;
IDENFR num
ASSIGN =
IDENFR a
PLUS +
IDENFR b
PLUS +
IDENFR c
SEMICN ;
RETURNTK return
IDENFR num
SEMICN ;
RBRACE }
INTTK int
IDENFR mysum
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
SEMICN ;
RBRACE }
VOIDTK void
IDENFR helloprint
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "hello world!\n"
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR noblock
LPARENT (
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR sumshuzu
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR num
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR sum
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LEQ <=
IDENFR num
RPARENT )
LBRACE {
IDENFR sum
ASSIGN =
IDENFR sum
PLUS +
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR sumshuzu1
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR sum
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 3
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
INTCON 2
RPARENT )
LBRACE {
IDENFR sum
ASSIGN =
IDENFR sum
PLUS +
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR get1
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR get2
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR num
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR sum
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LEQ <=
IDENFR num
RPARENT )
LBRACE {
IDENFR sum
ASSIGN =
IDENFR sum
PLUS +
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR sum
SEMICN ;
RBRACE }
INTTK int
IDENFR get3
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR sum
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 3
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
INTCON 2
RPARENT )
LBRACE {
IDENFR sum
ASSIGN =
IDENFR sum
PLUS +
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR sum
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
SEMICN ;
INTTK int
IDENFR buf
ASSIGN =
INTCON 0
SEMICN ;
IDENFR buf
ASSIGN =
IDENFR mysum
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR a1
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
CONSTTK const
INTTK int
IDENFR lalala
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR getsum3
ASSIGN =
INTCON 0
SEMICN ;
IDENFR getsum3
ASSIGN =
IDENFR sum3
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
INTTK int
IDENFR jjj
ASSIGN =
INTCON 3
MULT *
IDENFR a
PLUS +
INTCON 4
SEMICN ;
INTTK int
IDENFR tt
ASSIGN =
IDENFR a
PLUS +
INTCON 2
SEMICN ;
INTTK int
IDENFR tt1
ASSIGN =
LPARENT (
LPARENT (
LPARENT (
IDENFR a
MOD %
INTCON 2
RPARENT )
PLUS +
IDENFR b
RPARENT )
DIV /
INTCON 3
RPARENT )
MULT *
IDENFR c
SEMICN ;
INTTK int
IDENFR input
ASSIGN =
INTCON 0
SEMICN ;
IDENFR input
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR m1
ASSIGN =
INTCON 0
SEMICN ;
IDENFR m1
ASSIGN =
IDENFR a
PLUS +
IDENFR b
SEMICN ;
IFTK if
LPARENT (
IDENFR m1
GRE >
INTCON 0
AND &&
INTCON 1
RPARENT )
LBRACE {
IDENFR m1
ASSIGN =
IDENFR m1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR m1
LEQ <=
INTCON 7
OR ||
IDENFR jjj
EQL ==
INTCON 0
RPARENT )
LBRACE {
IDENFR m1
ASSIGN =
IDENFR m1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR m1
NEQ !=
IDENFR tt
OR ||
IDENFR jjj
GRE >
INTCON 0
AND &&
IDENFR input
EQL ==
INTCON 1
RPARENT )
LBRACE {
IDENFR m1
ASSIGN =
IDENFR m1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
LPARENT (
IDENFR m1
PLUS +
INTCON 3
RPARENT )
MULT *
INTCON 2
MOD %
IDENFR jjj
DIV /
INTCON 3
GEQ >=
INTCON 7
AND &&
IDENFR jjj
GRE >
IDENFR tt
MULT *
IDENFR tt1
MINU -
INTCON 5
DIV /
IDENFR tt1
OR ||
IDENFR m1
EQL ==
INTCON 0
RPARENT )
LBRACE {
IDENFR m1
ASSIGN =
IDENFR m1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR tt
AND &&
PLUS +
MINU -
PLUS +
IDENFR jjj
AND &&
INTCON 1
RPARENT )
LBRACE {
IDENFR m1
ASSIGN =
IDENFR m1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 1
AND &&
IDENFR get1
LPARENT (
RPARENT )
AND &&
IDENFR mysum
LPARENT (
INTCON 1
COMMA ,
INTCON 2
RPARENT )
AND &&
IDENFR get2
LPARENT (
IDENFR a1
COMMA ,
INTCON 1
RPARENT )
AND &&
IDENFR get3
LPARENT (
IDENFR b1
RPARENT )
RPARENT )
LBRACE {
IDENFR m1
ASSIGN =
IDENFR m1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR testgantan
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR testgantan
RPARENT )
LBRACE {
IDENFR m1
ASSIGN =
IDENFR m1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR usee
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR usii
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR usee
LEQ <=
INTCON 10
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR usee
MOD %
INTCON 2
EQL ==
INTCON 0
RPARENT )
LBRACE {
IDENFR usii
ASSIGN =
IDENFR usii
PLUS +
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR usii
ASSIGN =
IDENFR usii
PLUS +
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR usii
LEQ <=
INTCON 10
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IDENFR usee
ASSIGN =
IDENFR usee
PLUS +
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 3
RPARENT )
LBRACE {
IDENFR a1
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR a1
LBRACK [
IDENFR i
RBRACK ]
PLUS +
INTCON 1
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 3
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
INTCON 2
RPARENT )
LBRACE {
IDENFR b1
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR b1
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
PLUS +
INTCON 1
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR sumshuzu
LPARENT (
IDENFR a1
COMMA ,
INTCON 2
RPARENT )
SEMICN ;
IDENFR sumshuzu1
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "20373460\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR m1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "usii = %d\n"
COMMA ,
IDENFR usii
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "usee = %d\n"
COMMA ,
IDENFR usee
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "buf = %d\n"
COMMA ,
IDENFR buf
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "getsum3 = %d\n"
COMMA ,
IDENFR getsum3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "jjj = %d\n"
COMMA ,
IDENFR jjj
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "tt1 = %d"
COMMA ,
IDENFR tt1
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
