INTTK int
IDENFR my
SEMICN ;
VOIDTK void
IDENFR decl
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR a1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
SEMICN ;
INTTK int
IDENFR x
ASSIGN =
INTCON 2
COMMA ,
IDENFR x1
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR repite
LPARENT (
INTTK int
IDENFR a1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "repite\n"
RPARENT )
SEMICN ;
RETURNTK return
IDENFR a1
SEMICN ;
RBRACE }
INTTK int
IDENFR repite2
LPARENT (
INTTK int
IDENFR a1
COMMA ,
INTTK int
IDENFR a2
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "repite2\n"
RPARENT )
SEMICN ;
RETURNTK return
IDENFR a1
MULT *
IDENFR a2
SEMICN ;
RBRACE }
INTTK int
IDENFR f1
LPARENT (
INTTK int
IDENFR a1
COMMA ,
INTTK int
IDENFR a2
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR a3
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
SEMICN ;
INTTK int
IDENFR s1
SEMICN ;
IFTK if
LPARENT (
NOT !
LPARENT (
IDENFR a1
RPARENT )
RPARENT )
LBRACE {
IDENFR s1
ASSIGN =
IDENFR a1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a1
NEQ !=
INTCON 2
RPARENT )
LBRACE {
IDENFR s1
ASSIGN =
IDENFR a1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR s1
ASSIGN =
IDENFR s1
PLUS +
IDENFR a1
SEMICN ;
RBRACE }
WHILETK while
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
MINU -
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
EQL ==
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
RBRACE }
RETURNTK return
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
MULT *
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f2
LPARENT (
INTTK int
IDENFR a1
COMMA ,
INTTK int
IDENFR a2
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR a3
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
SEMICN ;
INTTK int
IDENFR s1
SEMICN ;
IFTK if
LPARENT (
IDENFR a1
EQL ==
INTCON 2
RPARENT )
LBRACE {
IDENFR s1
ASSIGN =
IDENFR a1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a1
EQL ==
INTCON 3
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR a1
NEQ !=
INTCON 2
RPARENT )
LBRACE {
IDENFR s1
ASSIGN =
IDENFR a1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR s1
ASSIGN =
IDENFR s1
PLUS +
IDENFR a1
SEMICN ;
RBRACE }
WHILETK while
LPARENT (
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
EQL ==
MINU -
INTCON 1
OR ||
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
LEQ <=
INTCON 0
AND &&
IDENFR a2
LBRACK [
INTCON 1
RBRACK ]
EQL ==
INTCON 2
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
MINU -
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "20373110\n"
RPARENT )
SEMICN ;
CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR a1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
COMMA ,
IDENFR a2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 2
DIV /
INTCON 2
COMMA ,
INTCON 1
RBRACE }
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR a_1
ASSIGN =
INTCON 1
COMMA ,
IDENFR a_2
ASSIGN =
INTCON 2
SEMICN ;
CONSTTK const
INTTK int
IDENFR a_3
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR x
ASSIGN =
INTCON 2
SEMICN ;
INTTK int
IDENFR b
COMMA ,
IDENFR c
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
COMMA ,
IDENFR d
LBRACK [
INTCON 2
MULT *
INTCON 1
RBRACK ]
LBRACK [
INTCON 2
DIV /
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
IDENFR a
COMMA ,
IDENFR a
RBRACE }
COMMA ,
LBRACE {
IDENFR a
COMMA ,
IDENFR a
RBRACE }
RBRACE }
COMMA ,
IDENFR e
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR y
COMMA ,
IDENFR z
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
IDENFR x
COMMA ,
IDENFR x
RBRACE }
COMMA ,
IDENFR Z
LBRACK [
INTCON 2
MULT *
INTCON 1
RBRACK ]
LBRACK [
INTCON 2
DIV /
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
IDENFR x
COMMA ,
IDENFR x
RBRACE }
COMMA ,
LBRACE {
INTCON 1
MULT *
IDENFR x
COMMA ,
INTCON 2
MULT *
INTCON 1
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR x1
ASSIGN =
INTCON 1
COMMA ,
IDENFR x2
ASSIGN =
INTCON 2
SEMICN ;
IDENFR y
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "input test:%d %d\n"
COMMA ,
IDENFR y
COMMA ,
IDENFR d
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "calculate test:%d %d %d %d, %d %d %d, %d %d\n"
COMMA ,
LPARENT (
IDENFR x
MULT *
IDENFR Z
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
COMMA ,
IDENFR z
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
INTCON 1
COMMA ,
INTCON 2
COMMA ,
IDENFR Z
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
MULT *
IDENFR Z
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR Z
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
DIV /
IDENFR Z
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR Z
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
MOD %
IDENFR Z
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR Z
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
PLUS +
IDENFR Z
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR Z
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
MINU -
IDENFR Z
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR Z
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
LSS <
IDENFR Z
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
OR ||
IDENFR Z
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
GRE >
IDENFR Z
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
OR ||
IDENFR Z
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
LEQ <=
IDENFR Z
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
OR ||
IDENFR Z
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
GEQ >=
IDENFR Z
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
OR ||
IDENFR Z
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
EQL ==
IDENFR Z
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
OR ||
IDENFR Z
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
NEQ !=
IDENFR Z
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "1\n"
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "excute repite(a) = %d\n"
COMMA ,
IDENFR repite
LPARENT (
IDENFR a
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "excute repite2(a) = %d\n"
COMMA ,
IDENFR repite2
LPARENT (
IDENFR a
COMMA ,
IDENFR c
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "excute +f1(x, z, Z) = %d\n"
COMMA ,
PLUS +
IDENFR f1
LPARENT (
IDENFR x
COMMA ,
IDENFR z
COMMA ,
IDENFR Z
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "excute +f1(x, z, Z) = %d\n"
COMMA ,
MINU -
IDENFR f1
LPARENT (
IDENFR x
COMMA ,
IDENFR Z
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR Z
RPARENT )
RPARENT )
SEMICN ;
IDENFR f2
LPARENT (
IDENFR x
COMMA ,
IDENFR z
COMMA ,
IDENFR Z
RPARENT )
SEMICN ;
IDENFR decl
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
