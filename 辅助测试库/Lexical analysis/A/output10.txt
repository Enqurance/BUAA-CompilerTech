CONSTTK const
INTTK int
IDENFR gloconst
ASSIGN =
INTCON 250
SEMICN ;
INTTK int
IDENFR glox
ASSIGN =
INTCON 1000
SEMICN ;
INTTK int
IDENFR print1
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "print1\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR testParam
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR testParams
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR c
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR temp
ASSIGN =
LPARENT (
IDENFR a
PLUS +
IDENFR b
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
MULT *
IDENFR c
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "testParams : %d\n"
COMMA ,
IDENFR temp
RPARENT )
SEMICN ;
RETURNTK return
IDENFR temp
SEMICN ;
RBRACE }
INTTK int
IDENFR testtwoParams
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
PLUS +
IDENFR a
MINU -
IDENFR b
SEMICN ;
RBRACE }
VOIDTK void
IDENFR printsth
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
MINU -
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
LSS <
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "<\n"
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
GEQ >=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON ">=\n"
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
LEQ <=
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "<=\n"
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON ">\n"
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "20373188\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR in
ASSIGN =
INTCON 0
SEMICN ;
IDENFR in
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "the in is : %d\n"
COMMA ,
IDENFR in
RPARENT )
SEMICN ;
CONSTTK const
INTTK int
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
MINU -
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR a1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
PLUS +
MINU -
PLUS +
MINU -
INTCON 1
COMMA ,
INTCON 1
PLUS +
INTCON 1
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR a2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
PLUS +
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 1
PLUS +
INTCON 1
RBRACE }
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR a5
ASSIGN =
INTCON 0
SEMICN ;
CONSTTK const
INTTK int
IDENFR a6
ASSIGN =
INTCON 2
PLUS +
INTCON 2
SEMICN ;
CONSTTK const
INTTK int
IDENFR a7
ASSIGN =
INTCON 10
COMMA ,
IDENFR a8
ASSIGN =
INTCON 100
COMMA ,
IDENFR a3
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
IDENFR a4
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR b
SEMICN ;
INTTK int
IDENFR b1
ASSIGN =
PLUS +
MINU -
PLUS +
MINU -
INTCON 1
SEMICN ;
INTTK int
IDENFR b2
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR b9
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
INTTK int
IDENFR b3
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
INTTK int
IDENFR b4
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
INTTK int
IDENFR b5
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
PLUS +
INTCON 1
COMMA ,
PLUS +
MINU -
PLUS +
MINU -
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 1
PLUS +
INTCON 1
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR b6
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
PLUS +
MINU -
PLUS +
MINU -
INTCON 1
COMMA ,
INTCON 1
PLUS +
INTCON 1
RBRACE }
SEMICN ;
INTTK int
IDENFR b7
ASSIGN =
INTCON 1
COMMA ,
IDENFR b8
ASSIGN =
INTCON 0
COMMA ,
IDENFR b10
COMMA ,
IDENFR b11
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
RBRACE }
COMMA ,
IDENFR b12
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 1
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR b13
COMMA ,
IDENFR b14
SEMICN ;
IDENFR print1
LPARENT (
RPARENT )
SEMICN ;
LBRACE {
LBRACE {
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 0
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "20373188\n"
RPARENT )
SEMICN ;
RBRACE }
IDENFR testParam
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR testParams
LPARENT (
IDENFR b1
COMMA ,
IDENFR b6
COMMA ,
IDENFR b5
RPARENT )
SEMICN ;
IDENFR testParams
LPARENT (
IDENFR b1
COMMA ,
IDENFR b5
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR b5
RPARENT )
SEMICN ;
IDENFR testtwoParams
LPARENT (
IDENFR b1
COMMA ,
IDENFR b2
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IFTK if
LPARENT (
INTCON 1
OR ||
IDENFR b1
EQL ==
INTCON 100
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 0
AND &&
IDENFR b1
NEQ !=
INTCON 100
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a5
AND &&
IDENFR b9
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a5
EQL ==
INTCON 0
OR ||
IDENFR a
NEQ !=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
IDENFR a
SEMICN ;
IDENFR b
ASSIGN =
IDENFR b6
LBRACK [
INTCON 2
RBRACK ]
PLUS +
LPARENT (
IDENFR b6
LBRACK [
INTCON 1
RBRACK ]
MINU -
IDENFR b6
LBRACK [
INTCON 0
RBRACK ]
MOD %
IDENFR b6
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
MULT *
IDENFR b6
LBRACK [
INTCON 1
RBRACK ]
DIV /
IDENFR b6
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "20373188\n"
RPARENT )
SEMICN ;
IDENFR b
ASSIGN =
IDENFR b5
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
RBRACE }
RBRACE }
ELSETK else
LBRACE {
IDENFR b
ASSIGN =
INTCON 100
SEMICN ;
RBRACE }
WHILETK while
LPARENT (
IDENFR i
LEQ <=
INTCON 100
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 4
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
LSS <
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR printsth
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
