CONSTTK const
INTTK int
IDENFR c1
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR c2
ASSIGN =
INTCON 2
COMMA ,
IDENFR c3
ASSIGN =
INTCON 3
COMMA ,
IDENFR c4
ASSIGN =
INTCON 4
SEMICN ;
CONSTTK const
INTTK int
IDENFR c5
ASSIGN =
INTCON 5
COMMA ,
IDENFR c6
ASSIGN =
INTCON 6
SEMICN ;
CONSTTK const
INTTK int
IDENFR carr
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR cmat
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
LBRACE {
INTCON 4
COMMA ,
INTCON 5
COMMA ,
INTCON 6
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR v1
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR v2
ASSIGN =
INTCON 2
COMMA ,
IDENFR v3
ASSIGN =
INTCON 3
COMMA ,
IDENFR v4
SEMICN ;
INTTK int
IDENFR v5
SEMICN ;
INTTK int
IDENFR arr
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
INTTK int
IDENFR mat
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
LBRACE {
INTCON 4
COMMA ,
INTCON 5
COMMA ,
INTCON 6
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR arr2
LBRACK [
INTCON 3
RBRACK ]
COMMA ,
IDENFR mat2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
VOIDTK void
IDENFR f
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "This is f().\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
INTCON 4
SEMICN ;
IDENFR a
ASSIGN =
INTCON 5
SEMICN ;
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
LBRACE {
RBRACE }
LBRACE {
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 1
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
SEMICN ;
RBRACE }
WHILETK while
LPARENT (
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
IDENFR a
MINU -
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR g0
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR g1
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
PLUS +
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR g2
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
SEMICN ;
RBRACE }
INTTK int
IDENFR g3
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
PLUS +
IDENFR c
SEMICN ;
RBRACE }
VOIDTK void
IDENFR h
LPARENT (
INTTK int
IDENFR arr
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR mat
LBRACK [
RBRACK ]
LBRACK [
INTCON 4
RBRACK ]
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d, %d\n"
COMMA ,
IDENFR arr
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR mat
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR n
LPARENT (
RPARENT )
LBRACE {
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19373035\n"
RPARENT )
SEMICN ;
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
SEMICN ;
INTTK int
IDENFR arr
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
IDENFR arr
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR mat
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 4
RBRACK ]
SEMICN ;
IDENFR mat
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
LPARENT (
INTCON 1
PLUS +
INTCON 1
RPARENT )
SEMICN ;
IDENFR a
SEMICN ;
INTCON 3
SEMICN ;
INTCON 2
PLUS +
INTCON 5
MINU -
IDENFR a
SEMICN ;
IDENFR arr
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
IDENFR g0
LPARENT (
RPARENT )
SEMICN ;
IDENFR g1
LPARENT (
INTCON 3
RPARENT )
SEMICN ;
IDENFR g2
LPARENT (
INTCON 3
COMMA ,
INTCON 5
RPARENT )
SEMICN ;
IDENFR g3
LPARENT (
IDENFR a
COMMA ,
IDENFR a
COMMA ,
IDENFR a
RPARENT )
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
IDENFR h
LPARENT (
IDENFR arr
COMMA ,
IDENFR mat
RPARENT )
SEMICN ;
IDENFR h
LPARENT (
IDENFR mat
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR mat
RPARENT )
SEMICN ;
IDENFR v1
MULT *
IDENFR v2
PLUS +
INTCON 3
MINU -
INTCON 4
SEMICN ;
IFTK if
LPARENT (
IDENFR v1
DIV /
IDENFR v2
LSS <
IDENFR v1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR v1
MOD %
IDENFR v2
GRE >
IDENFR v1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR v1
MOD %
IDENFR v2
GEQ >=
IDENFR v1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR v1
MOD %
IDENFR v2
LEQ <=
IDENFR v1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 3
EQL ==
INTCON 2
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 3
NEQ !=
INTCON 2
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 3
AND &&
INTCON 2
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 3
OR ||
INTCON 2
RPARENT )
SEMICN ;
PLUS +
INTCON 1
SEMICN ;
MINU -
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "a:%d\n"
COMMA ,
IDENFR a
PLUS +
INTCON 1
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
