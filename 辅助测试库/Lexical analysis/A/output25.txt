CONSTTK const
INTTK int
IDENFR N
ASSIGN =
INTCON 10007
SEMICN ;
CONSTTK const
INTTK int
IDENFR const_diag_matrix
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 1
RBRACE }
RBRACE }
COMMA ,
IDENFR const_d_matrix
ASSIGN =
INTCON 3
SEMICN ;
CONSTTK const
INTTK int
IDENFR const_base
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR const_a
ASSIGN =
INTCON 1
COMMA ,
IDENFR const_b
ASSIGN =
INTCON 2
COMMA ,
IDENFR const_c
ASSIGN =
INTCON 3
COMMA ,
IDENFR const_d
ASSIGN =
INTCON 4
SEMICN ;
INTTK int
IDENFR diag_matrix
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 1
RBRACE }
RBRACE }
COMMA ,
IDENFR d_matrix
ASSIGN =
INTCON 3
SEMICN ;
INTTK int
IDENFR base
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
SEMICN ;
INTTK int
IDENFR matrix_A
LBRACK [
INTCON 10
RBRACK ]
LBRACK [
INTCON 10
RBRACK ]
SEMICN ;
INTTK int
IDENFR matrix_B
LBRACK [
INTCON 10
RBRACK ]
LBRACK [
INTCON 10
RBRACK ]
SEMICN ;
VOIDTK void
IDENFR print_id
LPARENT (
INTTK int
IDENFR id
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR id
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 0
AND &&
INTCON 4
GRE >
INTCON 5
RPARENT )
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR print_matrix
LPARENT (
INTTK int
IDENFR matrix
LBRACK [
RBRACK ]
LBRACK [
INTCON 10
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
COMMA ,
IDENFR j
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 10
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
INTCON 10
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR j
EQL ==
INTCON 10
MINU -
INTCON 1
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "%d"
COMMA ,
IDENFR matrix
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
RPARENT )
SEMICN ;
ELSETK else
PRINTFTK printf
LPARENT (
STRCON "%d "
COMMA ,
IDENFR matrix
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
RPARENT )
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
VOIDTK void
IDENFR create_double_matrix
LPARENT (
INTTK int
IDENFR matrix_A
LBRACK [
RBRACK ]
LBRACK [
INTCON 10
RBRACK ]
COMMA ,
INTTK int
IDENFR matrix_B
LBRACK [
RBRACK ]
LBRACK [
INTCON 10
RBRACK ]
COMMA ,
INTTK int
IDENFR x
COMMA ,
INTTK int
IDENFR y
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
COMMA ,
IDENFR j
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 10
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
INTCON 10
RPARENT )
LBRACE {
IDENFR matrix_A
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR i
PLUS +
INTCON 1
PLUS +
IDENFR x
SEMICN ;
IDENFR matrix_B
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR j
PLUS +
INTCON 1
PLUS +
IDENFR y
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR sum_matrix
LPARENT (
INTTK int
IDENFR matrix
LBRACK [
RBRACK ]
LBRACK [
INTCON 10
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
COMMA ,
IDENFR j
COMMA ,
IDENFR k
SEMICN ;
INTTK int
IDENFR res
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 10
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
INTCON 10
RPARENT )
LBRACE {
IDENFR res
ASSIGN =
IDENFR res
PLUS +
IDENFR matrix
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR res
SEMICN ;
RBRACE }
INTTK int
IDENFR multi_double_matrix
LPARENT (
INTTK int
IDENFR matrix_A
LBRACK [
RBRACK ]
LBRACK [
INTCON 10
RBRACK ]
COMMA ,
INTTK int
IDENFR matrix_B
LBRACK [
RBRACK ]
LBRACK [
INTCON 10
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR matrix_C
LBRACK [
INTCON 10
RBRACK ]
LBRACK [
INTCON 10
RBRACK ]
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
COMMA ,
IDENFR j
COMMA ,
IDENFR k
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 10
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
INTCON 10
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
INTCON 0
SEMICN ;
IDENFR matrix_C
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR k
LSS <
INTCON 10
RPARENT )
LBRACE {
IDENFR matrix_C
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR matrix_C
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
PLUS +
IDENFR matrix_A
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR k
RBRACK ]
MULT *
IDENFR matrix_B
LBRACK [
IDENFR k
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR k
ASSIGN =
IDENFR k
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR sum_matrix
LPARENT (
IDENFR matrix_C
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR vdot
LPARENT (
INTTK int
IDENFR x
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR y
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR d
ASSIGN =
INTCON 0
COMMA ,
IDENFR sum
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
INTCON 1
OR ||
INTCON 0
RPARENT )
LBRACE {
IDENFR sum
ASSIGN =
IDENFR sum
PLUS +
IDENFR x
LBRACK [
IDENFR d
RBRACK ]
MULT *
IDENFR y
LBRACK [
IDENFR d
RBRACK ]
DIV /
INTCON 1
SEMICN ;
IDENFR d
ASSIGN =
IDENFR d
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR d
EQL ==
IDENFR const_d_matrix
OR ||
INTCON 0
AND &&
NOT !
MINU -
IDENFR sum
LSS <
INTCON 7
PLUS +
INTCON 1
OR ||
PLUS +
IDENFR sum
GRE >
INTCON 8
MINU -
INTCON 1
RPARENT )
BREAKTK break
SEMICN ;
ELSETK else
IFTK if
LPARENT (
INTCON 1
RPARENT )
CONTINUETK continue
SEMICN ;
ELSETK else
SEMICN ;
RBRACE }
RETURNTK return
IDENFR sum
SEMICN ;
RBRACE }
VOIDTK void
IDENFR print_vec
LPARENT (
INTTK int
IDENFR v
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d %d %d\n"
COMMA ,
IDENFR v
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR v
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR v
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR print_solve_math_problem
LPARENT (
RPARENT )
LBRACE {
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Let us solve math problem\n"
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
VOIDTK void
IDENFR empty_block
LPARENT (
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR solve_math_problem
LPARENT (
INTTK int
IDENFR x
COMMA ,
INTTK int
IDENFR y
RPARENT )
LBRACE {
INTTK int
IDENFR tmp
SEMICN ;
IDENFR print_solve_math_problem
LPARENT (
RPARENT )
SEMICN ;
IDENFR empty_block
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
EQL ==
IDENFR y
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "x not equal to y\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IFTK if
LPARENT (
IDENFR x
NEQ !=
IDENFR y
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "x is not equal to y and "
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
GEQ >=
IDENFR y
RPARENT )
LBRACE {
IDENFR tmp
ASSIGN =
IDENFR x
MINU -
IDENFR y
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "x is %d more than y\n"
COMMA ,
IDENFR tmp
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
LEQ <=
IDENFR y
RPARENT )
LBRACE {
IDENFR tmp
ASSIGN =
IDENFR y
MINU -
IDENFR x
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "y is %d more than x\n"
COMMA ,
IDENFR tmp
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR N
ASSIGN =
INTCON 3
SEMICN ;
INTTK int
IDENFR v
LBRACK [
INTCON 3
RBRACK ]
COMMA ,
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR N
RPARENT )
LBRACE {
IDENFR v
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
NOT !
INTCON 0
AND &&
INTCON 0
OR ||
INTCON 1
RPARENT )
IDENFR print_id
LPARENT (
INTCON 20373623
RPARENT )
SEMICN ;
IDENFR create_double_matrix
LPARENT (
IDENFR matrix_A
COMMA ,
IDENFR matrix_B
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
IDENFR print_matrix
LPARENT (
IDENFR matrix_A
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
IDENFR print_matrix
LPARENT (
IDENFR matrix_B
RPARENT )
SEMICN ;
INTTK int
IDENFR res
ASSIGN =
LPARENT (
LPARENT (
INTCON 1
PLUS +
INTCON 1
DIV /
INTCON 1
MULT *
INTCON 1
RPARENT )
MOD %
INTCON 2
RPARENT )
MINU -
PLUS +
INTCON 1
MINU -
PLUS +
MINU -
INTCON 1
SEMICN ;
IDENFR res
ASSIGN =
IDENFR multi_double_matrix
LPARENT (
IDENFR matrix_A
COMMA ,
IDENFR matrix_B
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR res
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR N
RPARENT )
LBRACE {
INTTK int
IDENFR res
ASSIGN =
INTCON 0
SEMICN ;
IDENFR res
ASSIGN =
IDENFR vdot
LPARENT (
IDENFR v
COMMA ,
IDENFR diag_matrix
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR res
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR solve_math_problem
LPARENT (
INTCON 100
COMMA ,
INTCON 100
RPARENT )
SEMICN ;
IDENFR solve_math_problem
LPARENT (
INTCON 200
COMMA ,
INTCON 100
RPARENT )
SEMICN ;
IDENFR solve_math_problem
LPARENT (
INTCON 100
COMMA ,
INTCON 300
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
