INTTK int
IDENFR s1_1
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 25
MULT *
INTCON 4
COMMA ,
INTCON 200
COMMA ,
INTCON 300
COMMA ,
INTCON 400
COMMA ,
INTCON 500
RBRACE }
COMMA ,
LBRACE {
INTCON 111
COMMA ,
INTCON 222
COMMA ,
INTCON 333
COMMA ,
INTCON 444
COMMA ,
INTCON 555
RBRACE }
COMMA ,
LBRACE {
INTCON 99
COMMA ,
INTCON 102
COMMA ,
INTCON 0
COMMA ,
INTCON 123
COMMA ,
INTCON 145
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR s2_1
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 100
COMMA ,
INTCON 200
COMMA ,
INTCON 300
COMMA ,
INTCON 400
COMMA ,
INTCON 500
RBRACE }
COMMA ,
LBRACE {
INTCON 111
COMMA ,
INTCON 222
COMMA ,
INTCON 333
COMMA ,
INTCON 444
COMMA ,
INTCON 555
RBRACE }
COMMA ,
LBRACE {
INTCON 99
COMMA ,
INTCON 102
COMMA ,
INTCON 0
COMMA ,
INTCON 123
COMMA ,
INTCON 145
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR add
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 123
COMMA ,
INTCON 666
COMMA ,
INTCON 456
RBRACE }
COMMA ,
IDENFR s_2
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
SEMICN ;
INTTK int
IDENFR s_3
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR a1
ASSIGN =
INTCON 1
COMMA ,
IDENFR a2
ASSIGN =
INTCON 2
COMMA ,
IDENFR a3
ASSIGN =
INTCON 3
SEMICN ;
CONSTTK const
INTTK int
IDENFR month
LBRACK [
INTCON 9
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
COMMA ,
INTCON 6
COMMA ,
INTCON 7
COMMA ,
INTCON 8
COMMA ,
INTCON 9
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR year_1
ASSIGN =
INTCON 4
COMMA ,
IDENFR year_2
ASSIGN =
IDENFR year_1
MULT *
INTCON 25
SEMICN ;
VOIDTK void
IDENFR get_average
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
LBRACK [
INTCON 5
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR s
ASSIGN =
INTCON 0
COMMA ,
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR s
ASSIGN =
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
PLUS +
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
PLUS +
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
PLUS +
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
INTCON 4
RBRACK ]
SEMICN ;
IDENFR s
ASSIGN =
IDENFR s
DIV /
INTCON 5
SEMICN ;
IDENFR s_2
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR s
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
MINU -
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR blank
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR blank2
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR C23
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
INTTK int
IDENFR add_1
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR s
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR i_1
ASSIGN =
INTCON 2
COMMA ,
IDENFR sum
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i_1
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR sum
ASSIGN =
IDENFR sum
PLUS +
IDENFR s
LBRACK [
IDENFR i_1
RBRACK ]
SEMICN ;
IDENFR i_1
ASSIGN =
IDENFR i_1
MINU -
INTCON 1
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
MINU -
INTCON 3
SEMICN ;
IDENFR sum
ASSIGN =
IDENFR sum
DIV /
IDENFR a
SEMICN ;
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 4
SEMICN ;
IDENFR sum
ASSIGN =
IDENFR sum
MULT *
IDENFR a
SEMICN ;
IDENFR sum
ASSIGN =
IDENFR sum
MINU -
IDENFR a
SEMICN ;
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 6
SEMICN ;
IDENFR sum
ASSIGN =
IDENFR sum
MOD %
IDENFR a
SEMICN ;
RETURNTK return
IDENFR sum
SEMICN ;
RBRACE }
INTTK int
IDENFR checkyear
LPARENT (
INTTK int
IDENFR year
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR year
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR year
NEQ !=
PLUS +
INTCON 2022
OR ||
IDENFR year
LEQ <=
INTCON 2021
RPARENT )
LBRACE {
IFTK if
LPARENT (
LPARENT (
IDENFR year
MOD %
LPARENT (
MINU -
IDENFR year_1
MULT *
MINU -
IDENFR year_2
RPARENT )
RPARENT )
EQL ==
INTCON 0
OR ||
LPARENT (
IDENFR year
MOD %
IDENFR year_1
RPARENT )
EQL ==
INTCON 0
AND &&
LPARENT (
IDENFR year
MOD %
IDENFR year_2
RPARENT )
NEQ !=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "run:%d\n"
COMMA ,
IDENFR year
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "not run:%d\n"
COMMA ,
IDENFR year
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "2022!!!\n"
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
RETURNTK return
IDENFR year
SEMICN ;
RBRACE }
VOIDTK void
IDENFR printsth
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "printsth\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
LBRACE {
INTTK int
IDENFR j
ASSIGN =
INTCON 0
COMMA ,
IDENFR k
ASSIGN =
INTCON 3
COMMA ,
IDENFR i
ASSIGN =
INTCON 3
SEMICN ;
INTTK int
IDENFR in_put
SEMICN ;
INTTK int
IDENFR x
COMMA ,
IDENFR y
COMMA ,
IDENFR z
SEMICN ;
INTTK int
IDENFR x_1
SEMICN ;
INTTK int
IDENFR y_1
COMMA ,
IDENFR z_1
SEMICN ;
INTTK int
IDENFR aaa
COMMA ,
IDENFR bbb
COMMA ,
IDENFR ccc
COMMA ,
IDENFR ddd
COMMA ,
IDENFR eee
COMMA ,
IDENFR fff
SEMICN ;
IDENFR in_put
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR y
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR z
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR x_1
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR y_1
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR z_1
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "20373614\n"
RPARENT )
SEMICN ;
IDENFR get_average
LPARENT (
IDENFR s1_1
RPARENT )
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR s_2
LBRACK [
IDENFR i
MINU -
INTCON 1
RBRACK ]
EQL ==
INTCON 300
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
MINU -
INTCON 1
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IFTK if
LPARENT (
INTCON 1
AND &&
NOT !
LPARENT (
IDENFR s_2
LBRACK [
IDENFR i
MINU -
INTCON 1
RBRACK ]
MINU -
INTCON 300
RPARENT )
AND &&
IDENFR s_2
LBRACK [
IDENFR i
MINU -
INTCON 1
RBRACK ]
LSS <
INTCON 100
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "LOW:%d\n"
COMMA ,
IDENFR s_2
LBRACK [
IDENFR i
MINU -
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 0
GRE >
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR s_2
LBRACK [
IDENFR i
MINU -
INTCON 1
RBRACK ]
EQL ==
INTCON 300
OR ||
IDENFR s_2
LBRACK [
IDENFR i
MINU -
INTCON 1
RBRACK ]
GRE >
INTCON 332
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "HIGH:%d\n"
COMMA ,
IDENFR s_2
LBRACK [
IDENFR i
MINU -
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
MINU -
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
IDENFR j
ASSIGN =
IDENFR add_1
LPARENT (
INTCON 5
COMMA ,
IDENFR add
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "add:%d\n"
COMMA ,
IDENFR j
RPARENT )
SEMICN ;
IDENFR k
ASSIGN =
IDENFR add_1
LPARENT (
IDENFR in_put
COMMA ,
IDENFR add
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "input:%d\n"
COMMA ,
IDENFR k
RPARENT )
SEMICN ;
IDENFR aaa
ASSIGN =
IDENFR checkyear
LPARENT (
IDENFR x
RPARENT )
SEMICN ;
IDENFR bbb
ASSIGN =
IDENFR checkyear
LPARENT (
IDENFR y
RPARENT )
SEMICN ;
IDENFR ccc
ASSIGN =
IDENFR checkyear
LPARENT (
IDENFR z
RPARENT )
SEMICN ;
IDENFR ddd
ASSIGN =
IDENFR checkyear
LPARENT (
IDENFR x_1
RPARENT )
SEMICN ;
IDENFR eee
ASSIGN =
IDENFR checkyear
LPARENT (
IDENFR y_1
RPARENT )
SEMICN ;
IDENFR fff
ASSIGN =
IDENFR checkyear
LPARENT (
IDENFR z_1
RPARENT )
SEMICN ;
IDENFR blank2
LPARENT (
IDENFR j
COMMA ,
IDENFR add
COMMA ,
IDENFR s1_1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "year1:%d,year2:%d,year3:%d,year4:%d,year5:%d,year6:%d\n"
COMMA ,
IDENFR aaa
COMMA ,
IDENFR bbb
COMMA ,
IDENFR ccc
COMMA ,
IDENFR ddd
COMMA ,
IDENFR eee
COMMA ,
IDENFR fff
RPARENT )
SEMICN ;
RBRACE }
IDENFR printsth
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
