CONSTTK const
INTTK int
IDENFR b
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
IDENFR c
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 4
RBRACE }
COMMA ,
LBRACE {
INTCON 2
COMMA ,
INTCON 3
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR b1
LBRACK [
INTCON 4
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 3
COMMA ,
INTCON 5
COMMA ,
INTCON 7
RBRACE }
COMMA ,
IDENFR c1
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
LBRACE {
INTCON 4
COMMA ,
INTCON 5
COMMA ,
INTCON 6
RBRACE }
COMMA ,
LBRACE {
INTCON 7
COMMA ,
INTCON 8
COMMA ,
INTCON 9
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR func1
LPARENT (
INTTK int
IDENFR x1
COMMA ,
INTTK int
IDENFR x2
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR x3
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR t1
ASSIGN =
IDENFR x1
SEMICN ;
INTTK int
IDENFR t2
ASSIGN =
IDENFR x2
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
INTTK int
IDENFR t3
ASSIGN =
IDENFR x3
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
IFTK if
LPARENT (
INTCON 0
AND &&
INTCON 1
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "error judge\n"
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 1
OR ||
INTCON 0
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "right judge\n"
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR t1
GRE >
IDENFR t2
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "1\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
NOT !
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "2\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR t2
LEQ <=
IDENFR t3
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "4\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR t1
GEQ >=
IDENFR t3
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "3\n"
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
INTCON 2037
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func2
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "in func2\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "20373377\n"
RPARENT )
SEMICN ;
CONSTTK const
INTTK int
IDENFR _a
ASSIGN =
INTCON 2
MULT *
INTCON 3
SEMICN ;
INTTK int
IDENFR a1
ASSIGN =
INTCON 3
MULT *
INTCON 4
SEMICN ;
INTTK int
IDENFR a2
ASSIGN =
IDENFR a1
MULT *
IDENFR _a
SEMICN ;
IDENFR a2
ASSIGN =
INTCON 5
MULT *
INTCON 12
SEMICN ;
IDENFR _a
SEMICN ;
SEMICN ;
SEMICN ;
LBRACE {
INTTK int
IDENFR tmp
ASSIGN =
INTCON 687
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "5: tmp is %d\n"
COMMA ,
IDENFR tmp
RPARENT )
SEMICN ;
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "6: a2*tmp = %d\n"
COMMA ,
IDENFR a2
MULT *
IDENFR tmp
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
NEQ !=
LPARENT (
INTCON 1
PLUS +
IDENFR _a
RPARENT )
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
LSS <
INTCON 2
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 0
RPARENT )
CONTINUETK continue
SEMICN ;
INTTK int
IDENFR tmp
SEMICN ;
IDENFR tmp
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "7: i = %d, tmp is %d\n"
COMMA ,
IDENFR i
COMMA ,
IDENFR tmp
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 3
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "func1 = %d\n"
COMMA ,
IDENFR func1
LPARENT (
IDENFR _a
COMMA ,
IDENFR c1
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR c1
RPARENT )
RPARENT )
SEMICN ;
IDENFR func2
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
