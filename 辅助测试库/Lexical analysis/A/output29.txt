CONSTTK const
INTTK int
IDENFR c_01
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR c_02
ASSIGN =
INTCON 2
COMMA ,
IDENFR c_03
ASSIGN =
INTCON 3
COMMA ,
IDENFR c_04
ASSIGN =
INTCON 4
COMMA ,
IDENFR c_05
ASSIGN =
INTCON 5
MULT *
INTCON 2
PLUS +
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR c_06
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR c_07
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR v_01
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR v_02
SEMICN ;
INTTK int
IDENFR v_03
ASSIGN =
INTCON 3
COMMA ,
IDENFR v_04
COMMA ,
IDENFR v_05
ASSIGN =
INTCON 2
SEMICN ;
INTTK int
IDENFR v_06
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
INTTK int
IDENFR v_07
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
RBRACE }
SEMICN ;
VOIDTK void
IDENFR func_01
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Hello World\n"
RPARENT )
SEMICN ;
LBRACE {
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR func_02
LPARENT (
RPARENT )
LBRACE {
IDENFR v_01
ASSIGN =
IDENFR v_01
PLUS +
INTCON 1
SEMICN ;
INTTK int
IDENFR y
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR x
ASSIGN =
INTCON 1
SEMICN ;
LBRACE {
INTTK int
IDENFR x
ASSIGN =
INTCON 2
SEMICN ;
LBRACE {
INTTK int
IDENFR x
ASSIGN =
INTCON 3
SEMICN ;
LBRACE {
IDENFR y
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR y
ASSIGN =
IDENFR y
PLUS +
IDENFR x
SEMICN ;
RBRACE }
IDENFR y
ASSIGN =
IDENFR y
PLUS +
IDENFR x
SEMICN ;
RBRACE }
IDENFR y
ASSIGN =
IDENFR y
PLUS +
IDENFR x
SEMICN ;
RETURNTK return
IDENFR y
PLUS +
INTCON 11
MULT *
INTCON 22
DIV /
INTCON 33
MOD %
INTCON 44
PLUS +
LPARENT (
INTCON 11
MOD %
INTCON 22
DIV /
INTCON 33
MULT *
INTCON 44
RPARENT )
MINU -
LPARENT (
LPARENT (
INTCON 11
PLUS +
MINU -
PLUS +
MINU -
PLUS +
MINU -
INTCON 1
MINU -
PLUS +
MINU -
PLUS +
MINU -
PLUS +
INTCON 2
RPARENT )
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR func_03
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
INTTK int
IDENFR v_01
ASSIGN =
INTCON 1
SEMICN ;
RETURNTK return
LPARENT (
IDENFR a
MULT *
IDENFR v_01
MULT *
IDENFR v_05
DIV /
INTCON 123
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR func_04
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
INTTK int
IDENFR v_01
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR v_02
ASSIGN =
INTCON 2
SEMICN ;
RETURNTK return
LPARENT (
LPARENT (
IDENFR a
MULT *
IDENFR v_01
PLUS +
IDENFR b
DIV /
IDENFR v_02
RPARENT )
PLUS +
IDENFR func_02
LPARENT (
RPARENT )
MINU -
IDENFR func_03
LPARENT (
IDENFR b
RPARENT )
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR func_05
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
MULT *
INTCON 100
SEMICN ;
RBRACE }
INTTK int
IDENFR func_06
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
PLUS +
IDENFR a
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
IDENFR func_07
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR c
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR c
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
IDENFR test_if_and_while_01
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR t_01
ASSIGN =
MINU -
INTCON 10
SEMICN ;
INTTK int
IDENFR t_02
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR t_03
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR t_04
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
COMMA ,
IDENFR j
ASSIGN =
INTCON 100
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR t_01
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR t_03
ASSIGN =
INTCON 2
SEMICN ;
IDENFR t_04
ASSIGN =
PLUS +
MINU -
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR t_02
LSS <
INTCON 0
RPARENT )
LBRACE {
IDENFR t_04
ASSIGN =
IDENFR v_01
SEMICN ;
IFTK if
LPARENT (
IDENFR t_03
EQL ==
INTCON 1
RPARENT )
IDENFR t_04
ASSIGN =
IDENFR func_02
LPARENT (
RPARENT )
SEMICN ;
ELSETK else
IDENFR t_04
ASSIGN =
INTCON 123
MULT *
INTCON 456
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR t_04
ASSIGN =
PLUS +
MINU -
IDENFR func_04
LPARENT (
IDENFR v_01
COMMA ,
IDENFR v_05
RPARENT )
SEMICN ;
RBRACE }
WHILETK while
LPARENT (
IDENFR t_04
GRE >
INTCON 0
RPARENT )
IDENFR t_04
ASSIGN =
IDENFR t_04
MINU -
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR t_01
LSS <
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
LEQ <=
INTCON 10
RPARENT )
CONTINUETK continue
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 12
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR j
GRE >
INTCON 40
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR j
GRE >
INTCON 50
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR j
GRE >
INTCON 60
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR j
GRE >
INTCON 70
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
ELSETK else
IDENFR i
ASSIGN =
MINU -
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
IDENFR i
ASSIGN =
MINU -
INTCON 2
SEMICN ;
RBRACE }
ELSETK else
IDENFR i
ASSIGN =
MINU -
INTCON 3
SEMICN ;
RBRACE }
ELSETK else
IDENFR i
ASSIGN =
MINU -
INTCON 4
SEMICN ;
RETURNTK return
IDENFR i
SEMICN ;
RBRACE }
INTTK int
IDENFR test_if_and_while_02
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IFTK if
LPARENT (
IDENFR v_01
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
INTCON 123
LSS <
IDENFR v_01
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR c_01
GRE >
LPARENT (
INTCON 114514
MULT *
IDENFR v_01
PLUS +
IDENFR c_01
DIV /
LPARENT (
IDENFR func_03
LPARENT (
IDENFR v_01
RPARENT )
PLUS +
INTCON 6
RPARENT )
RPARENT )
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR func_03
LPARENT (
IDENFR v_01
RPARENT )
LEQ <=
IDENFR func_04
LPARENT (
IDENFR v_01
COMMA ,
IDENFR v_05
RPARENT )
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
PLUS +
MINU -
PLUS +
MINU -
INTCON 123
GEQ >=
MINU -
PLUS +
MINU -
PLUS +
IDENFR func_03
LPARENT (
IDENFR v_05
RPARENT )
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
INTCON 123
LSS <
IDENFR v_01
EQL ==
IDENFR func_03
LPARENT (
IDENFR v_01
RPARENT )
LEQ <=
IDENFR func_04
LPARENT (
IDENFR v_01
COMMA ,
IDENFR v_05
RPARENT )
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
INTCON 123
LSS <
IDENFR v_01
NEQ !=
IDENFR func_03
LPARENT (
IDENFR v_01
RPARENT )
GEQ >=
IDENFR func_04
LPARENT (
IDENFR v_01
COMMA ,
IDENFR v_05
RPARENT )
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
INTTK int
IDENFR j
ASSIGN =
INTCON 1
COMMA ,
IDENFR k
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR j
EQL ==
INTCON 1
AND &&
IDENFR func_02
LPARENT (
RPARENT )
AND &&
IDENFR j
EQL ==
INTCON 2
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR k
NEQ !=
INTCON 2
OR ||
IDENFR func_02
LPARENT (
RPARENT )
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR j
EQL ==
INTCON 2
OR ||
IDENFR j
EQL ==
INTCON 3
OR ||
IDENFR j
EQL ==
INTCON 4
OR ||
IDENFR j
EQL ==
INTCON 5
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR j
EQL ==
INTCON 2
OR ||
IDENFR j
EQL ==
INTCON 1
AND &&
IDENFR k
EQL ==
INTCON 2
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
IDENFR i
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
SEMICN ;
INTCON 1
PLUS +
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR vc
ASSIGN =
IDENFR c_01
COMMA ,
IDENFR vc_2
ASSIGN =
INTCON 3
SEMICN ;
CONSTTK const
INTTK int
IDENFR c_01
ASSIGN =
INTCON 2
SEMICN ;
INTTK int
IDENFR v_PE_01
ASSIGN =
INTCON 114514
SEMICN ;
INTTK int
IDENFR v_PE_02
ASSIGN =
IDENFR v_01
SEMICN ;
INTTK int
IDENFR v_PE_03
ASSIGN =
IDENFR c_01
SEMICN ;
INTTK int
IDENFR v_PE_04
ASSIGN =
LPARENT (
INTCON 11
MULT *
INTCON 22
DIV /
INTCON 33
MOD %
INTCON 44
PLUS +
INTCON 55
MINU -
INTCON 66
PLUS +
MINU -
INTCON 77
MINU -
PLUS +
INTCON 88
PLUS +
IDENFR func_02
LPARENT (
RPARENT )
RPARENT )
SEMICN ;
INTTK int
IDENFR v_UE_01
ASSIGN =
IDENFR v_PE_01
SEMICN ;
INTTK int
IDENFR v_UE_02
ASSIGN =
IDENFR func_03
LPARENT (
IDENFR v_01
RPARENT )
SEMICN ;
INTTK int
IDENFR v_UE_03_1
ASSIGN =
PLUS +
MINU -
PLUS +
MINU -
PLUS +
MINU -
INTCON 114514
SEMICN ;
INTTK int
IDENFR v_UE_03_2
ASSIGN =
MINU -
PLUS +
MINU -
PLUS +
MINU -
PLUS +
IDENFR func_04
LPARENT (
IDENFR v_01
COMMA ,
IDENFR v_03
RPARENT )
SEMICN ;
INTTK int
IDENFR v_ME_01
ASSIGN =
IDENFR v_UE_01
SEMICN ;
INTTK int
IDENFR v_ME_02
ASSIGN =
INTCON 10
MULT *
IDENFR v_01
SEMICN ;
INTTK int
IDENFR v_ME_03
ASSIGN =
IDENFR func_03
LPARENT (
IDENFR v_01
RPARENT )
DIV /
IDENFR c_01
SEMICN ;
INTTK int
IDENFR v_ME_04
ASSIGN =
PLUS +
MINU -
PLUS +
MINU -
PLUS +
MINU -
INTCON 1
MOD %
MINU -
PLUS +
MINU -
PLUS +
MINU -
PLUS +
IDENFR func_04
LPARENT (
IDENFR v_01
COMMA ,
IDENFR v_05
RPARENT )
SEMICN ;
INTTK int
IDENFR v_AE_01
ASSIGN =
IDENFR v_ME_01
SEMICN ;
INTTK int
IDENFR v_AE_02
ASSIGN =
INTCON 114514
MULT *
IDENFR v_01
PLUS +
IDENFR c_01
DIV /
LPARENT (
IDENFR func_03
LPARENT (
IDENFR v_01
RPARENT )
PLUS +
INTCON 6
RPARENT )
SEMICN ;
INTTK int
IDENFR v_AE_03
ASSIGN =
PLUS +
MINU -
PLUS +
MINU -
PLUS +
MINU -
INTCON 1
MOD %
MINU -
PLUS +
MINU -
PLUS +
MINU -
PLUS +
IDENFR func_04
LPARENT (
IDENFR v_01
COMMA ,
IDENFR v_05
RPARENT )
MINU -
INTCON 123
SEMICN ;
CONSTTK const
INTTK int
IDENFR vs_const
LBRACK [
INTCON 4
DIV /
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
SEMICN ;
INTTK int
IDENFR vs_01
LBRACK [
INTCON 9
DIV /
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
INTTK int
IDENFR vs_02
LBRACK [
INTCON 9
DIV /
INTCON 3
RBRACK ]
LBRACK [
INTCON 12
DIV /
INTCON 4
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 11
COMMA ,
INTCON 12
COMMA ,
INTCON 13
RBRACE }
COMMA ,
LBRACE {
INTCON 21
COMMA ,
INTCON 22
COMMA ,
INTCON 23
RBRACE }
COMMA ,
LBRACE {
INTCON 31
COMMA ,
INTCON 32
COMMA ,
INTCON 33
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR vs_03
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
INTTK int
IDENFR vs_04
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
INTTK int
IDENFR vs_05
ASSIGN =
IDENFR vs_const
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
INTTK int
IDENFR vs_06
ASSIGN =
IDENFR vs_01
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
INTTK int
IDENFR vs_07
ASSIGN =
IDENFR vs_02
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
IDENFR vs_01
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 10
SEMICN ;
IDENFR vs_02
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR vs_test
ASSIGN =
IDENFR vs_05
PLUS +
IDENFR vs_06
PLUS +
IDENFR vs_07
PLUS +
IDENFR func_05
LPARENT (
IDENFR vs_02
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
PLUS +
IDENFR func_06
LPARENT (
IDENFR vs_02
RPARENT )
PLUS +
IDENFR func_07
LPARENT (
IDENFR v_01
COMMA ,
IDENFR vs_01
COMMA ,
IDENFR vs_02
RPARENT )
SEMICN ;
INTTK int
IDENFR vm
SEMICN ;
INTTK int
IDENFR v_02
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR vm_01
SEMICN ;
IDENFR vm_01
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR vm_i_1
ASSIGN =
IDENFR test_if_and_while_01
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR vm_i_2
ASSIGN =
IDENFR test_if_and_while_02
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR vm_02
ASSIGN =
IDENFR func_02
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR vm_03
ASSIGN =
IDENFR func_03
LPARENT (
IDENFR v_03
RPARENT )
SEMICN ;
INTTK int
IDENFR vm_04
ASSIGN =
IDENFR func_04
LPARENT (
IDENFR v_02
COMMA ,
IDENFR v_03
RPARENT )
SEMICN ;
INTTK int
IDENFR vm_AE
ASSIGN =
IDENFR v_AE_01
DIV /
IDENFR v_AE_02
MOD %
IDENFR v_AE_03
SEMICN ;
INTTK int
IDENFR vm_ME
ASSIGN =
IDENFR v_ME_01
MULT *
IDENFR v_ME_02
PLUS +
IDENFR v_ME_03
MULT *
IDENFR v_ME_04
SEMICN ;
INTTK int
IDENFR vm_UE
ASSIGN =
IDENFR v_UE_01
MINU -
IDENFR v_UE_02
MINU -
IDENFR v_UE_03_1
MINU -
IDENFR v_UE_03_1
MINU -
IDENFR v_UE_03_2
SEMICN ;
INTTK int
IDENFR vm_PE
ASSIGN =
IDENFR v_PE_01
PLUS +
IDENFR v_PE_02
PLUS +
IDENFR v_PE_03
PLUS +
IDENFR v_PE_04
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "20377020\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "vm_01 = %d\n"
COMMA ,
IDENFR vm_01
PLUS +
INTCON 1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "vm_02 = %d,  vm_03 = %d\n"
COMMA ,
IDENFR vm_02
COMMA ,
IDENFR vm_03
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "vm_04 = %d\n"
COMMA ,
IDENFR vm_04
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "vm_AE = %d\n"
COMMA ,
IDENFR vm_AE
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "vm_ME = %d\n"
COMMA ,
IDENFR vm_ME
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "vm_UE = %d\n"
COMMA ,
IDENFR vm_UE
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "vm_PE = %d\n"
COMMA ,
IDENFR vm_PE
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "vm_i_1 = %d,  vm_i_2 = %d\n"
COMMA ,
IDENFR vm_i_1
COMMA ,
IDENFR vm_i_2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "vs_test = %d\n"
COMMA ,
IDENFR vs_test
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
