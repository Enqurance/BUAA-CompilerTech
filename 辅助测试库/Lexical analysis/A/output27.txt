INTTK int
IDENFR power
LPARENT (
INTTK int
IDENFR x
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
MULT *
IDENFR x
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
INTTK int
IDENFR add
LPARENT (
INTTK int
IDENFR x
COMMA ,
INTTK int
IDENFR y
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
IDENFR y
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
INTTK int
IDENFR sub
LPARENT (
INTTK int
IDENFR x
COMMA ,
INTTK int
IDENFR y
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
MINU -
IDENFR y
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
INTTK int
IDENFR doit
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
IDENFR a
SEMICN ;
IDENFR b
ASSIGN =
IDENFR b
SEMICN ;
IDENFR c
ASSIGN =
IDENFR c
SEMICN ;
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
VOIDTK void
IDENFR printAll
LPARENT (
INTTK int
IDENFR q
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 3
RPARENT )
LBRACE {
INTTK int
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
INTCON 2
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d "
COMMA ,
IDENFR q
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
RPARENT )
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR donothing
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
DIV /
INTCON 2
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR init
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Hello world!\n"
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "20373775\n"
RPARENT )
SEMICN ;
IDENFR init
LPARENT (
RPARENT )
SEMICN ;
CONSTTK const
INTTK int
IDENFR xxx
ASSIGN =
PLUS +
INTCON 111
COMMA ,
IDENFR yyy
ASSIGN =
PLUS +
INTCON 222
COMMA ,
IDENFR zzz
ASSIGN =
INTCON 333
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
COMMA ,
IDENFR j
COMMA ,
IDENFR n
SEMICN ;
INTTK int
IDENFR x
SEMICN ;
INTTK int
IDENFR y
ASSIGN =
INTCON 1
COMMA ,
IDENFR z
SEMICN ;
INTTK int
IDENFR op
ASSIGN =
PLUS +
MINU -
PLUS +
MINU -
INTCON 1
SEMICN ;
INTTK int
IDENFR a
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
INTTK int
IDENFR b
LBRACK [
INTCON 5
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
COMMA ,
LBRACE {
INTCON 5
COMMA ,
INTCON 6
COMMA ,
INTCON 7
RBRACE }
COMMA ,
LBRACE {
INTCON 6
COMMA ,
INTCON 7
COMMA ,
INTCON 8
RBRACE }
COMMA ,
LBRACE {
INTCON 7
COMMA ,
INTCON 8
COMMA ,
INTCON 9
RBRACE }
RBRACE }
SEMICN ;
IDENFR printAll
LPARENT (
IDENFR b
RPARENT )
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 4
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR x
SEMICN ;
IDENFR donothing
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR x
RPARENT )
LBRACE {
IDENFR y
ASSIGN =
IDENFR add
LPARENT (
IDENFR y
COMMA ,
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
INTCON 3
RPARENT )
LBRACE {
IDENFR b
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR i
PLUS +
IDENFR j
PLUS +
INTCON 10
SEMICN ;
IDENFR z
ASSIGN =
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IDENFR z
ASSIGN =
IDENFR z
DIV /
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
MOD %
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
MULT *
IDENFR z
PLUS +
IDENFR x
MINU -
IDENFR y
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
IFTK if
LPARENT (
IDENFR op
EQL ==
INTCON 1
RPARENT )
LBRACE {
IDENFR y
ASSIGN =
IDENFR sub
LPARENT (
IDENFR y
COMMA ,
IDENFR a
LBRACK [
IDENFR op
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
LBRACK [
INTCON 4
RBRACK ]
GRE >
INTCON 1
RPARENT )
LBRACE {
IDENFR doit
LPARENT (
IDENFR x
COMMA ,
IDENFR y
COMMA ,
IDENFR a
LBRACK [
IDENFR j
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GEQ >=
INTCON 10
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR add
LPARENT (
IDENFR x
COMMA ,
IDENFR y
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR y
LEQ <=
INTCON 123
RPARENT )
LBRACE {
IDENFR op
ASSIGN =
IDENFR add
LPARENT (
IDENFR op
COMMA ,
IDENFR op
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR xxx
LSS <
IDENFR yyy
RPARENT )
LBRACE {
IDENFR doit
LPARENT (
IDENFR x
COMMA ,
IDENFR y
COMMA ,
IDENFR j
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR zzz
GRE >
IDENFR xxx
RPARENT )
LBRACE {
IDENFR power
LPARENT (
IDENFR x
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 0
AND &&
IDENFR doit
LPARENT (
IDENFR xxx
COMMA ,
IDENFR yyy
COMMA ,
IDENFR zzz
RPARENT )
RPARENT )
LBRACE {
IDENFR donothing
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR op
GRE >
INTCON 0
AND &&
IDENFR doit
LPARENT (
IDENFR xxx
COMMA ,
IDENFR yyy
COMMA ,
IDENFR zzz
RPARENT )
RPARENT )
LBRACE {
IDENFR power
LPARENT (
IDENFR a
LBRACK [
INTCON 4
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 0
OR ||
IDENFR op
EQL ==
INTCON 1
RPARENT )
LBRACE {
IDENFR power
LPARENT (
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR op
GRE >
INTCON 2
OR ||
IDENFR zzz
LSS <
IDENFR xxx
RPARENT )
LBRACE {
IDENFR doit
LPARENT (
IDENFR x
COMMA ,
IDENFR y
COMMA ,
IDENFR j
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
