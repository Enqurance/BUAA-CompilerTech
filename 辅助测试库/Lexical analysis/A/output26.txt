CONSTTK const
INTTK int
IDENFR FIB_M
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 0
RBRACE }
RBRACE }
COMMA ,
IDENFR N
ASSIGN =
INTCON 9
SEMICN ;
CONSTTK const
INTTK int
IDENFR FIB_V
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
INTCON 5
COMMA ,
IDENFR b
ASSIGN =
INTCON 7
COMMA ,
IDENFR c
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR lis
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
VOIDTK void
IDENFR vector_mult
LPARENT (
INTTK int
IDENFR ans
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR v
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
IDENFR ans
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR FIB_M
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
MULT *
IDENFR v
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR FIB_M
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
MULT *
IDENFR v
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
IDENFR ans
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR FIB_M
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
MULT *
IDENFR v
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR FIB_M
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
MULT *
IDENFR v
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR matrix_mult
LPARENT (
INTTK int
IDENFR ans
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
INTTK int
IDENFR x
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR z
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
IDENFR FIB_M
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR FIB_M
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RBRACE }
SEMICN ;
IDENFR ans
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR x
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
MULT *
IDENFR FIB_M
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR x
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
MULT *
IDENFR FIB_M
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
SEMICN ;
IDENFR ans
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR x
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
MULT *
IDENFR FIB_M
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
PLUS +
IDENFR x
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
MULT *
IDENFR FIB_M
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
IDENFR ans
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR x
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
MULT *
IDENFR FIB_M
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR x
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
MULT *
IDENFR FIB_M
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
SEMICN ;
IDENFR ans
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR x
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
MULT *
IDENFR FIB_M
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
PLUS +
IDENFR x
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
MULT *
IDENFR FIB_M
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR cal_fib_matrix
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR a
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 1
RBRACE }
RBRACE }
COMMA ,
IDENFR b
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR N
RPARENT )
LBRACE {
INTTK int
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
IDENFR matrix_mult
LPARENT (
IDENFR b
COMMA ,
IDENFR a
RPARENT )
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
INTCON 4
RPARENT )
LBRACE {
IDENFR a
LBRACK [
IDENFR j
DIV /
INTCON 2
RBRACK ]
LBRACK [
IDENFR j
MOD %
INTCON 2
RBRACK ]
ASSIGN =
IDENFR b
LBRACK [
IDENFR j
DIV /
INTCON 2
RBRACK ]
LBRACK [
IDENFR j
MOD %
INTCON 2
RBRACK ]
SEMICN ;
IDENFR j
ASSIGN =
PLUS +
LPARENT (
IDENFR j
PLUS +
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "a is [[%d, %d], [%d, %d]]\n"
COMMA ,
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
MINU -
LPARENT (
MINU -
LPARENT (
IDENFR i
PLUS +
INTCON 1
RPARENT )
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
IDENFR i
SEMICN ;
RBRACE }
INTTK int
IDENFR sum
LPARENT (
INTTK int
IDENFR p
COMMA ,
INTTK int
IDENFR q
COMMA ,
INTTK int
IDENFR r
RPARENT )
LBRACE {
RETURNTK return
IDENFR p
PLUS +
IDENFR q
PLUS +
IDENFR r
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "20373743\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR x
SEMICN ;
IDENFR x
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "input: %d\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
INTTK int
IDENFR turns
ASSIGN =
IDENFR cal_fib_matrix
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "get matrix after %d multplFIB_M turns!\n"
COMMA ,
IDENFR turns
RPARENT )
SEMICN ;
INTTK int
IDENFR vec
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 13
COMMA ,
INTCON 8
RBRACE }
COMMA ,
IDENFR next_vec
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
IDENFR vector_mult
LPARENT (
IDENFR next_vec
COMMA ,
IDENFR vec
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "given original vector: [%d, %d]\n"
COMMA ,
IDENFR vec
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR vec
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "get next vector: [%d, %d]!\n"
COMMA ,
IDENFR next_vec
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR next_vec
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR a
NEQ !=
INTCON 0
AND &&
IDENFR b
NEQ !=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "a and b is true\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR c
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "c is true\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
INTCON 0
OR ||
IDENFR c
NEQ !=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "a || c is true\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "sum of a, b, c is %d\n"
COMMA ,
IDENFR sum
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "sum of lis front id %d\n"
COMMA ,
IDENFR sum
LPARENT (
IDENFR lis
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR lis
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR lis
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
