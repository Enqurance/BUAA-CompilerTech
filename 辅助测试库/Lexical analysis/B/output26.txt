INTTK int
IDENFR m1
LBRACK [
INTCON 5
RBRACK ]
COMMA ,
IDENFR f3
LBRACK [
INTCON 3
RBRACK ]
COMMA ,
IDENFR i2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 9
COMMA ,
INTCON 8
RBRACE }
COMMA ,
LBRACE {
INTCON 7
COMMA ,
INTCON 6
RBRACE }
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR s1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR c1
ASSIGN =
INTCON 3
SEMICN ;
CONSTTK const
INTTK int
IDENFR c2
ASSIGN =
INTCON 0
COMMA ,
IDENFR c3
ASSIGN =
INTCON 1
COMMA ,
IDENFR c4
ASSIGN =
INTCON 5
SEMICN ;
CONSTTK const
INTTK int
IDENFR s2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR a0
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR b0
ASSIGN =
INTCON 2
COMMA ,
IDENFR c0
ASSIGN =
INTCON 3
SEMICN ;
INTTK int
IDENFR q1
COMMA ,
IDENFR q2
COMMA ,
IDENFR q3
COMMA ,
IDENFR q4
SEMICN ;
INTTK int
IDENFR q55
ASSIGN =
INTCON 1
COMMA ,
IDENFR q65
ASSIGN =
INTCON 2
SEMICN ;
INTTK int
IDENFR q5
ASSIGN =
INTCON 1
COMMA ,
IDENFR q6
ASSIGN =
INTCON 2
COMMA ,
IDENFR q7
ASSIGN =
INTCON 4
COMMA ,
IDENFR q8
ASSIGN =
INTCON 5
SEMICN ;
INTTK int
IDENFR r1
COMMA ,
IDENFR r3
COMMA ,
IDENFR r4
COMMA ,
IDENFR r5
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR fun
LPARENT (
INTTK int
IDENFR x
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR y
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR tempp
SEMICN ;
IDENFR tempp
ASSIGN =
IDENFR x
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR y
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RETURNTK return
IDENFR tempp
SEMICN ;
RBRACE }
INTTK int
IDENFR fun2
LPARENT (
INTTK int
IDENFR c
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
VOIDTK void
IDENFR fun3
LPARENT (
INTTK int
IDENFR d
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR fun4
LPARENT (
INTTK int
IDENFR m
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR d
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR fun5
LPARENT (
INTTK int
IDENFR m
COMMA ,
INTTK int
IDENFR m11
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR m111
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR f
ASSIGN =
INTCON 4
SEMICN ;
INTTK int
IDENFR h1
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR f2
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
INTTK int
IDENFR m3
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
IDENFR i2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
INTCON 2
COMMA ,
IDENFR i2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RBRACE }
COMMA ,
LBRACE {
INTCON 2
COMMA ,
IDENFR i2
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
INTCON 5
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR t
SEMICN ;
INTTK int
IDENFR j1
COMMA ,
IDENFR j2
COMMA ,
IDENFR j3
COMMA ,
IDENFR j4
ASSIGN =
INTCON 5
SEMICN ;
INTTK int
IDENFR j7
COMMA ,
IDENFR j8
COMMA ,
IDENFR j9
COMMA ,
IDENFR j10
SEMICN ;
INTTK int
IDENFR j11
ASSIGN =
MINU -
INTCON 1
COMMA ,
IDENFR j12
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR t5
SEMICN ;
IDENFR t5
ASSIGN =
MINU -
INTCON 1
SEMICN ;
IDENFR t5
ASSIGN =
PLUS +
INTCON 1
SEMICN ;
IDENFR t5
ASSIGN =
IDENFR fun2
LPARENT (
IDENFR m3
RPARENT )
SEMICN ;
IDENFR fun3
LPARENT (
IDENFR m3
RPARENT )
SEMICN ;
IDENFR fun4
LPARENT (
IDENFR f2
COMMA ,
IDENFR m3
RPARENT )
SEMICN ;
IDENFR fun5
LPARENT (
IDENFR h1
COMMA ,
IDENFR f2
COMMA ,
IDENFR m3
RPARENT )
SEMICN ;
IDENFR t
ASSIGN =
IDENFR fun
LPARENT (
IDENFR i2
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR m3
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
INTTK int
IDENFR bian
ASSIGN =
INTCON 10
SEMICN ;
IDENFR t
ASSIGN =
IDENFR m3
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
PLUS +
IDENFR m3
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
PLUS +
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR bian
GRE >
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "20373869\n"
RPARENT )
SEMICN ;
IDENFR bian
ASSIGN =
IDENFR bian
MINU -
INTCON 1
SEMICN ;
RBRACE }
IDENFR bian
ASSIGN =
LPARENT (
IDENFR bian
PLUS +
INTCON 3
RPARENT )
MULT *
INTCON 2
SEMICN ;
IDENFR bian
ASSIGN =
IDENFR bian
PLUS +
IDENFR bian
MINU -
INTCON 1
SEMICN ;
IDENFR bian
ASSIGN =
INTCON 3
SEMICN ;
INTTK int
IDENFR v_4
ASSIGN =
INTCON 1
COMMA ,
IDENFR v_5
ASSIGN =
INTCON 3
COMMA ,
IDENFR v_3
ASSIGN =
INTCON 2
COMMA ,
IDENFR v_1
ASSIGN =
INTCON 1
COMMA ,
IDENFR v_6
ASSIGN =
INTCON 1
SEMICN ;
IDENFR v_4
ASSIGN =
LPARENT (
INTCON 1
PLUS +
INTCON 1
RPARENT )
MULT *
INTCON 1
SEMICN ;
IDENFR v_4
ASSIGN =
LPARENT (
IDENFR v_5
MINU -
INTCON 1
RPARENT )
DIV /
INTCON 1
SEMICN ;
IDENFR v_3
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MINU -
INTCON 1
SEMICN ;
IDENFR v_5
ASSIGN =
IDENFR v_4
PLUS +
IDENFR v_3
SEMICN ;
IDENFR v_4
ASSIGN =
LPARENT (
INTCON 1
PLUS +
INTCON 1
RPARENT )
MULT *
INTCON 1
MOD %
INTCON 1
SEMICN ;
IDENFR v_4
ASSIGN =
LPARENT (
INTCON 1
MINU -
INTCON 1
RPARENT )
MULT *
IDENFR v_3
MOD %
INTCON 1
SEMICN ;
IDENFR v_5
ASSIGN =
INTCON 1
DIV /
INTCON 1
SEMICN ;
IDENFR v_3
ASSIGN =
IDENFR v_4
MULT *
IDENFR v_6
DIV /
IDENFR v_5
MOD %
IDENFR v_1
SEMICN ;
IFTK if
LPARENT (
IDENFR bian
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR bian
GRE >
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR bian
LSS <
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR bian
LEQ <=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR bian
PLUS +
INTCON 1
GRE >
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR bian
MINU -
INTCON 1
GRE >
INTCON 0
RPARENT )
LBRACE {
RBRACE }
WHILETK while
LPARENT (
IDENFR bian
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR t
ASSIGN =
IDENFR t
PLUS +
INTCON 1
SEMICN ;
IDENFR bian
ASSIGN =
IDENFR bian
MINU -
INTCON 1
SEMICN ;
RBRACE }
IDENFR v_5
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR v_5
NEQ !=
INTCON 1
RPARENT )
LBRACE {
IDENFR v_5
ASSIGN =
INTCON 1
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
WHILETK while
LPARENT (
IDENFR v_5
RPARENT )
LBRACE {
IDENFR v_5
ASSIGN =
INTCON 0
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
WHILETK while
LPARENT (
NOT !
IDENFR v_5
RPARENT )
LBRACE {
IDENFR v_5
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
LBRACE {
RBRACE }
LBRACE {
INTTK int
IDENFR c
ASSIGN =
INTCON 1
SEMICN ;
IDENFR c
ASSIGN =
IDENFR c
MULT *
INTCON 1
PLUS +
INTCON 2
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
