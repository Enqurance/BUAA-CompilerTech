CONSTTK const
INTTK int
IDENFR n
ASSIGN =
INTCON 3
COMMA ,
IDENFR arr
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 3
MULT *
INTCON 3
COMMA ,
INTCON 3
PLUS +
INTCON 3
COMMA ,
INTCON 3
DIV /
INTCON 3
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR tb
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 7
COMMA ,
INTCON 5
COMMA ,
INTCON 8
RBRACE }
COMMA ,
LBRACE {
INTCON 6
COMMA ,
INTCON 4
COMMA ,
INTCON 4
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 2
COMMA ,
INTCON 1
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR tc
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 12
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
COMMA ,
INTCON 6
COMMA ,
INTCON 7
COMMA ,
INTCON 8
COMMA ,
INTCON 9
COMMA ,
INTCON 10
COMMA ,
INTCON 11
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR _getAndPrint
LPARENT (
INTTK int
IDENFR n
COMMA ,
INTTK int
IDENFR a
LBRACK [
RBRACK ]
LBRACK [
INTCON 12
RBRACK ]
COMMA ,
INTTK int
IDENFR k
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "\n%d"
COMMA ,
IDENFR tb
LBRACK [
IDENFR n
MOD %
INTCON 3
RBRACK ]
LBRACK [
LPARENT (
IDENFR n
MINU -
INTCON 1
RPARENT )
DIV /
INTCON 3
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "\n%dl%dl\n"
COMMA ,
IDENFR k
COMMA ,
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
IDENFR n
RBRACK ]
RPARENT )
SEMICN ;
RETURNTK return
IDENFR tb
LBRACK [
IDENFR n
MOD %
INTCON 3
RBRACK ]
LBRACK [
LPARENT (
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
IDENFR n
RBRACK ]
RPARENT )
DIV /
INTCON 3
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "20373081\n"
RPARENT )
SEMICN ;
IDENFR tc
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
PLUS +
INTCON 8
SEMICN ;
INTTK int
IDENFR c
ASSIGN =
INTCON 1
SEMICN ;
IDENFR c
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR c
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
MINU -
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
INTCON 1
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GEQ >=
INTCON 3
RPARENT )
BREAKTK break
SEMICN ;
SEMICN ;
IDENFR _getAndPrint
LPARENT (
IDENFR i
COMMA ,
IDENFR tc
COMMA ,
IDENFR i
MOD %
IDENFR n
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
