VOIDTK void
IDENFR funa
LPARENT (
RPARENT )
LBRACE {
RBRACE }
INTTK int
IDENFR funb
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR c
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR if_else_fun
LPARENT (
INTTK int
IDENFR x
RPARENT )
LBRACE {
INTTK int
IDENFR a
COMMA ,
IDENFR ret
ASSIGN =
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
IDENFR x
SEMICN ;
SEMICN ;
IDENFR a
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 1
RPARENT )
IDENFR ret
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 1
PLUS +
INTCON 1
RPARENT )
SEMICN ;
ELSETK else
LBRACE {
IDENFR ret
ASSIGN =
INTCON 4
SEMICN ;
RBRACE }
RETURNTK return
IDENFR ret
SEMICN ;
RBRACE }
INTTK int
IDENFR while_fun
LPARENT (
INTTK int
IDENFR x
RPARENT )
LBRACE {
INTTK int
IDENFR ret
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
IDENFR x
SEMICN ;
WHILETK while
LPARENT (
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IFTK if
LPARENT (
INTCON 1
RPARENT )
IDENFR a
ASSIGN =
IDENFR a
MINU -
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR a
MOD %
INTCON 2
NEQ !=
INTCON 1
RPARENT )
CONTINUETK continue
SEMICN ;
IFTK if
LPARENT (
IDENFR a
LEQ <=
IDENFR x
DIV /
INTCON 2
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "20373380\n"
RPARENT )
SEMICN ;
CONSTTK const
INTTK int
IDENFR cona
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR conb
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
IDENFR conc
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR conx
ASSIGN =
INTCON 1
COMMA ,
IDENFR cony
ASSIGN =
INTCON 2
COMMA ,
IDENFR conz
ASSIGN =
INTCON 3
SEMICN ;
INTTK int
IDENFR vara
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR varb
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
IDENFR varc
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR x
COMMA ,
IDENFR a
COMMA ,
IDENFR b
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
IDENFR c
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
IDENFR x
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR a
ASSIGN =
IDENFR cona
SEMICN ;
IDENFR b
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR conb
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
IDENFR c
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR conc
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
IDENFR funa
LPARENT (
RPARENT )
SEMICN ;
IDENFR funb
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
IDENFR func
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
INTTK int
IDENFR f
LBRACK [
INTCON 20
RBRACK ]
SEMICN ;
IDENFR f
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IDENFR f
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 1
PLUS +
INTCON 2
SEMICN ;
IDENFR f
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
INTCON 1
MINU -
INTCON 2
SEMICN ;
IDENFR f
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
INTCON 1
MULT *
INTCON 2
SEMICN ;
IDENFR f
LBRACK [
INTCON 4
RBRACK ]
ASSIGN =
INTCON 1
DIV /
INTCON 2
SEMICN ;
IDENFR f
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
INTCON 1
MOD %
INTCON 2
SEMICN ;
IDENFR f
LBRACK [
INTCON 6
RBRACK ]
ASSIGN =
PLUS +
INTCON 1
SEMICN ;
IDENFR f
LBRACK [
INTCON 7
RBRACK ]
ASSIGN =
MINU -
INTCON 1
SEMICN ;
IDENFR f
LBRACK [
INTCON 8
RBRACK ]
ASSIGN =
IDENFR a
SEMICN ;
IDENFR f
LBRACK [
INTCON 9
RBRACK ]
ASSIGN =
MINU -
IDENFR a
SEMICN ;
IDENFR f
LBRACK [
INTCON 10
RBRACK ]
ASSIGN =
INTCON 0
SEMICN ;
IFTK if
LPARENT (
INTCON 1
LSS <
INTCON 2
RPARENT )
IDENFR f
LBRACK [
INTCON 11
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
ELSETK else
IDENFR f
LBRACK [
INTCON 11
RBRACK ]
ASSIGN =
INTCON 0
SEMICN ;
IFTK if
LPARENT (
INTCON 1
GRE >
INTCON 2
RPARENT )
IDENFR f
LBRACK [
INTCON 12
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
ELSETK else
IDENFR f
LBRACK [
INTCON 12
RBRACK ]
ASSIGN =
INTCON 0
SEMICN ;
IFTK if
LPARENT (
INTCON 1
LEQ <=
INTCON 2
RPARENT )
IDENFR f
LBRACK [
INTCON 13
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
ELSETK else
IDENFR f
LBRACK [
INTCON 13
RBRACK ]
ASSIGN =
INTCON 0
SEMICN ;
IFTK if
LPARENT (
INTCON 1
GEQ >=
INTCON 2
RPARENT )
IDENFR f
LBRACK [
INTCON 14
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
ELSETK else
IDENFR f
LBRACK [
INTCON 14
RBRACK ]
ASSIGN =
INTCON 0
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "2\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "3\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "4\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "5\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "6\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "7\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "8\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "9\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "10\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
