CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR b
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR c
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR d
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
LPARENT (
INTCON 1
PLUS +
INTCON 1
RPARENT )
SEMICN ;
CONSTTK const
INTTK int
IDENFR e
ASSIGN =
INTCON 1
MINU -
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR f
ASSIGN =
INTCON 1
MINU -
INTCON 1
DIV /
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR g
ASSIGN =
INTCON 1
MINU -
INTCON 1
MOD %
IDENFR a
SEMICN ;
CONSTTK const
INTTK int
IDENFR h
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MINU -
IDENFR c
PLUS +
LPARENT (
IDENFR f
MINU -
IDENFR g
RPARENT )
SEMICN ;
CONSTTK const
INTTK int
IDENFR l
ASSIGN =
INTCON 489
MOD %
INTCON 562
MOD %
INTCON 13
MOD %
INTCON 910
MULT *
INTCON 895
MULT *
INTCON 284
PLUS +
INTCON 769
DIV /
INTCON 458
MULT *
INTCON 721
MOD %
INTCON 442
MULT *
INTCON 666
MOD %
INTCON 630
MINU -
INTCON 531
DIV /
INTCON 898
MINU -
INTCON 666
MOD %
INTCON 625
MULT *
INTCON 471
MOD %
INTCON 646
MULT *
INTCON 260
MOD %
INTCON 7
MINU -
INTCON 998
MOD %
INTCON 68
MULT *
INTCON 92
DIV /
INTCON 369
MOD %
INTCON 747
DIV /
INTCON 62
DIV /
INTCON 707
MULT *
INTCON 258
PLUS +
INTCON 34
MULT *
INTCON 236
MULT *
INTCON 708
PLUS +
INTCON 257
MINU -
INTCON 706
MOD %
INTCON 240
DIV /
INTCON 1000
DIV /
INTCON 73
MULT *
INTCON 163
MOD %
INTCON 328
PLUS +
INTCON 532
PLUS +
INTCON 309
MULT *
INTCON 272
PLUS +
INTCON 673
MOD %
INTCON 970
MULT *
INTCON 874
DIV /
INTCON 994
SEMICN ;
CONSTTK const
INTTK int
IDENFR o
ASSIGN =
INTCON 444
MOD %
INTCON 255
MOD %
INTCON 242
MOD %
INTCON 317
MOD %
INTCON 795
DIV /
INTCON 623
DIV /
INTCON 559
MULT *
INTCON 35
COMMA ,
IDENFR p
ASSIGN =
MINU -
PLUS +
MINU -
LPARENT (
INTCON 1
PLUS +
INTCON 1
MULT *
LPARENT (
INTCON 1
PLUS +
INTCON 1
RPARENT )
RPARENT )
SEMICN ;
CONSTTK const
INTTK int
IDENFR q
ASSIGN =
MINU -
PLUS +
MINU -
LPARENT (
INTCON 1
PLUS +
INTCON 1
MULT *
LPARENT (
INTCON 1
PLUS +
INTCON 1
RPARENT )
RPARENT )
MULT *
INTCON 655
PLUS +
IDENFR e
MULT *
IDENFR p
COMMA ,
IDENFR qq
ASSIGN =
MINU -
PLUS +
MINU -
LPARENT (
INTCON 1
PLUS +
INTCON 1
MULT *
LPARENT (
INTCON 1
PLUS +
INTCON 1
RPARENT )
RPARENT )
MULT *
INTCON 655
PLUS +
IDENFR e
MOD %
IDENFR p
COMMA ,
IDENFR qqq
ASSIGN =
MINU -
PLUS +
MINU -
LPARENT (
INTCON 1
PLUS +
INTCON 1
MULT *
LPARENT (
INTCON 1
PLUS +
INTCON 1
RPARENT )
RPARENT )
MULT *
INTCON 655
PLUS +
IDENFR e
DIV /
IDENFR p
SEMICN ;
CONSTTK const
INTTK int
IDENFR arr
LBRACK [
INTCON 1
PLUS +
INTCON 1
MULT *
LPARENT (
INTCON 1
PLUS +
INTCON 1
RPARENT )
RBRACK ]
ASSIGN =
LBRACE {
INTCON 444
MOD %
INTCON 255
MOD %
INTCON 242
MOD %
INTCON 317
MOD %
INTCON 795
DIV /
INTCON 623
DIV /
INTCON 559
MULT *
INTCON 35
COMMA ,
MINU -
INTCON 45
COMMA ,
INTCON 1
MINU -
INTCON 1
DIV /
INTCON 1
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR brr
LBRACK [
INTCON 1
PLUS +
INTCON 1
MULT *
LPARENT (
INTCON 1
PLUS +
INTCON 1
RPARENT )
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 1
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR awa
COMMA ,
IDENFR awd
ASSIGN =
INTCON 141
SEMICN ;
INTTK int
IDENFR crr
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 949
PLUS +
INTCON 229
MOD %
INTCON 375
MOD %
INTCON 393
PLUS +
INTCON 355
PLUS +
INTCON 948
MULT *
INTCON 181
MINU -
INTCON 867
MOD %
INTCON 366
MULT *
INTCON 71
MULT *
INTCON 660
MOD %
INTCON 20
DIV /
INTCON 737
DIV /
INTCON 293
MINU -
INTCON 5
DIV /
INTCON 479
PLUS +
INTCON 311
DIV /
INTCON 176
MOD %
INTCON 158
MULT *
INTCON 43
DIV /
INTCON 66
PLUS +
INTCON 682
MINU -
INTCON 788
MOD %
INTCON 887
MULT *
INTCON 715
COMMA ,
INTCON 1
PLUS +
INTCON 1
MULT *
LPARENT (
INTCON 1
PLUS +
INTCON 1
RPARENT )
PLUS +
INTCON 225
COMMA ,
MINU -
INTCON 22
RBRACE }
COMMA ,
LBRACE {
INTCON 16
COMMA ,
INTCON 4
COMMA ,
INTCON 11
MINU -
INTCON 1
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR drr
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 141
COMMA ,
INTCON 141
MINU -
INTCON 25
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR err
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 225
COMMA ,
INTCON 747
RBRACE }
SEMICN ;
VOIDTK void
IDENFR foo1
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RETURNTK return
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR foo2
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR mqsort
LPARENT (
INTTK int
IDENFR l
COMMA ,
INTTK int
IDENFR r
COMMA ,
INTTK int
IDENFR q
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR l
GEQ >=
IDENFR r
RPARENT )
RETURNTK return
SEMICN ;
INTTK int
IDENFR x
ASSIGN =
IDENFR q
LBRACK [
LPARENT (
IDENFR l
PLUS +
IDENFR r
RPARENT )
DIV /
INTCON 2
RBRACK ]
COMMA ,
IDENFR i
ASSIGN =
IDENFR l
MINU -
INTCON 1
COMMA ,
IDENFR j
ASSIGN =
IDENFR r
PLUS +
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR j
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR q
LBRACK [
IDENFR i
RBRACK ]
LSS <
IDENFR x
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR j
ASSIGN =
IDENFR j
MINU -
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR q
LBRACK [
IDENFR j
RBRACK ]
GRE >
IDENFR x
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
IDENFR j
MINU -
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
LSS <
IDENFR j
RPARENT )
LBRACE {
INTTK int
IDENFR t
ASSIGN =
IDENFR q
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IDENFR q
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR q
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR q
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR t
SEMICN ;
RBRACE }
RBRACE }
IDENFR mqsort
LPARENT (
IDENFR l
COMMA ,
IDENFR j
COMMA ,
IDENFR q
RPARENT )
SEMICN ;
IDENFR mqsort
LPARENT (
IDENFR j
PLUS +
INTCON 1
COMMA ,
IDENFR r
COMMA ,
IDENFR q
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR foo3
LPARENT (
INTTK int
IDENFR c
COMMA ,
INTTK int
IDENFR d
RPARENT )
LBRACE {
RETURNTK return
IDENFR c
PLUS +
IDENFR d
SEMICN ;
RBRACE }
VOIDTK void
IDENFR mqsort2
LPARENT (
INTTK int
IDENFR l
COMMA ,
INTTK int
IDENFR r
COMMA ,
INTTK int
IDENFR q
LBRACK [
RBRACK ]
LBRACK [
INTCON 20
RBRACK ]
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR l
GEQ >=
IDENFR r
RPARENT )
RETURNTK return
SEMICN ;
INTTK int
IDENFR x
ASSIGN =
IDENFR q
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
LPARENT (
IDENFR l
PLUS +
IDENFR r
RPARENT )
DIV /
INTCON 2
RBRACK ]
COMMA ,
IDENFR i
ASSIGN =
IDENFR l
MINU -
INTCON 1
COMMA ,
IDENFR j
ASSIGN =
IDENFR r
PLUS +
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR j
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR q
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
IDENFR i
RBRACK ]
LSS <
IDENFR x
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR j
ASSIGN =
IDENFR j
MINU -
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR q
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
GRE >
IDENFR x
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
IDENFR j
MINU -
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
LSS <
IDENFR j
RPARENT )
LBRACE {
INTTK int
IDENFR t
ASSIGN =
IDENFR q
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IDENFR q
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR q
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR q
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR t
SEMICN ;
RBRACE }
RBRACE }
IDENFR mqsort2
LPARENT (
IDENFR l
COMMA ,
IDENFR j
COMMA ,
IDENFR q
RPARENT )
SEMICN ;
IDENFR mqsort2
LPARENT (
IDENFR j
PLUS +
INTCON 1
COMMA ,
IDENFR r
COMMA ,
IDENFR q
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR awa
ASSIGN =
INTCON 10
SEMICN ;
SEMICN ;
INTTK int
IDENFR awadwad
SEMICN ;
IDENFR awadwad
ASSIGN =
INTCON 545
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "20231204\n"
RPARENT )
SEMICN ;
INTCON 243
DIV /
INTCON 440
MOD %
INTCON 570
MINU -
INTCON 559
DIV /
INTCON 373
MOD %
INTCON 960
DIV /
INTCON 460
MOD %
INTCON 101
MOD %
INTCON 205
MOD %
INTCON 16
DIV /
INTCON 487
MINU -
INTCON 107
DIV /
INTCON 234
DIV /
INTCON 435
PLUS +
IDENFR a
SEMICN ;
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "awadwad is %d now\n"
COMMA ,
IDENFR awadwad
RPARENT )
SEMICN ;
INTTK int
IDENFR awadwad
ASSIGN =
INTCON 11
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "awadwad has changed in block\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "awadwad is %d now\n"
COMMA ,
IDENFR awadwad
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR fowao
ASSIGN =
INTCON 14
SEMICN ;
IFTK if
LPARENT (
INTCON 208
MULT *
INTCON 695
MOD %
INTCON 426
DIV /
INTCON 896
LSS <
IDENFR fowao
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 208
MULT *
INTCON 695
MOD %
INTCON 426
DIV /
INTCON 896
GRE >
IDENFR fowao
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 208
MULT *
INTCON 695
MOD %
INTCON 426
DIV /
INTCON 896
EQL ==
IDENFR fowao
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR fowao
NEQ !=
IDENFR g
RPARENT )
LBRACE {
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR g
RPARENT )
LBRACE {
INTTK int
IDENFR k
ASSIGN =
IDENFR crr
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
RBRACE }
RBRACE }
IFTK if
LPARENT (
INTCON 247
MULT *
INTCON 821
MINU -
INTCON 45
MOD %
INTCON 268
MOD %
INTCON 445
MULT *
INTCON 262
MINU -
INTCON 938
MOD %
INTCON 66
MINU -
INTCON 140
MULT *
INTCON 975
MULT *
INTCON 882
DIV /
INTCON 758
MULT *
INTCON 199
DIV /
INTCON 282
MINU -
INTCON 175
MULT *
INTCON 80
DIV /
INTCON 646
PLUS +
INTCON 181
DIV /
INTCON 962
MOD %
INTCON 857
MOD %
INTCON 193
MULT *
INTCON 658
MULT *
INTCON 287
DIV /
INTCON 796
MOD %
INTCON 674
MULT *
INTCON 285
MOD %
INTCON 314
GEQ >=
IDENFR fowao
RPARENT )
IFTK if
LPARENT (
IDENFR fowao
EQL ==
IDENFR fowao
RPARENT )
IFTK if
LPARENT (
IDENFR fowao
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "double if\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR waidj
ASSIGN =
INTCON 11
SEMICN ;
WHILETK while
LPARENT (
IDENFR waidj
LEQ <=
INTCON 10000
RPARENT )
LBRACE {
IDENFR waidj
ASSIGN =
IDENFR waidj
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR waidj
GRE >
INTCON 100
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "cur val in loop is %d\n"
COMMA ,
IDENFR waidj
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
CONTINUETK continue
SEMICN ;
IFTK if
LPARENT (
IDENFR waidj
EQL ==
INTCON 101
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "input n and the array which length is n, then will sort this array, n is required less than 20\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR n
SEMICN ;
IDENFR n
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR q
LBRACK [
INTCON 20
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR qq
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 20
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
RBRACE }
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR n
RPARENT )
LBRACE {
IDENFR qq
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR q
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR n
RPARENT )
LBRACE {
IDENFR q
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR mqsort
LPARENT (
INTCON 0
COMMA ,
IDENFR n
MINU -
INTCON 1
COMMA ,
IDENFR q
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "after sort, the array is: "
RPARENT )
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR n
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d "
COMMA ,
IDENFR q
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "414"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "414"
RPARENT )
SEMICN ;
IDENFR mqsort2
LPARENT (
INTCON 0
COMMA ,
IDENFR n
MINU -
INTCON 1
COMMA ,
IDENFR qq
RPARENT )
SEMICN ;
IDENFR mqsort
LPARENT (
INTCON 0
COMMA ,
IDENFR n
MINU -
INTCON 1
COMMA ,
IDENFR qq
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
INTTK int
IDENFR waf
ASSIGN =
IDENFR foo3
LPARENT (
IDENFR n
COMMA ,
IDENFR err
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR crr
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR waf
SEMICN ;
IDENFR err
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR crr
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
IDENFR crr
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR err
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
