CONSTTK const
INTTK int
IDENFR MAT1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 10
RBRACE }
SEMICN ;
INTTK int
IDENFR MAT2
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
INTTK int
IDENFR MAT3
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
PLUS +
INTCON 1
COMMA ,
INTCON 4
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR DMAT1
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 2
COMMA ,
INTCON 3
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR DMAT2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
INTTK int
IDENFR DMAT3
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 4
COMMA ,
INTCON 3
RBRACE }
COMMA ,
LBRACE {
INTCON 9
COMMA ,
INTCON 9
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR getVal6
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 6
SEMICN ;
RBRACE }
INTTK int
IDENFR getValDouble
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR getAddVal
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
SEMICN ;
RBRACE }
INTTK int
IDENFR otherPrint
LPARENT (
INTTK int
IDENFR lis
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d %d\n"
COMMA ,
IDENFR lis
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR lis
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR MAT1
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR MAT2
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR MAT3
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR DotherPrint
LPARENT (
INTTK int
IDENFR lis
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR lis
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR lis
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR lis
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR lis
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR DMAT2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR DMAT2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR DMAT2
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR DMAT2
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
PLUS +
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "20376131\n"
RPARENT )
SEMICN ;
SEMICN ;
INTCON 1
PLUS +
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
NEQ !=
INTCON 2
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
LBRACE {
IDENFR i
ASSIGN =
IDENFR MAT1
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
LPARENT (
IDENFR i
PLUS +
INTCON 1
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
MINU -
IDENFR i
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "i: %d\n"
COMMA ,
IDENFR i
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR getVal6
LPARENT (
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
MULT *
PLUS +
MINU -
INTCON 4
DIV /
MINU -
INTCON 2
MOD %
INTCON 7
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR i
RPARENT )
LBRACE {
IDENFR i
PLUS +
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR DMAT2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 2
SEMICN ;
IDENFR DMAT2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR getValDouble
LPARENT (
IDENFR DMAT2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR DMAT2
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR DMAT2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
MULT *
MINU -
PLUS +
MINU -
INTCON 2
SEMICN ;
IDENFR DMAT2
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR getValDouble
LPARENT (
IDENFR getAddVal
LPARENT (
IDENFR DMAT2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR DMAT2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
PLUS +
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 5
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "i == 5 is True!\n"
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR j
ASSIGN =
INTCON 2
SEMICN ;
IDENFR i
ASSIGN =
IDENFR getValDouble
LPARENT (
IDENFR MAT1
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
IDENFR j
ASSIGN =
LPARENT (
MINU -
PLUS +
MINU -
IDENFR getValDouble
LPARENT (
IDENFR j
RPARENT )
RPARENT )
PLUS +
INTCON 2
MULT *
MINU -
INTCON 2
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "i: %d, j: %d\n"
COMMA ,
IDENFR i
COMMA ,
IDENFR j
RPARENT )
SEMICN ;
IDENFR MAT2
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IDENFR MAT2
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 3
SEMICN ;
IDENFR otherPrint
LPARENT (
IDENFR MAT3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "i: %d, j: %d\n"
COMMA ,
IDENFR DMAT1
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR DMAT1
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR DotherPrint
LPARENT (
IDENFR DMAT3
RPARENT )
SEMICN ;
IDENFR DMAT2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 520
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR DMAT2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
IDENFR DMAT2
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1314
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR DMAT2
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
