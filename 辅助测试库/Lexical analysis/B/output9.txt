CONSTTK const
INTTK int
IDENFR row2_0
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 2
COMMA ,
INTCON 4
COMMA ,
INTCON 7
RBRACE }
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR row2_1
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 8
COMMA ,
INTCON 7
COMMA ,
INTCON 6
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 26
RBRACE }
COMMA ,
LBRACE {
INTCON 12
COMMA ,
INTCON 2
COMMA ,
INTCON 6
RBRACE }
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR row2_2
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 28
COMMA ,
INTCON 37
COMMA ,
INTCON 26
RBRACE }
COMMA ,
LBRACE {
INTCON 8
COMMA ,
INTCON 7
COMMA ,
INTCON 6
RBRACE }
COMMA ,
LBRACE {
INTCON 8
COMMA ,
INTCON 7
COMMA ,
INTCON 6
RBRACE }
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR row2_3
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
LBRACE {
INTCON 4
COMMA ,
INTCON 5
COMMA ,
INTCON 6
RBRACE }
COMMA ,
LBRACE {
INTCON 7
COMMA ,
INTCON 8
COMMA ,
INTCON 9
RBRACE }
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR row_0
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 4
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR row_1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 4
COMMA ,
INTCON 2
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR row_2
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 9
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR row_3
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 3
COMMA ,
INTCON 5
COMMA ,
INTCON 7
RBRACE }
SEMICN ;
INTTK int
IDENFR va_row0
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
INTTK int
IDENFR va_row1
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
INTTK int
IDENFR va_row2
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
INTTK int
IDENFR va_row3
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 3
COMMA ,
INTCON 6
RBRACE }
SEMICN ;
INTTK int
IDENFR va_row2_0
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
INTTK int
IDENFR va_row2_1
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
INTTK int
IDENFR va_row2_2
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 8
COMMA ,
INTCON 7
COMMA ,
INTCON 6
RBRACE }
COMMA ,
LBRACE {
INTCON 8
COMMA ,
INTCON 7
COMMA ,
INTCON 6
RBRACE }
COMMA ,
LBRACE {
INTCON 8
COMMA ,
INTCON 7
COMMA ,
INTCON 6
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR va_row2_3
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
LBRACE {
INTCON 4
COMMA ,
INTCON 5
COMMA ,
INTCON 6
RBRACE }
COMMA ,
LBRACE {
INTCON 7
COMMA ,
INTCON 8
COMMA ,
INTCON 9
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR fun_1
LPARENT (
RPARENT )
LBRACE {
IDENFR va_row2
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR va_row3
LBRACK [
INTCON 2
RBRACK ]
MINU -
INTCON 3
SEMICN ;
IDENFR va_row1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
IDENFR row_2
LBRACK [
INTCON 1
RBRACK ]
MULT *
INTCON 3
SEMICN ;
IDENFR va_row2_0
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR row2_3
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
RETURNTK return
IDENFR va_row2_0
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
IDENFR fun_2
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
INTTK int
IDENFR x
SEMICN ;
IDENFR x
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
IDENFR a
PLUS +
IDENFR x
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "the output of fun_2 is s\n"
RPARENT )
SEMICN ;
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
INTTK int
IDENFR fun_3
LPARENT (
INTTK int
IDENFR x
COMMA ,
INTTK int
IDENFR arr
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR tmp
ASSIGN =
IDENFR x
PLUS +
IDENFR arr
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR arr
LBRACK [
INTCON 1
RBRACK ]
MINU -
IDENFR arr
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d"
COMMA ,
IDENFR tmp
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
RETURNTK return
IDENFR arr
LBRACK [
INTCON 0
RBRACK ]
MINU -
IDENFR arr
LBRACK [
INTCON 1
RBRACK ]
PLUS +
IDENFR arr
LBRACK [
INTCON 2
RBRACK ]
MULT *
INTCON 2
PLUS +
INTCON 5
MOD %
INTCON 2
MINU -
INTCON 4
DIV /
INTCON 3
SEMICN ;
RBRACE }
INTTK int
IDENFR fun_4
LPARENT (
INTTK int
IDENFR ar1
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR ar2
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
IDENFR va_row1
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR ar1
LBRACK [
INTCON 2
RBRACK ]
DIV /
INTCON 2
SEMICN ;
IDENFR va_row2_2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
IDENFR ar2
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d"
COMMA ,
IDENFR ar1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
RETURNTK return
IDENFR ar2
LBRACK [
INTCON 1
RBRACK ]
MULT *
IDENFR ar1
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
IDENFR fun_5
LPARENT (
INTTK int
IDENFR arr
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR arrtmp
ASSIGN =
IDENFR arr
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
INTTK int
IDENFR tmp
ASSIGN =
IDENFR fun_1
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
IDENFR tmp
MULT *
IDENFR arrtmp
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR va_row0
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR row_3
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
IDENFR va_row3
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
IDENFR row2_3
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
IDENFR va_row1
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 1143
SEMICN ;
IDENFR va_row2_0
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR row_3
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "20373142\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "this is the second text line.\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR t1
COMMA ,
IDENFR t2
COMMA ,
IDENFR t3
SEMICN ;
INTTK int
IDENFR arr
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
IDENFR t1
ASSIGN =
IDENFR fun_1
LPARENT (
RPARENT )
SEMICN ;
IDENFR t2
ASSIGN =
IDENFR t1
PLUS +
IDENFR fun_2
LPARENT (
IDENFR va_row3
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
SEMICN ;
IDENFR t3
ASSIGN =
IDENFR fun_2
LPARENT (
IDENFR va_row2_2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
SEMICN ;
IDENFR arr
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR fun_3
LPARENT (
INTCON 1
COMMA ,
IDENFR va_row2
RPARENT )
PLUS +
IDENFR fun_3
LPARENT (
IDENFR va_row2_3
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
IDENFR va_row2_2
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
SEMICN ;
IDENFR arr
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR fun_4
LPARENT (
IDENFR va_row2
COMMA ,
IDENFR va_row2_2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR arr
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
IDENFR fun_4
LPARENT (
IDENFR va_row2_0
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR va_row2_3
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
SEMICN ;
IDENFR arr
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
IDENFR fun_5
LPARENT (
IDENFR va_row2_1
RPARENT )
SEMICN ;
INTTK int
IDENFR sum
ASSIGN =
IDENFR t1
PLUS +
IDENFR t2
PLUS +
IDENFR t3
PLUS +
IDENFR arr
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR arr
LBRACK [
INTCON 1
RBRACK ]
PLUS +
IDENFR arr
LBRACK [
INTCON 2
RBRACK ]
PLUS +
IDENFR arr
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
IDENFR sum
ASSIGN =
PLUS +
MINU -
PLUS +
IDENFR sum
SEMICN ;
IFTK if
LPARENT (
IDENFR sum
NEQ !=
INTCON 5
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d"
COMMA ,
IDENFR sum
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
