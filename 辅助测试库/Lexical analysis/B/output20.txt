CONSTTK const
INTTK int
IDENFR SingleDecl
ASSIGN =
INTCON 0
SEMICN ;
CONSTTK const
INTTK int
IDENFR DoubleDecl1
ASSIGN =
INTCON 0
COMMA ,
IDENFR DoubleDecl2
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR TripleDecl1
ASSIGN =
INTCON 2
COMMA ,
IDENFR TripleDecl2
ASSIGN =
INTCON 3
COMMA ,
IDENFR TripleDecl3
ASSIGN =
INTCON 4
SEMICN ;
CONSTTK const
INTTK int
IDENFR OneDConstArr
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR TwoDConstArr
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR SingleVal
SEMICN ;
INTTK int
IDENFR SingleValWithInitVal
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR DoubleVal1
COMMA ,
IDENFR DoubleVal2
SEMICN ;
INTTK int
IDENFR TripleVal1
COMMA ,
IDENFR TripleVal2
COMMA ,
IDENFR TripleVal3
SEMICN ;
INTTK int
IDENFR OneDArr
LBRACK [
INTCON 10
RBRACK ]
SEMICN ;
INTTK int
IDENFR OneDArrWithInitVal
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
INTTK int
IDENFR TwoDArr
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
INTTK int
IDENFR TwoDArrWithInitVal
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR function0Param
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR function1Param
LPARENT (
INTTK int
IDENFR p1
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR function2Param
LPARENT (
INTTK int
IDENFR p1
COMMA ,
INTTK int
IDENFR p2
RPARENT )
LBRACE {
RETURNTK return
INTCON 2
SEMICN ;
RBRACE }
INTTK int
IDENFR function3Param
LPARENT (
INTTK int
IDENFR p1
COMMA ,
INTTK int
IDENFR p2
COMMA ,
INTTK int
IDENFR p3
RPARENT )
LBRACE {
RETURNTK return
INTCON 3
SEMICN ;
RBRACE }
INTTK int
IDENFR function1dArrParam
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR function2dArrParam
LPARENT (
INTTK int
IDENFR a2
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR functionNoRetStmt
LPARENT (
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR functionNoRetVal
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR local
SEMICN ;
INTTK int
IDENFR localWithInitVal
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR localDouble1
COMMA ,
IDENFR localDouble2
SEMICN ;
INTTK int
IDENFR localTriple1
COMMA ,
IDENFR localTriple2
COMMA ,
IDENFR localTriple3
SEMICN ;
INTTK int
IDENFR localArr
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
INTTK int
IDENFR localArrWithInitVal
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
INTTK int
IDENFR local2dArr
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
INTTK int
IDENFR local2dArrWithInitVal
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
RBRACE }
SEMICN ;
IDENFR local
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR local
ASSIGN =
INTCON 1
SEMICN ;
IDENFR local
ASSIGN =
IDENFR SingleDecl
SEMICN ;
IDENFR local
ASSIGN =
IDENFR OneDConstArr
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR local
ASSIGN =
IDENFR TwoDConstArr
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR local
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR local
ASSIGN =
INTCON 1
MINU -
INTCON 1
SEMICN ;
IDENFR local
ASSIGN =
INTCON 1
MULT *
INTCON 1
SEMICN ;
IDENFR local
ASSIGN =
INTCON 1
DIV /
INTCON 1
SEMICN ;
IDENFR local
ASSIGN =
INTCON 1
MOD %
INTCON 1
SEMICN ;
IDENFR local
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
LPARENT (
INTCON 1
DIV /
INTCON 1
RPARENT )
SEMICN ;
IDENFR local
ASSIGN =
PLUS +
INTCON 1
SEMICN ;
IDENFR local
ASSIGN =
MINU -
INTCON 1
SEMICN ;
IDENFR localArr
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IDENFR local2dArr
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IDENFR local
ASSIGN =
IDENFR function0Param
LPARENT (
RPARENT )
SEMICN ;
IDENFR local
ASSIGN =
IDENFR function1Param
LPARENT (
IDENFR local
RPARENT )
SEMICN ;
IDENFR local
ASSIGN =
IDENFR function2Param
LPARENT (
IDENFR local
COMMA ,
IDENFR local
RPARENT )
SEMICN ;
IDENFR local
ASSIGN =
IDENFR function3Param
LPARENT (
IDENFR local
COMMA ,
IDENFR local
COMMA ,
IDENFR local
RPARENT )
SEMICN ;
IDENFR local
ASSIGN =
IDENFR function1Param
LPARENT (
IDENFR localArr
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR local
ASSIGN =
IDENFR function1dArrParam
LPARENT (
IDENFR localArr
RPARENT )
SEMICN ;
IDENFR local
ASSIGN =
IDENFR function2dArrParam
LPARENT (
IDENFR local2dArr
RPARENT )
SEMICN ;
IDENFR functionNoRetStmt
LPARENT (
RPARENT )
SEMICN ;
SEMICN ;
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR local
EQL ==
INTCON 0
RPARENT )
LBRACE {
IDENFR local
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR local
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR local
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR local
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
WHILETK while
LPARENT (
IDENFR local
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR local
ASSIGN =
IDENFR local
MINU -
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR local
LSS <
INTCON 0
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
CONTINUETK continue
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "20373866\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "output with formatted String: local=%d"
COMMA ,
IDENFR local
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
