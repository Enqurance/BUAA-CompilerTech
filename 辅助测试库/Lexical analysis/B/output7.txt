INTTK int
IDENFR x0
SEMICN ;
INTTK int
IDENFR x1
COMMA ,
IDENFR x2
COMMA ,
IDENFR x3
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR y
ASSIGN =
INTCON 1
COMMA ,
IDENFR z
ASSIGN =
INTCON 2
COMMA ,
IDENFR q
ASSIGN =
INTCON 3
SEMICN ;
INTTK int
IDENFR w
ASSIGN =
INTCON 1
PLUS +
INTCON 3
SEMICN ;
CONSTTK const
INTTK int
IDENFR m
ASSIGN =
INTCON 13
SEMICN ;
CONSTTK const
INTTK int
IDENFR arra
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR arrb
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
RBRACE }
SEMICN ;
VOIDTK void
IDENFR fun1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR t0
ASSIGN =
INTCON 1
COMMA ,
IDENFR t1
ASSIGN =
INTCON 2
SEMICN ;
INTTK int
IDENFR t2
SEMICN ;
IDENFR t2
ASSIGN =
IDENFR t1
MINU -
IDENFR t0
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR fun2
LPARENT (
INTTK int
IDENFR a0
COMMA ,
INTTK int
IDENFR a1
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR a2
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR t
SEMICN ;
IDENFR t
ASSIGN =
IDENFR a0
PLUS +
IDENFR a0
SEMICN ;
RETURNTK return
INTCON 1
PLUS +
INTCON 2
SEMICN ;
RBRACE }
VOIDTK void
IDENFR fun3
LPARENT (
INTTK int
IDENFR a1
RPARENT )
LBRACE {
INTTK int
IDENFR t
SEMICN ;
IDENFR t
ASSIGN =
IDENFR a1
PLUS +
IDENFR a1
SEMICN ;
RBRACE }
INTTK int
IDENFR fun4
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
VOIDTK void
IDENFR fun5
LPARENT (
INTTK int
IDENFR a0
COMMA ,
INTTK int
IDENFR a1
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR t
ASSIGN =
INTCON 0
SEMICN ;
IDENFR t
ASSIGN =
IDENFR a0
PLUS +
IDENFR a0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR a0
ASSIGN =
INTCON 0
SEMICN ;
CONSTTK const
INTTK int
IDENFR a1
ASSIGN =
INTCON 1
COMMA ,
IDENFR a2
ASSIGN =
INTCON 12
COMMA ,
IDENFR a3
ASSIGN =
INTCON 3
SEMICN ;
CONSTTK const
INTTK int
IDENFR b1
ASSIGN =
INTCON 1
COMMA ,
IDENFR b2
ASSIGN =
INTCON 2
SEMICN ;
INTTK int
IDENFR a
SEMICN ;
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR b
ASSIGN =
INTCON 1
COMMA ,
IDENFR c
ASSIGN =
INTCON 2
SEMICN ;
INTTK int
IDENFR d
ASSIGN =
IDENFR b
PLUS +
IDENFR c
SEMICN ;
INTTK int
IDENFR e
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR f_
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR _t
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR g
ASSIGN =
PLUS +
MINU -
PLUS +
IDENFR c
SEMICN ;
IDENFR g
ASSIGN =
MINU -
PLUS +
MINU -
IDENFR c
SEMICN ;
INTTK int
IDENFR arr1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
IDENFR a
COMMA ,
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
INTTK int
IDENFR arr2
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
COMMA ,
LBRACE {
INTCON 6
COMMA ,
INTCON 7
COMMA ,
INTCON 8
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR arr3
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
INTTK int
IDENFR arr4
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
INTTK int
IDENFR arr5
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR arr6
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
IDENFR arr5
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR arr5
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RBRACE }
COMMA ,
LBRACE {
IDENFR arr5
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR arr5
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RBRACE }
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR arr7
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR arr8
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
RBRACE }
SEMICN ;
IDENFR arr2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 9
SEMICN ;
IDENFR arr1
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 3
SEMICN ;
IDENFR e
ASSIGN =
IDENFR arr1
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
IDENFR e
ASSIGN =
IDENFR arr2
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
IDENFR e
ASSIGN =
PLUS +
IDENFR b
SEMICN ;
IDENFR e
ASSIGN =
IDENFR a
MULT *
IDENFR b
SEMICN ;
IDENFR e
ASSIGN =
LPARENT (
IDENFR a
PLUS +
IDENFR b
RPARENT )
SEMICN ;
IDENFR e
ASSIGN =
IDENFR a
MULT *
IDENFR b
PLUS +
IDENFR b
SEMICN ;
IDENFR e
ASSIGN =
IDENFR a
MULT *
LPARENT (
IDENFR b
PLUS +
IDENFR b
RPARENT )
SEMICN ;
IDENFR e
ASSIGN =
IDENFR a
MULT *
LPARENT (
IDENFR b
MINU -
INTCON 1
RPARENT )
SEMICN ;
IDENFR e
ASSIGN =
IDENFR c
DIV /
IDENFR b
SEMICN ;
IDENFR e
ASSIGN =
IDENFR fun4
LPARENT (
RPARENT )
SEMICN ;
IDENFR e
ASSIGN =
IDENFR c
MOD %
IDENFR b
SEMICN ;
INTTK int
IDENFR a4
SEMICN ;
INTTK int
IDENFR a5
COMMA ,
IDENFR a6
COMMA ,
IDENFR a7
SEMICN ;
IFTK if
LPARENT (
IDENFR b
NEQ !=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
IDENFR b
MINU -
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR b
EQL ==
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
IDENFR b
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR fun1
LPARENT (
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
IDENFR fun2
LPARENT (
IDENFR a
COMMA ,
IDENFR arr1
COMMA ,
IDENFR arr2
RPARENT )
SEMICN ;
IDENFR e
ASSIGN =
IDENFR fun2
LPARENT (
IDENFR a
COMMA ,
IDENFR arr2
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR arr2
RPARENT )
SEMICN ;
IDENFR fun3
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
IDENFR fun5
LPARENT (
IDENFR a
COMMA ,
IDENFR arr1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 0
SEMICN ;
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR a
ASSIGN =
IDENFR a
MINU -
INTCON 0
SEMICN ;
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 1
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 3
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 7
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
LEQ <=
INTCON 10
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
IFTK if
LPARENT (
IDENFR a
GRE >
INTCON 7
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
IDENFR a
MINU -
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
LSS <
INTCON 7
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 7
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 8
RPARENT )
IDENFR a
ASSIGN =
IDENFR a
MINU -
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR a
LEQ <=
INTCON 10
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 2
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR b
ASSIGN =
IDENFR b
PLUS +
INTCON 1
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "20231231\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR d
MINU -
INTCON 1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR a
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR e
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR f_
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR _t
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "9\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "10"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
