INTTK int
IDENFR g1
COMMA ,
IDENFR g2
COMMA ,
IDENFR g3
SEMICN ;
INTTK int
IDENFR e1
ASSIGN =
INTCON 1
COMMA ,
IDENFR f1
ASSIGN =
INTCON 1
COMMA ,
IDENFR f2
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR i1
ASSIGN =
INTCON 2
COMMA ,
IDENFR i2
SEMICN ;
INTTK int
IDENFR a9
LBRACK [
INTCON 10
RBRACK ]
SEMICN ;
INTTK int
IDENFR a12
LBRACK [
INTCON 10
RBRACK ]
LBRACK [
INTCON 10
RBRACK ]
SEMICN ;
INTTK int
IDENFR h1
LBRACK [
INTCON 10
RBRACK ]
COMMA ,
IDENFR h2
LBRACK [
INTCON 10
RBRACK ]
LBRACK [
INTCON 10
RBRACK ]
COMMA ,
IDENFR h3
SEMICN ;
CONSTTK const
INTTK int
IDENFR c
ASSIGN =
INTCON 10
COMMA ,
IDENFR f3
ASSIGN =
INTCON 5
SEMICN ;
CONSTTK const
INTTK int
IDENFR c1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
VOIDTK void
IDENFR add_machine
LPARENT (
INTTK int
IDENFR e1
COMMA ,
INTTK int
IDENFR f1
COMMA ,
INTTK int
IDENFR f2
RPARENT )
LBRACE {
INTTK int
IDENFR g1
COMMA ,
IDENFR g2
COMMA ,
IDENFR g3
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR arr_check_2
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
LBRACK [
INTCON 4
RBRACK ]
COMMA ,
INTTK int
IDENFR e1
COMMA ,
INTTK int
IDENFR f1
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
VOIDTK void
IDENFR arr_check_1
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR b
ASSIGN =
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a1
SEMICN ;
INTTK int
IDENFR arr_check_2
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR a2
ASSIGN =
INTCON 2
SEMICN ;
INTTK int
IDENFR g1
ASSIGN =
INTCON 0
COMMA ,
IDENFR g2
ASSIGN =
INTCON 0
COMMA ,
IDENFR g3
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR a3
ASSIGN =
INTCON 1
COMMA ,
IDENFR a4
ASSIGN =
INTCON 2
COMMA ,
IDENFR a5
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR e1
ASSIGN =
INTCON 2
COMMA ,
IDENFR f1
ASSIGN =
INTCON 2
COMMA ,
IDENFR f2
ASSIGN =
INTCON 2
SEMICN ;
INTTK int
IDENFR h1
ASSIGN =
INTCON 3
COMMA ,
IDENFR h2
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
IDENFR h3
SEMICN ;
CONSTTK const
INTTK int
IDENFR b1
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR a6
ASSIGN =
INTCON 1
COMMA ,
IDENFR a7
ASSIGN =
INTCON 2
COMMA ,
IDENFR a8
ASSIGN =
INTCON 3
SEMICN ;
INTTK int
IDENFR c
ASSIGN =
INTCON 20
SEMICN ;
INTTK int
IDENFR a10
LBRACK [
INTCON 10
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 1
COMMA ,
INTCON 1
COMMA ,
INTCON 1
COMMA ,
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 2
COMMA ,
INTCON 2
COMMA ,
INTCON 2
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
INTTK int
IDENFR a13
LBRACK [
INTCON 4
RBRACK ]
LBRACK [
INTCON 4
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
RBRACE }
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR a15
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR a14
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 2
COMMA ,
INTCON 3
RBRACE }
RBRACE }
SEMICN ;
IDENFR add_machine
LPARENT (
IDENFR e1
PLUS +
IDENFR arr_check_2
COMMA ,
IDENFR f1
COMMA ,
IDENFR f2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "20373608\n"
RPARENT )
SEMICN ;
IDENFR arr_check_1
LPARENT (
IDENFR a13
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR arr_check_1
LPARENT (
IDENFR a10
RPARENT )
SEMICN ;
IDENFR a1
ASSIGN =
INTCON 4
PLUS +
IDENFR c
PLUS +
IDENFR e1
SEMICN ;
IDENFR a9
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IDENFR a9
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 2
SEMICN ;
IDENFR a12
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 2
SEMICN ;
IDENFR a2
ASSIGN =
INTCON 0
SEMICN ;
IDENFR a3
ASSIGN =
INTCON 0
SEMICN ;
IDENFR g1
ASSIGN =
IDENFR g1
PLUS +
INTCON 4
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "this is outside g1 %d\n"
COMMA ,
IDENFR g1
RPARENT )
SEMICN ;
IDENFR a13
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR a13
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
PLUS +
IDENFR g1
SEMICN ;
LBRACE {
INTTK int
IDENFR g1
ASSIGN =
INTCON 2
COMMA ,
IDENFR g2
COMMA ,
IDENFR g3
SEMICN ;
INTTK int
IDENFR h1
COMMA ,
IDENFR h2
COMMA ,
IDENFR h3
SEMICN ;
IDENFR g1
ASSIGN =
IDENFR g1
PLUS +
INTCON 1
SEMICN ;
IDENFR a9
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR g1
PLUS +
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "this is inside g1 %d\n"
COMMA ,
IDENFR g1
RPARENT )
SEMICN ;
RBRACE }
IDENFR g1
ASSIGN =
IDENFR g1
PLUS +
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "this is outside g1 %d agsin\n"
COMMA ,
IDENFR g1
RPARENT )
SEMICN ;
WHILETK while
LPARENT (
IDENFR a2
LEQ <=
INTCON 9
RPARENT )
LBRACE {
IDENFR a3
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR a3
LEQ <=
INTCON 9
RPARENT )
LBRACE {
IDENFR a12
LBRACK [
IDENFR a2
RBRACK ]
LBRACK [
IDENFR a3
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IDENFR a3
ASSIGN =
IDENFR a3
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR a2
ASSIGN =
IDENFR a2
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a2
GRE >
INTCON 1
RPARENT )
LBRACE {
IDENFR a2
ASSIGN =
IDENFR a2
MINU -
INTCON 1
SEMICN ;
IDENFR a2
ASSIGN =
PLUS +
INTCON 1
SEMICN ;
IDENFR a2
ASSIGN =
MINU -
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR a2
ASSIGN =
IDENFR a2
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a2
GRE >
INTCON 1
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a2
GRE >
INTCON 1
RPARENT )
LBRACE {
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "a9[0] is %d\n"
COMMA ,
IDENFR a9
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "a13[0][1] is %d\n"
COMMA ,
IDENFR a13
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "a13[0][2] is %d\n"
COMMA ,
IDENFR a13
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "a12[9][9] is %d"
COMMA ,
IDENFR a12
LBRACK [
INTCON 9
RBRACK ]
LBRACK [
INTCON 9
RBRACK ]
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
