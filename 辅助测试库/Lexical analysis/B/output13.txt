VOIDTK void
IDENFR read
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
COMMA ,
INTTK int
IDENFR n
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
COMMA ,
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR n
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
INTCON 3
RPARENT )
LBRACE {
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
INTTK int
IDENFR c
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 1000
MINU -
INTCON 997
PLUS +
INTCON 123
DIV /
INTCON 145
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
LBRACE {
INTCON 6
MINU -
INTCON 3
MULT *
INTCON 5
MOD %
INTCON 7
MINU -
INTCON 3
DIV /
INTCON 2
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
RBRACE }
SEMICN ;
IDENFR c
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 100
MINU -
INTCON 99
RBRACK ]
ASSIGN =
IDENFR c
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
PLUS +
INTCON 3
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "20373318\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 5
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "a[%d] = %d, "
COMMA ,
IDENFR i
COMMA ,
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR j
ASSIGN =
IDENFR i
PLUS +
INTCON 100
COMMA ,
IDENFR flag
ASSIGN =
INTCON 0
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR j
ASSIGN =
INTCON 123456789
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 2
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
INTCON 3
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "c[%d][%d] = %d, "
COMMA ,
IDENFR i
COMMA ,
IDENFR j
COMMA ,
IDENFR c
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
RPARENT )
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR a1
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
IDENFR read
LPARENT (
IDENFR a1
COMMA ,
INTCON 3
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR sum1
ASSIGN =
INTCON 0
COMMA ,
IDENFR sum2
ASSIGN =
INTCON 0
SEMICN ;
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 3
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
INTCON 3
RPARENT )
LBRACE {
INTTK int
IDENFR sum2
ASSIGN =
INTCON 0
SEMICN ;
IDENFR sum1
ASSIGN =
IDENFR sum1
PLUS +
IDENFR a1
LBRACK [
IDENFR j
PLUS +
IDENFR i
MINU -
IDENFR j
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR sum2
ASSIGN =
IDENFR sum1
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "sum1 = %d, sum2 = %d\n"
COMMA ,
IDENFR sum1
COMMA ,
IDENFR sum2
RPARENT )
SEMICN ;
INTTK int
IDENFR asd
LBRACK [
INTCON 6
RBRACK ]
SEMICN ;
IDENFR asd
LBRACK [
INTCON 4
RBRACK ]
ASSIGN =
IDENFR a1
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
PLUS +
IDENFR c
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "asd[4] = %d\n"
COMMA ,
IDENFR asd
LBRACK [
INTCON 4
RBRACK ]
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
