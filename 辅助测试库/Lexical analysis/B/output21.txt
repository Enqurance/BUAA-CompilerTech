CONSTTK const
INTTK int
IDENFR a1
ASSIGN =
PLUS +
MINU -
PLUS +
MINU -
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR a2
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 3
RBRACE }
COMMA ,
IDENFR a3
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 1
COMMA ,
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 2
COMMA ,
INTCON 2
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 3
COMMA ,
INTCON 3
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR _b1
SEMICN ;
INTTK int
IDENFR b2
ASSIGN =
INTCON 10
MINU -
INTCON 0
COMMA ,
IDENFR b3
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
IDENFR b4
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 1
COMMA ,
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 2
COMMA ,
INTCON 2
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 3
COMMA ,
INTCON 3
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR c2
COMMA ,
IDENFR c3
LBRACK [
INTCON 3
RBRACK ]
COMMA ,
IDENFR c4
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
VOIDTK void
IDENFR add
LPARENT (
RPARENT )
LBRACE {
IDENFR _b1
ASSIGN =
IDENFR _b1
PLUS +
IDENFR a1
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR del
LPARENT (
INTTK int
IDENFR x
RPARENT )
LBRACE {
IDENFR b2
ASSIGN =
IDENFR b2
MINU -
IDENFR x
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR cal
LPARENT (
INTTK int
IDENFR x
COMMA ,
INTTK int
IDENFR y
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR ans
ASSIGN =
INTCON 0
SEMICN ;
INTCON 1
MULT *
INTCON 1
DIV /
INTCON 1
SEMICN ;
SEMICN ;
WHILETK while
LPARENT (
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR x
LEQ <=
IDENFR i
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
GEQ >=
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IDENFR ans
ASSIGN =
IDENFR ans
MINU -
IDENFR i
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR ans
SEMICN ;
RBRACE }
VOIDTK void
IDENFR useless
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR fun
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "20373486"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
IDENFR c2
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR c2
GRE >
IDENFR b2
RPARENT )
LBRACE {
IDENFR b2
ASSIGN =
IDENFR c2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR c2
GRE >
IDENFR b3
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
LBRACE {
IDENFR b3
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR c2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR c2
LSS <
IDENFR b4
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
LBRACE {
IDENFR b4
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR c2
SEMICN ;
RBRACE }
IDENFR _b1
ASSIGN =
LPARENT (
MINU -
INTCON 1
PLUS +
IDENFR b2
RPARENT )
MULT *
IDENFR cal
LPARENT (
IDENFR b3
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR b4
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
PLUS +
IDENFR fun
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "_b1 is %d\n"
COMMA ,
IDENFR _b1
RPARENT )
SEMICN ;
IDENFR useless
LPARENT (
IDENFR b3
COMMA ,
IDENFR b4
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 6
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR add
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "_b1 is %d\n"
COMMA ,
IDENFR _b1
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
MINU -
INTCON 1
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "b3[0] is %d, b4[0][0] is %d"
COMMA ,
IDENFR b3
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR b4
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "\ng"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "o"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "o"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "d"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "!!!"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
