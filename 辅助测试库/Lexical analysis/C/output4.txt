CONSTTK const
INTTK int
IDENFR a1
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR b1
ASSIGN =
INTCON 2
COMMA ,
IDENFR c1
ASSIGN =
INTCON 3
SEMICN ;
INTTK int
IDENFR d1
ASSIGN =
INTCON 4
SEMICN ;
INTTK int
IDENFR e1
ASSIGN =
INTCON 0
COMMA ,
IDENFR f1
ASSIGN =
INTCON 60
SEMICN ;
INTTK int
IDENFR test
ASSIGN =
INTCON 777
SEMICN ;
INTTK int
IDENFR op1
LPARENT (
INTTK int
IDENFR b2
RPARENT )
LBRACE {
RETURNTK return
IDENFR a1
PLUS +
IDENFR b2
SEMICN ;
RBRACE }
INTTK int
IDENFR op2
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
VOIDTK void
IDENFR op3
LPARENT (
RPARENT )
LBRACE {
IDENFR test
ASSIGN =
INTCON 666
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR op4
LPARENT (
INTTK int
IDENFR a3
COMMA ,
INTTK int
IDENFR b3
RPARENT )
LBRACE {
RETURNTK return
IDENFR a3
PLUS +
IDENFR b3
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 2
COMMA ,
IDENFR b
ASSIGN =
INTCON 3
SEMICN ;
INTTK int
IDENFR c
SEMICN ;
INTTK int
IDENFR d
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
INTTK int
IDENFR e
ASSIGN =
INTCON 2
MULT *
INTCON 3
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "20231055\n"
RPARENT )
SEMICN ;
IDENFR d
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GRE >
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "a>1\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR d
NEQ !=
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "d!=1\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "error\n"
RPARENT )
SEMICN ;
RBRACE }
WHILETK while
LPARENT (
IDENFR e
GRE >
INTCON 0
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR e
EQL ==
INTCON 4
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR e
NEQ !=
INTCON 6
RPARENT )
LBRACE {
IDENFR e
ASSIGN =
IDENFR e
MINU -
INTCON 1
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR e
RPARENT )
SEMICN ;
IDENFR e
ASSIGN =
IDENFR e
MINU -
INTCON 1
SEMICN ;
RBRACE }
IDENFR c
ASSIGN =
IDENFR op4
LPARENT (
IDENFR a
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
IDENFR op1
LPARENT (
IDENFR e
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
IDENFR op3
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR test
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
IDENFR op2
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
INTCON 6
PLUS +
INTCON 5
MULT *
INTCON 2
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
INTCON 5
MINU -
INTCON 8
DIV /
INTCON 2
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
