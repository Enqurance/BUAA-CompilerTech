CONSTTK const
INTTK int
IDENFR n
ASSIGN =
INTCON 15
SEMICN ;
CONSTTK const
INTTK int
IDENFR a1
ASSIGN =
INTCON 1
COMMA ,
IDENFR a2
ASSIGN =
INTCON 2
SEMICN ;
CONSTTK const
INTTK int
IDENFR d1
ASSIGN =
INTCON 10
COMMA ,
IDENFR d2
ASSIGN =
INTCON 100
COMMA ,
IDENFR d3
ASSIGN =
INTCON 1000
SEMICN ;
INTTK int
IDENFR m
SEMICN ;
INTTK int
IDENFR b1
ASSIGN =
INTCON 123
COMMA ,
IDENFR b2
SEMICN ;
INTTK int
IDENFR c1
COMMA ,
IDENFR c2
COMMA ,
IDENFR c3
SEMICN ;
INTTK int
IDENFR getval
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR foo
LPARENT (
INTTK int
IDENFR n
RPARENT )
LBRACE {
RETURNTK return
IDENFR n
SEMICN ;
RBRACE }
INTTK int
IDENFR add
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
SEMICN ;
RBRACE }
INTTK int
IDENFR sum
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
PLUS +
IDENFR c
SEMICN ;
RBRACE }
VOIDTK void
IDENFR put
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "hello"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "20376115\n"
RPARENT )
SEMICN ;
IDENFR put
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "a1: %d, a2: %d\n"
COMMA ,
IDENFR a1
COMMA ,
IDENFR a2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "m: %d b2: %d\n"
COMMA ,
IDENFR m
COMMA ,
IDENFR b2
RPARENT )
SEMICN ;
IDENFR b1
ASSIGN =
IDENFR n
MULT *
INTCON 2
MINU -
IDENFR n
DIV /
INTCON 2
PLUS +
IDENFR n
MOD %
INTCON 2
MULT *
MINU -
LPARENT (
INTCON 3
RPARENT )
MULT *
PLUS +
INTCON 8
MOD %
IDENFR b1
MULT *
IDENFR getval
LPARENT (
RPARENT )
DIV /
IDENFR add
LPARENT (
INTCON 1
COMMA ,
INTCON 1
RPARENT )
MULT *
IDENFR foo
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "b: %d\n"
COMMA ,
IDENFR b1
RPARENT )
SEMICN ;
INTTK int
IDENFR a1
SEMICN ;
IDENFR a1
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "a1: %d\n"
COMMA ,
IDENFR a1
RPARENT )
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "sum: %d\n"
COMMA ,
IDENFR sum
LPARENT (
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RPARENT )
RPARENT )
SEMICN ;
LBRACE {
INTTK int
IDENFR a1
ASSIGN =
INTCON 3
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "a1: %d\n"
COMMA ,
IDENFR a1
RPARENT )
SEMICN ;
LBRACE {
RBRACE }
RBRACE }
INTTK int
IDENFR i
ASSIGN =
INTCON 0
COMMA ,
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
NOT !
IDENFR i
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "i: %d\n"
COMMA ,
IDENFR i
RPARENT )
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR j
LSS <
INTCON 3
RPARENT )
IFTK if
LPARENT (
IDENFR j
GRE >
INTCON 1
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "j: %d > 1\n"
COMMA ,
IDENFR j
RPARENT )
SEMICN ;
ELSETK else
CONTINUETK continue
SEMICN ;
IFTK if
LPARENT (
IDENFR i
NEQ !=
IDENFR i
EQL ==
IDENFR i
LEQ <=
MINU -
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "123456\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR j
GEQ >=
INTCON 4
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
