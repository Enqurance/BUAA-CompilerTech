CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR b
ASSIGN =
INTCON 1
COMMA ,
IDENFR c
ASSIGN =
INTCON 1
COMMA ,
IDENFR d
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR e
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR f
ASSIGN =
INTCON 1
COMMA ,
IDENFR g
ASSIGN =
INTCON 1
COMMA ,
IDENFR h
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR i
SEMICN ;
INTTK int
IDENFR j
COMMA ,
IDENFR k
COMMA ,
IDENFR l
SEMICN ;
CONSTTK const
INTTK int
IDENFR o
ASSIGN =
INTCON 1
COMMA ,
IDENFR p
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "20373291\n"
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR a
SEMICN ;
IDENFR j
ASSIGN =
INTCON 2
SEMICN ;
IDENFR k
ASSIGN =
IDENFR b
MULT *
LPARENT (
IDENFR a
PLUS +
INTCON 2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "i = %d j = %d k = %d\n"
COMMA ,
IDENFR i
COMMA ,
IDENFR j
COMMA ,
IDENFR k
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
PLUS +
MINU -
PLUS +
IDENFR h
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "i = %d\n"
COMMA ,
IDENFR i
RPARENT )
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "!0 = 1\n"
RPARENT )
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 2
MULT *
INTCON 2
SEMICN ;
IDENFR i
ASSIGN =
INTCON 2
DIV /
INTCON 2
SEMICN ;
IDENFR i
ASSIGN =
INTCON 2
MOD %
INTCON 2
SEMICN ;
IDENFR h
ASSIGN =
IDENFR i
SEMICN ;
IDENFR h
ASSIGN =
IDENFR a
PLUS +
IDENFR i
SEMICN ;
IDENFR h
ASSIGN =
IDENFR a
MINU -
IDENFR i
SEMICN ;
IFTK if
LPARENT (
IDENFR h
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "This is h\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 1
LSS <
INTCON 2
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "1 < 2\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 2
GRE >
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "2 > 1\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 1
LEQ <=
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "1 <= 1\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 1
GEQ >=
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "1 >= 1\n"
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
