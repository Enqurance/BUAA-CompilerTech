VOIDTK void
<FuncType>
IDENFR fq
LPARENT (
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
<Stmt>
WHILETK while
LPARENT (
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
<Stmt>
CONTINUETK continue
SEMICN ;
<Stmt>
RBRACE }
<Block>
<Stmt>
<Stmt>
RBRACE }
<Block>
<FuncDef>
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
LBRACE {
BREAKTK break
SEMICN ;
<Stmt>
CONTINUETK continue
SEMICN ;
<Stmt>
INTTK int
IDENFR c
<VarDef>
null SEMICN
<VarDecl>
LBRACE {
BREAKTK break
SEMICN ;
<Stmt>
CONTINUETK continue
SEMICN ;
<Stmt>
RBRACE }
<Block>
<Stmt>
RBRACE }
<Block>
<Stmt>
BREAKTK break
SEMICN ;
<Stmt>
WHILETK while
LPARENT (
IDENFR i
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
GRE >
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT )
LBRACE {
LBRACE {
BREAKTK break
SEMICN ;
<Stmt>
CONTINUETK continue
SEMICN ;
<Stmt>
RBRACE }
<Block>
<Stmt>
RBRACE }
<Block>
<Stmt>
<Stmt>
INTTK int
IDENFR b
ASSIGN =
IDENFR c
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
RBRACE }
<Block>
<MainFuncDef>
<CompUnit>
