CONSTTK const
INTTK int
IDENFR a_c_num_1
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR a_c_num_2
ASSIGN =
INTCON 2
COMMA ,
IDENFR a_c_num_3
ASSIGN =
INTCON 3
SEMICN ;
CONSTTK const
INTTK int
IDENFR a_c_num_4
ASSIGN =
INTCON 4
COMMA ,
IDENFR a_c_num_5
ASSIGN =
INTCON 5
COMMA ,
IDENFR a_c_num_6
ASSIGN =
INTCON 6
SEMICN ;
INTTK int
IDENFR a_v_num
SEMICN ;
INTTK int
IDENFR a_v_num_1
ASSIGN =
INTCON 1
COMMA ,
IDENFR a_v_num_2
ASSIGN =
INTCON 2
SEMICN ;
VOIDTK void
IDENFR non_param_func
LPARENT (
RPARENT )
LBRACE {
LBRACE {
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR one_param_func
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
INTTK int
IDENFR n
SEMICN ;
INTTK int
IDENFR n1
ASSIGN =
INTCON 1
COMMA ,
IDENFR n2
ASSIGN =
INTCON 2
SEMICN ;
RETURNTK return
IDENFR a
PLUS +
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR two_param_func
LPARENT (
INTTK int
IDENFR a1
COMMA ,
INTTK int
IDENFR a2
RPARENT )
LBRACE {
RETURNTK return
IDENFR a1
PLUS +
IDENFR a2
SEMICN ;
RBRACE }
INTTK int
IDENFR more_than_two_param_func
LPARENT (
INTTK int
IDENFR a1
COMMA ,
INTTK int
IDENFR a2
COMMA ,
INTTK int
IDENFR a3
RPARENT )
LBRACE {
RETURNTK return
IDENFR a1
PLUS +
IDENFR a2
MINU -
IDENFR a3
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR m_c_num1
ASSIGN =
INTCON 1
COMMA ,
IDENFR m_c_num2
ASSIGN =
INTCON 2
SEMICN ;
INTTK int
IDENFR m_v_num1
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR m_v_num
SEMICN ;
INTTK int
IDENFR m_v_num2
SEMICN ;
INTTK int
IDENFR m_v_num_3
ASSIGN =
INTCON 3
COMMA ,
IDENFR m_v_num_4
ASSIGN =
INTCON 4
COMMA ,
IDENFR m_v_num_5
ASSIGN =
INTCON 5
SEMICN ;
IDENFR m_v_num2
ASSIGN =
INTCON 2
SEMICN ;
LBRACE {
SEMICN ;
INTCON 1
MINU -
INTCON 1
SEMICN ;
IDENFR non_param_func
LPARENT (
RPARENT )
SEMICN ;
IDENFR more_than_two_param_func
LPARENT (
IDENFR m_v_num_3
COMMA ,
IDENFR m_v_num_4
COMMA ,
IDENFR m_v_num_5
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 1
RPARENT )
LBRACE {
INTTK int
IDENFR if_v_num3
ASSIGN =
IDENFR m_v_num2
PLUS +
INTCON 1
SEMICN ;
IDENFR m_v_num
ASSIGN =
IDENFR two_param_func
LPARENT (
IDENFR m_c_num1
COMMA ,
IDENFR if_v_num3
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR m_v_num
MULT *
IDENFR m_c_num1
EQL ==
IDENFR m_c_num1
PLUS +
IDENFR if_v_num3
MULT *
INTCON 1
RPARENT )
LBRACE {
IDENFR non_param_func
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR a_v_num
ASSIGN =
IDENFR a_c_num_1
SEMICN ;
WHILETK while
LPARENT (
IDENFR a_v_num
LEQ <=
IDENFR a_c_num_3
RPARENT )
LBRACE {
IDENFR a_v_num
ASSIGN =
IDENFR one_param_func
LPARENT (
IDENFR a_v_num
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 1
AND &&
IDENFR a_v_num
EQL ==
IDENFR a_c_num_3
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
NOT !
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
RBRACE }
RBRACE }
RBRACE }
IDENFR m_v_num
ASSIGN =
LPARENT (
INTCON 1
RPARENT )
MULT *
IDENFR one_param_func
LPARENT (
IDENFR a_c_num_1
RPARENT )
DIV /
LPARENT (
IDENFR a_c_num_2
PLUS +
INTCON 2
RPARENT )
MOD %
PLUS +
MINU -
IDENFR a_c_num_3
MINU -
PLUS +
INTCON 2
PLUS +
MINU -
INTCON 3
SEMICN ;
IDENFR m_v_num
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "20373260\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "a_c_num_1:%d\n"
COMMA ,
IDENFR a_c_num_1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "a_c_num_2:%d, a_v_num_2:%d\n"
COMMA ,
IDENFR a_c_num_2
COMMA ,
IDENFR a_v_num_2
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
