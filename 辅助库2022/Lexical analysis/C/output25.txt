VOIDTK void
IDENFR addNum
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
COMMA ,
IDENFR b
SEMICN ;
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR b
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "in addNum a=%d,b=%d\n"
COMMA ,
IDENFR a
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
INTTK int
IDENFR c
ASSIGN =
LPARENT (
IDENFR a
PLUS +
IDENFR b
RPARENT )
MULT *
INTCON 2
SEMICN ;
INTTK int
IDENFR d
ASSIGN =
PLUS +
MINU -
PLUS +
IDENFR b
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "in addNum c=%d,d=%d\n"
COMMA ,
IDENFR c
COMMA ,
IDENFR d
RPARENT )
SEMICN ;
INTTK int
IDENFR e
ASSIGN =
IDENFR c
PLUS +
IDENFR d
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "in addNum e=%d\n"
COMMA ,
IDENFR e
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR flag
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 3
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR e
MOD %
INTCON 3
EQL ==
INTCON 0
RPARENT )
LBRACE {
IDENFR flag
ASSIGN =
INTCON 1
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR e
MOD %
INTCON 3
EQL ==
INTCON 1
RPARENT )
LBRACE {
IDENFR flag
ASSIGN =
INTCON 2
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IDENFR e
ASSIGN =
IDENFR e
PLUS +
IDENFR i
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "e=%d become even"
COMMA ,
IDENFR e
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "out i=%d\n"
COMMA ,
IDENFR i
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "in addNum out flag=%d\n"
COMMA ,
IDENFR flag
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR testMul
LPARENT (
INTTK int
IDENFR x
COMMA ,
INTTK int
IDENFR y
RPARENT )
LBRACE {
INTTK int
IDENFR re
ASSIGN =
INTCON 0
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "in testMul x=%d y=%d\n"
COMMA ,
IDENFR x
COMMA ,
IDENFR y
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR y
LSS <
INTCON 15
RPARENT )
LBRACE {
IDENFR re
ASSIGN =
IDENFR x
PLUS +
IDENFR y
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR y
LEQ <=
INTCON 20
RPARENT )
LBRACE {
IDENFR re
ASSIGN =
IDENFR x
MOD %
IDENFR y
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR y
GEQ >=
INTCON 30
RPARENT )
LBRACE {
IDENFR re
ASSIGN =
IDENFR x
MULT *
IDENFR y
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR re
ASSIGN =
IDENFR x
MINU -
IDENFR y
DIV /
IDENFR x
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "in testMul get re=%d\n"
COMMA ,
IDENFR re
RPARENT )
SEMICN ;
RETURNTK return
IDENFR re
SEMICN ;
RBRACE }
VOIDTK void
IDENFR single
LPARENT (
INTTK int
IDENFR z
RPARENT )
LBRACE {
IFTK if
LPARENT (
NOT !
IDENFR z
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "z==0\n"
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "20373780\n"
RPARENT )
SEMICN ;
IDENFR addNum
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR x
COMMA ,
IDENFR y
SEMICN ;
IDENFR x
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR y
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 20
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
MINU -
INTCON 20
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
EQL ==
INTCON 20
RPARENT )
LBRACE {
RBRACE }
SEMICN ;
INTTK int
IDENFR c
ASSIGN =
IDENFR testMul
LPARENT (
IDENFR x
COMMA ,
IDENFR y
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "c=%d\n"
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
IDENFR single
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
