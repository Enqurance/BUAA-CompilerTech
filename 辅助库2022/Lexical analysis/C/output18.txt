VOIDTK void
IDENFR func
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 100
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func1
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
INTTK int
IDENFR j
ASSIGN =
INTCON 1
COMMA ,
IDENFR k
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR i1
ASSIGN =
INTCON 1
COMMA ,
IDENFR i2_
ASSIGN =
INTCON 2
COMMA ,
IDENFR i_3
ASSIGN =
INTCON 3
COMMA ,
IDENFR i4_I
ASSIGN =
INTCON 4
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR Fu1_nC
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR i
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
PLUS +
INTCON 2
SEMICN ;
RBRACE }
RETURNTK return
INTCON 2
PLUS +
INTCON 2
SEMICN ;
RBRACE }
INTTK int
IDENFR func2
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 1
COMMA ,
IDENFR ret
ASSIGN =
INTCON 0
SEMICN ;
IFTK if
LPARENT (
IDENFR i
NEQ !=
INTCON 0
RPARENT )
LBRACE {
IDENFR ret
ASSIGN =
INTCON 222
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR ret
ASSIGN =
INTCON 666
SEMICN ;
RBRACE }
RETURNTK return
IDENFR ret
SEMICN ;
RBRACE }
INTTK int
IDENFR func_3
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 1
COMMA ,
IDENFR j
ASSIGN =
INTCON 2
SEMICN ;
RETURNTK return
IDENFR i
PLUS +
IDENFR j
SEMICN ;
RBRACE }
INTTK int
IDENFR func4
LPARENT (
INTTK int
IDENFR x
COMMA ,
INTTK int
IDENFR y
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
INTCON 2
MULT *
IDENFR x
PLUS +
IDENFR y
DIV /
INTCON 3
RPARENT )
DIV /
INTCON 5
MOD %
INTCON 10
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "20373420\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Fu1_nC(): %d\n"
COMMA ,
IDENFR Fu1_nC
LPARENT (
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "func2(): %d\n"
COMMA ,
IDENFR func2
LPARENT (
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "func_3(): %d\n"
COMMA ,
IDENFR func_3
LPARENT (
RPARENT )
RPARENT )
SEMICN ;
INTTK int
IDENFR a
SEMICN ;
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "a is no less than 0!\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "a is no greater than 0!\n"
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR b
SEMICN ;
IDENFR b
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR b
GRE >
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "b is greater than 0!\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "b is no greater than 0!\n"
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR c
SEMICN ;
IDENFR c
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR c
EQL ==
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "c is exactly zero!\n"
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
INTCON 13
SEMICN ;
RBRACE }
INTTK int
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
INTCON 1
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
MULT *
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 100
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR func1
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "i break with a value of %d\n"
COMMA ,
IDENFR i
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "func4 result: %d"
COMMA ,
IDENFR func4
LPARENT (
IDENFR b
COMMA ,
IDENFR c
RPARENT )
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
