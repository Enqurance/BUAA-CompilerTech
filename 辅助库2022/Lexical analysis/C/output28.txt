CONSTTK const
INTTK int
IDENFR title
ASSIGN =
INTCON 10
COMMA ,
IDENFR useless
ASSIGN =
INTCON 20
SEMICN ;
INTTK int
IDENFR Fibo
LPARENT (
INTTK int
IDENFR n
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR n
EQL ==
INTCON 0
OR ||
IDENFR n
EQL ==
INTCON 1
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR f1
COMMA ,
IDENFR f2
SEMICN ;
IDENFR f1
ASSIGN =
IDENFR Fibo
LPARENT (
IDENFR n
MINU -
INTCON 1
RPARENT )
SEMICN ;
IDENFR f2
ASSIGN =
IDENFR Fibo
LPARENT (
IDENFR n
MINU -
INTCON 2
RPARENT )
SEMICN ;
RETURNTK return
IDENFR f1
PLUS +
IDENFR f2
SEMICN ;
RBRACE }
VOIDTK void
IDENFR LogicalCount
LPARENT (
INTTK int
IDENFR n
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Multiply:%d\n"
COMMA ,
IDENFR n
MULT *
IDENFR n
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Division:%d\n"
COMMA ,
IDENFR n
DIV /
IDENFR n
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Delivery:%d\n"
COMMA ,
IDENFR n
MOD %
IDENFR n
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR num
COMMA ,
IDENFR res
SEMICN ;
IDENFR num
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "20373980\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Received!Counting...\n"
RPARENT )
SEMICN ;
IDENFR res
ASSIGN =
IDENFR Fibo
LPARENT (
IDENFR num
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "The number you want is %d(Using recursion)\n"
COMMA ,
IDENFR res
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 1
COMMA ,
IDENFR j
ASSIGN =
INTCON 1
COMMA ,
IDENFR k
ASSIGN =
INTCON 1
COMMA ,
IDENFR temp
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR num
RPARENT )
LBRACE {
IDENFR temp
ASSIGN =
IDENFR j
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
IDENFR k
SEMICN ;
IDENFR k
ASSIGN =
IDENFR temp
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
LSS <
INTCON 0
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "The number you want is %d(Using while block)\n"
COMMA ,
IDENFR j
RPARENT )
SEMICN ;
IDENFR LogicalCount
LPARENT (
IDENFR num
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR num
MULT *
INTCON 10
GEQ >=
IDENFR res
RPARENT )
LBRACE {
IDENFR num
ASSIGN =
IDENFR num
PLUS +
INTCON 10
SEMICN ;
IDENFR res
ASSIGN =
IDENFR res
MINU -
INTCON 10
SEMICN ;
IDENFR num
ASSIGN =
IDENFR num
MULT *
INTCON 10
SEMICN ;
IDENFR res
ASSIGN =
IDENFR res
DIV /
INTCON 10
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "%d %d\n"
COMMA ,
IDENFR num
COMMA ,
IDENFR res
PLUS +
IDENFR title
RPARENT )
SEMICN ;
INTTK int
IDENFR x
ASSIGN =
INTCON 2
MULT *
IDENFR res
COMMA ,
IDENFR y
SEMICN ;
IDENFR y
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
GRE >
IDENFR y
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "x is bigger!\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR x
LSS <
IDENFR y
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "y is bigger\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR x
EQL ==
IDENFR y
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "x is equal to y\n"
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Finished!"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
