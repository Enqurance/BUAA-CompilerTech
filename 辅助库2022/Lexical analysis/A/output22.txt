CONSTTK const
INTTK int
IDENFR const1
ASSIGN =
INTCON 0
SEMICN ;
CONSTTK const
INTTK int
IDENFR const1_arr
LBRACK [
INTCON 10
DIV /
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
IDENFR const2_arr
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR const1_arr2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 5
MINU -
INTCON 7
MOD %
INTCON 4
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 6
COMMA ,
INTCON 7
RBRACE }
COMMA ,
LBRACE {
INTCON 8
COMMA ,
INTCON 7
PLUS +
INTCON 2
MULT *
LPARENT (
INTCON 3
MINU -
INTCON 2
RPARENT )
RBRACE }
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR _my_const
ASSIGN =
INTCON 3
MULT *
INTCON 1
MINU -
INTCON 1
COMMA ,
IDENFR const2
ASSIGN =
MINU -
INTCON 2
COMMA ,
IDENFR const3
ASSIGN =
INTCON 4
SEMICN ;
INTTK int
IDENFR var1
ASSIGN =
INTCON 3
SEMICN ;
INTTK int
IDENFR var2
ASSIGN =
INTCON 4
MINU -
INTCON 2
MOD %
INTCON 4
COMMA ,
IDENFR var_arr
LBRACK [
INTCON 4
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
RBRACE }
COMMA ,
IDENFR var_arr2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 3
MOD %
INTCON 2
PLUS +
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 10
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR var3
SEMICN ;
INTTK int
IDENFR var4
COMMA ,
IDENFR var5
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
IDENFR var6
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
INTTK int
IDENFR test_return
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
MULT *
LPARENT (
INTCON 2
PLUS +
INTCON 7
RPARENT )
MOD %
INTCON 4
MINU -
LPARENT (
INTCON 2
MINU -
INTCON 12
RPARENT )
DIV /
INTCON 5
SEMICN ;
RBRACE }
INTTK int
IDENFR test_zero
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
INTTK int
IDENFR s
ASSIGN =
INTCON 0
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
IDENFR s
ASSIGN =
INTCON 1
SEMICN ;
RETURNTK return
IDENFR s
SEMICN ;
RBRACE }
INTTK int
IDENFR test_add
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
SEMICN ;
RBRACE }
INTTK int
IDENFR test_sum
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR num
RPARENT )
LBRACE {
INTTK int
IDENFR sum
ASSIGN =
INTCON 0
COMMA ,
IDENFR i
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR num
RPARENT )
LBRACE {
IDENFR sum
ASSIGN =
IDENFR sum
PLUS +
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR sum
SEMICN ;
RBRACE }
INTTK int
IDENFR test_ifcomb
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR num
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
IDENFR num
MINU -
INTCON 1
COMMA ,
IDENFR tar
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
EQL ==
INTCON 0
RPARENT )
SEMICN ;
ELSETK else
IFTK if
LPARENT (
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR tar
ASSIGN =
IDENFR tar
PLUS +
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
MULT *
IDENFR b
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR tar
ASSIGN =
IDENFR tar
MINU -
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
MULT *
IDENFR b
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
MINU -
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR tar
SEMICN ;
RBRACE }
VOIDTK void
IDENFR run_test_return
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "test_return:%d <==> correct:3\n"
COMMA ,
IDENFR test_return
LPARENT (
RPARENT )
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR run_test_zero
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR verify
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "test_not:%d <==> correct:%d\n"
COMMA ,
IDENFR test_zero
LPARENT (
IDENFR a
RPARENT )
COMMA ,
IDENFR verify
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR run_test_sum
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR num
COMMA ,
INTTK int
IDENFR verify
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR num
LEQ <=
INTCON 0
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "num invalid: smaller than zero\n"
RPARENT )
SEMICN ;
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "test_sum:%d <==> correct:%d\n"
COMMA ,
IDENFR test_sum
LPARENT (
IDENFR a
COMMA ,
IDENFR num
RPARENT )
COMMA ,
IDENFR verify
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
VOIDTK void
IDENFR run_test_ifcomb
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR num
COMMA ,
INTTK int
IDENFR verify
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "test_ifcomb:%d <==> correct:%d\n"
COMMA ,
IDENFR test_ifcomb
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR num
RPARENT )
COMMA ,
IDENFR verify
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_logic
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 3
COMMA ,
IDENFR b
ASSIGN =
INTCON 5
COMMA ,
IDENFR c
ASSIGN =
INTCON 5
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 3
AND &&
IDENFR b
NEQ !=
INTCON 4
OR ||
IDENFR c
LSS <
INTCON 5
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "short-circuit logic or ok!\n"
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GRE >
INTCON 4
OR ||
IDENFR b
GEQ >=
INTCON 6
AND &&
IDENFR c
LEQ <=
INTCON 5
RPARENT )
SEMICN ;
ELSETK else
PRINTFTK printf
LPARENT (
STRCON "short-circuit logic and ok!\n"
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_exp
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
INTTK int
IDENFR c
SEMICN ;
IDENFR c
ASSIGN =
MINU -
IDENFR a
PLUS +
IDENFR test_add
LPARENT (
IDENFR b
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR b
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
MULT *
LPARENT (
IDENFR b
LBRACK [
INTCON 0
RBRACK ]
MOD %
IDENFR const1_arr2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "c=%d <==> correct:%d\n"
COMMA ,
IDENFR c
COMMA ,
INTCON 9
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "20373585\n"
RPARENT )
SEMICN ;
LBRACE {
RBRACE }
INTTK int
IDENFR var
ASSIGN =
IDENFR const1
COMMA ,
IDENFR arr
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "const1_arr2[1][1]:%d <==> correct:9\n"
COMMA ,
IDENFR const1_arr2
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
IDENFR run_test_return
LPARENT (
RPARENT )
SEMICN ;
IDENFR arr
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR var
SEMICN ;
IDENFR arr
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IDENFR run_test_zero
LPARENT (
IDENFR arr
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR arr
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
IDENFR var6
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
PLUS +
MINU -
PLUS +
MINU -
INTCON 1
SEMICN ;
IDENFR var6
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
PLUS +
INTCON 2
SEMICN ;
IDENFR var6
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
IDENFR var1
SEMICN ;
IDENFR var6
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR var6
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 4
RBRACK ]
ASSIGN =
IDENFR test_add
LPARENT (
INTCON 3
COMMA ,
MINU -
INTCON 3
RPARENT )
PLUS +
IDENFR const2_arr
LBRACK [
IDENFR var6
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 3
PLUS +
IDENFR const2
RBRACK ]
RBRACK ]
SEMICN ;
IDENFR run_test_sum
LPARENT (
IDENFR var6
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
INTCON 5
COMMA ,
INTCON 15
RPARENT )
SEMICN ;
INTTK int
IDENFR a
LBRACK [
INTCON 4
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
COMMA ,
IDENFR j
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 4
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
INTCON 2
RPARENT )
LBRACE {
INTTK int
IDENFR get_var
SEMICN ;
IDENFR get_var
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
WHILETK while
LPARENT (
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
NEQ !=
INTCON 0
RPARENT )
BREAKTK break
SEMICN ;
IFTK if
LPARENT (
IDENFR get_var
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR get_var
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
BREAKTK break
SEMICN ;
RBRACE }
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR get_var
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR run_test_ifcomb
LPARENT (
IDENFR a
COMMA ,
IDENFR var_arr
COMMA ,
INTCON 4
COMMA ,
MINU -
INTCON 11
RPARENT )
SEMICN ;
IDENFR test_logic
LPARENT (
RPARENT )
SEMICN ;
IDENFR test_exp
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
