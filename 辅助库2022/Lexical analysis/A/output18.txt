INTTK int
IDENFR u
ASSIGN =
INTCON 3
MOD %
INTCON 3
COMMA ,
IDENFR v
ASSIGN =
INTCON 6
COMMA ,
IDENFR s
ASSIGN =
INTCON 9
SEMICN ;
INTTK int
IDENFR dim_2
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
INTTK int
IDENFR array
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 2
COMMA ,
INTCON 4
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR add_three
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR arr
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR arr
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR b
SEMICN ;
RBRACE }
INTTK int
IDENFR add1
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
INTTK int
IDENFR ans
SEMICN ;
CONSTTK const
INTTK int
IDENFR AAA
ASSIGN =
INTCON 3
COMMA ,
IDENFR BBB_
ASSIGN =
INTCON 3
COMMA ,
IDENFR CCC
ASSIGN =
INTCON 9
SEMICN ;
CONSTTK const
INTTK int
IDENFR a1
ASSIGN =
INTCON 12
COMMA ,
IDENFR a2
ASSIGN =
INTCON 22
SEMICN ;
IDENFR ans
ASSIGN =
IDENFR a
PLUS +
IDENFR b
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "20373394\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "a = %d\n"
COMMA ,
IDENFR a
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "b = %d\n"
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
RETURNTK return
IDENFR ans
SEMICN ;
RBRACE }
INTTK int
IDENFR addmmm
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
PLUS +
IDENFR c
SEMICN ;
RBRACE }
INTTK int
IDENFR add
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 99
SEMICN ;
RBRACE }
VOIDTK void
IDENFR printarrrr
LPARENT (
INTTK int
IDENFR arr
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "first: %d"
COMMA ,
IDENFR arr
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR printarr
LPARENT (
INTTK int
IDENFR arr
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR arr2
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "first : %d"
COMMA ,
IDENFR arr
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR var_array
LBRACK [
INTCON 7
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
COMMA ,
INTCON 7
COMMA ,
INTCON 8
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR c_array
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
PLUS +
INTCON 1
COMMA ,
INTCON 3
PLUS +
INTCON 3
RBRACE }
SEMICN ;
INTTK int
IDENFR var_AAA
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
RBRACE }
SEMICN ;
INTTK int
IDENFR var_2dim
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
IDENFR var_array
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR var_array
LBRACK [
INTCON 1
RBRACK ]
RBRACE }
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR ONE
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
INTCON 0
AND &&
INTCON 1
RPARENT )
LBRACE {
IDENFR var_array
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 3
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
INTCON 1
OR ||
NOT !
IDENFR ONE
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR var_array
LBRACK [
INTCON 0
RBRACK ]
PLUS +
INTCON 99
LSS <
INTCON 99
RPARENT )
LBRACE {
IDENFR var_array
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 99
DIV /
IDENFR add
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
IDENFR add1
LPARENT (
IDENFR var_array
LBRACK [
INTCON 4
MOD %
INTCON 3
RBRACK ]
COMMA ,
IDENFR var_array
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
SEMICN ;
INTTK int
IDENFR input_n
COMMA ,
IDENFR input_m
SEMICN ;
IDENFR input_n
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR add1
LPARENT (
IDENFR input_n
COMMA ,
PLUS +
IDENFR array
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
IDENFR add1
LPARENT (
MINU -
IDENFR input_n
COMMA ,
IDENFR array
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
IDENFR add1
LPARENT (
IDENFR input_n
COMMA ,
IDENFR ONE
RPARENT )
SEMICN ;
IDENFR addmmm
LPARENT (
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RPARENT )
SEMICN ;
IDENFR var_array
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
IDENFR var_array
LBRACK [
INTCON 3
RBRACK ]
MINU -
IDENFR var_array
LBRACK [
INTCON 5
RBRACK ]
MULT *
IDENFR add
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR i
SEMICN ;
INTTK int
IDENFR ui
ASSIGN =
PLUS +
MINU -
PLUS +
IDENFR i
SEMICN ;
IDENFR i
ASSIGN =
IDENFR add
LPARENT (
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR add1
LPARENT (
INTCON 1
COMMA ,
INTCON 3
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
LPARENT (
IDENFR i
PLUS +
IDENFR var_array
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 0
RPARENT )
LBRACE {
RBRACE }
WHILETK while
LPARENT (
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR var_array
LBRACK [
IDENFR i
RBRACK ]
EQL ==
INTCON 2
AND &&
IDENFR var_array
LBRACK [
INTCON 0
RBRACK ]
GRE >
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR var_array
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
SEMICN ;
IFTK if
LPARENT (
IDENFR var_array
LBRACK [
IDENFR i
RBRACK ]
NEQ !=
INTCON 2
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d is not 2\n"
COMMA ,
IDENFR var_array
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "xxxx\n"
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
MINU -
IDENFR var_array
LBRACK [
IDENFR i
RBRACK ]
GEQ >=
INTCON 0
OR ||
IDENFR var_array
LBRACK [
INTCON 0
RBRACK ]
LEQ <=
INTCON 0
AND &&
INTCON 1
RPARENT )
LBRACE {
IDENFR var_array
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR var_array
LBRACK [
IDENFR i
RBRACK ]
MULT *
INTCON 3
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
RBRACE }
IDENFR printarr
LPARENT (
IDENFR array
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR array
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
IDENFR printarrrr
LPARENT (
IDENFR array
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
