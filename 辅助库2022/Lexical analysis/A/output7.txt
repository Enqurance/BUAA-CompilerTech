INTTK int
IDENFR a
ASSIGN =
INTCON 100
SEMICN ;
CONSTTK const
INTTK int
IDENFR n
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR arr
LBRACK [
INTCON 10
RBRACK ]
ASSIGN =
LBRACE {
INTCON 666
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
SEMICN ;
INTTK int
IDENFR one
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR two
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 2
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR sum
COMMA ,
IDENFR ave
SEMICN ;
INTTK int
IDENFR aa
COMMA ,
IDENFR bb
COMMA ,
IDENFR cc
COMMA ,
IDENFR dd
SEMICN ;
CONSTTK const
INTTK int
IDENFR ca
ASSIGN =
INTCON 0
COMMA ,
IDENFR cb
ASSIGN =
INTCON 1
COMMA ,
IDENFR ccc
ASSIGN =
INTCON 2
COMMA ,
IDENFR cd
ASSIGN =
INTCON 3
SEMICN ;
VOIDTK void
IDENFR Sum
LPARENT (
INTTK int
IDENFR arr
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
IDENFR sum
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR i
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR n
RPARENT )
LBRACE {
IDENFR sum
ASSIGN =
IDENFR sum
PLUS +
PLUS +
IDENFR arr
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR ave
ASSIGN =
IDENFR sum
DIV /
IDENFR n
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR echo
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR _
SEMICN ;
IDENFR _
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR _
RPARENT )
SEMICN ;
RETURNTK return
IDENFR _
SEMICN ;
RBRACE }
INTTK int
IDENFR add
LPARENT (
INTTK int
IDENFR x
COMMA ,
INTTK int
IDENFR y
RPARENT )
LBRACE {
RETURNTK return
IDENFR x
PLUS +
IDENFR y
SEMICN ;
RBRACE }
INTTK int
IDENFR modify
LPARENT (
INTTK int
IDENFR block
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
COMMA ,
INTTK int
IDENFR x
COMMA ,
INTTK int
IDENFR y
COMMA ,
INTTK int
IDENFR val
RPARENT )
LBRACE {
INTTK int
IDENFR ret
SEMICN ;
IFTK if
LPARENT (
IDENFR x
GEQ >=
INTCON 2
OR ||
IDENFR y
GEQ >=
INTCON 3
RPARENT )
IDENFR ret
ASSIGN =
INTCON 0
SEMICN ;
ELSETK else
LBRACE {
IDENFR block
LBRACK [
IDENFR x
RBRACK ]
LBRACK [
IDENFR y
RBRACK ]
ASSIGN =
IDENFR val
SEMICN ;
IDENFR ret
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR ret
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "20373020\n"
RPARENT )
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
IDENFR Sum
LPARENT (
IDENFR arr
RPARENT )
SEMICN ;
CONSTTK const
INTTK int
IDENFR m
ASSIGN =
INTCON 520
COMMA ,
IDENFR _
ASSIGN =
INTCON 522
SEMICN ;
IDENFR add
LPARENT (
IDENFR m
COMMA ,
IDENFR arr
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
INTTK int
IDENFR tik
SEMICN ;
IFTK if
LPARENT (
IDENFR ave
PLUS +
IDENFR sum
GRE >
IDENFR m
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR ave
PLUS +
IDENFR sum
GEQ >=
IDENFR m
RPARENT )
LBRACE {
IDENFR tik
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR tik
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR ave
PLUS +
IDENFR sum
LEQ <=
IDENFR m
AND &&
NOT !
IDENFR sum
MOD %
IDENFR ave
NEQ !=
IDENFR m
RPARENT )
LBRACE {
WHILETK while
LPARENT (
IDENFR tik
NEQ !=
IDENFR m
RPARENT )
LBRACE {
IDENFR tik
ASSIGN =
IDENFR tik
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR tik
MOD %
INTCON 2
EQL ==
INTCON 0
RPARENT )
BREAKTK break
SEMICN ;
ELSETK else
CONTINUETK continue
SEMICN ;
RBRACE }
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR tik
RPARENT )
SEMICN ;
IDENFR tik
ASSIGN =
IDENFR echo
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR block
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 3
RBRACE }
RBRACE }
SEMICN ;
IDENFR tik
ASSIGN =
IDENFR modify
LPARENT (
IDENFR block
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 8
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR tik
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR block
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR tik
ASSIGN =
IDENFR block
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR tik
ASSIGN =
IDENFR modify
LPARENT (
IDENFR block
COMMA ,
INTCON 1
COMMA ,
INTCON 4
COMMA ,
INTCON 8
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR tik
RPARENT )
SEMICN ;
IDENFR tik
ASSIGN =
IDENFR tik
MULT *
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "const %d var %d glob %d\n"
COMMA ,
IDENFR m
COMMA ,
IDENFR tik
COMMA ,
IDENFR sum
RPARENT )
SEMICN ;
INTTK int
IDENFR ca
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
IDENFR arr
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR arr
LBRACK [
INTCON 1
RBRACK ]
RBRACE }
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
LPARENT (
MINU -
IDENFR arr
LBRACK [
INTCON 0
RBRACK ]
MINU -
MINU -
IDENFR arr
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "this is end\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
