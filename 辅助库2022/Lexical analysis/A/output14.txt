CONSTTK const
INTTK int
IDENFR N
ASSIGN =
INTCON 16
SEMICN ;
INTTK int
IDENFR c
SEMICN ;
CONSTTK const
INTTK int
IDENFR k
ASSIGN =
INTCON 0
COMMA ,
IDENFR l
ASSIGN =
INTCON 1
COMMA ,
IDENFR n
ASSIGN =
INTCON 2
SEMICN ;
CONSTTK const
INTTK int
IDENFR q
ASSIGN =
INTCON 2
COMMA ,
IDENFR qq
ASSIGN =
INTCON 3
SEMICN ;
INTTK int
IDENFR p
ASSIGN =
INTCON 0
COMMA ,
IDENFR pp
ASSIGN =
INTCON 1
COMMA ,
IDENFR ppp
ASSIGN =
INTCON 2
SEMICN ;
CONSTTK const
INTTK int
IDENFR a1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR a2
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 3
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 7
COMMA ,
INTCON 7
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR plus1
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
INTTK int
IDENFR c
SEMICN ;
IDENFR c
ASSIGN =
IDENFR a
SEMICN ;
RETURNTK return
IDENFR c
PLUS +
INTCON 1
SEMICN ;
RBRACE }
VOIDTK void
IDENFR err
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "\nerr\n"
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR first
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
RBRACE }
VOIDTK void
IDENFR merge
LPARENT (
INTTK int
IDENFR data
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR left
COMMA ,
INTTK int
IDENFR mid
COMMA ,
INTTK int
IDENFR right
RPARENT )
LBRACE {
INTTK int
IDENFR midarr
LBRACK [
IDENFR N
RBRACK ]
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
IDENFR left
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LEQ <=
IDENFR right
RPARENT )
LBRACE {
IDENFR midarr
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR data
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR left
SEMICN ;
INTTK int
IDENFR j
ASSIGN =
IDENFR mid
PLUS +
INTCON 1
SEMICN ;
INTTK int
IDENFR k
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LEQ <=
IDENFR mid
AND &&
IDENFR j
LEQ <=
IDENFR right
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR midarr
LBRACK [
IDENFR i
RBRACK ]
LEQ <=
IDENFR midarr
LBRACK [
IDENFR j
RBRACK ]
RPARENT )
LBRACE {
IDENFR data
LBRACK [
IDENFR left
PLUS +
IDENFR k
RBRACK ]
ASSIGN =
IDENFR midarr
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IDENFR k
ASSIGN =
IDENFR k
PLUS +
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR data
LBRACK [
IDENFR left
PLUS +
IDENFR k
RBRACK ]
ASSIGN =
IDENFR midarr
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
IDENFR k
ASSIGN =
IDENFR k
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
IFTK if
LPARENT (
IDENFR i
LEQ <=
IDENFR mid
RPARENT )
LBRACE {
WHILETK while
LPARENT (
IDENFR i
LEQ <=
IDENFR mid
RPARENT )
LBRACE {
IDENFR data
LBRACK [
IDENFR left
PLUS +
IDENFR k
RBRACK ]
ASSIGN =
IDENFR midarr
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IDENFR k
ASSIGN =
IDENFR k
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
ELSETK else
LBRACE {
WHILETK while
LPARENT (
IDENFR j
LEQ <=
IDENFR right
RPARENT )
LBRACE {
IDENFR data
LBRACK [
IDENFR left
PLUS +
IDENFR k
RBRACK ]
ASSIGN =
IDENFR midarr
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
IDENFR k
ASSIGN =
IDENFR k
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR merge_sort
LPARENT (
INTTK int
IDENFR data
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR left
COMMA ,
INTTK int
IDENFR right
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR left
GEQ >=
IDENFR right
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR mid
SEMICN ;
IDENFR mid
ASSIGN =
LPARENT (
IDENFR left
PLUS +
IDENFR right
RPARENT )
DIV /
INTCON 2
SEMICN ;
IDENFR merge_sort
LPARENT (
IDENFR data
COMMA ,
IDENFR left
COMMA ,
IDENFR mid
RPARENT )
SEMICN ;
IDENFR merge_sort
LPARENT (
IDENFR data
COMMA ,
IDENFR mid
PLUS +
INTCON 1
COMMA ,
IDENFR right
RPARENT )
SEMICN ;
IDENFR merge
LPARENT (
IDENFR data
COMMA ,
IDENFR left
COMMA ,
IDENFR mid
COMMA ,
IDENFR right
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR sum
LPARENT (
INTTK int
IDENFR b
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR len
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR res
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR len
RPARENT )
LBRACE {
IDENFR res
ASSIGN =
IDENFR res
PLUS +
IDENFR b
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR res
SEMICN ;
RBRACE }
INTTK int
IDENFR plus
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
SEMICN ;
RBRACE }
VOIDTK void
IDENFR out
LPARENT (
INTTK int
IDENFR ans
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "\nanswer is %d"
COMMA ,
IDENFR ans
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR data
LBRACK [
INTCON 16
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 13
COMMA ,
INTCON 4
COMMA ,
INTCON 5
COMMA ,
INTCON 10
COMMA ,
INTCON 12
COMMA ,
INTCON 9
COMMA ,
INTCON 26
COMMA ,
INTCON 44
COMMA ,
INTCON 0
COMMA ,
INTCON 303
COMMA ,
INTCON 1000
COMMA ,
INTCON 32
COMMA ,
INTCON 54
COMMA ,
INTCON 123
RBRACE }
SEMICN ;
INTTK int
IDENFR a
COMMA ,
IDENFR b
SEMICN ;
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "20373374"
RPARENT )
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LEQ <=
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
MOD %
INTCON 4
EQL ==
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "\nTrue"
RPARENT )
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
MOD %
INTCON 3
EQL ==
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\nfalse"
RPARENT )
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR N
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d "
COMMA ,
IDENFR data
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR merge_sort
LPARENT (
IDENFR data
COMMA ,
INTCON 0
COMMA ,
IDENFR N
MINU -
INTCON 1
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR N
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d "
COMMA ,
IDENFR data
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\n%d %d "
COMMA ,
IDENFR N
MOD %
INTCON 3
COMMA ,
IDENFR N
MULT *
INTCON 2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "sum is %d"
COMMA ,
IDENFR sum
LPARENT (
IDENFR data
COMMA ,
IDENFR N
RPARENT )
RPARENT )
SEMICN ;
INTTK int
IDENFR res
SEMICN ;
IDENFR a
ASSIGN =
INTCON 2
SEMICN ;
IDENFR b
ASSIGN =
INTCON 3
SEMICN ;
IDENFR res
ASSIGN =
IDENFR plus
LPARENT (
IDENFR a
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
IDENFR out
LPARENT (
IDENFR res
RPARENT )
SEMICN ;
INTTK int
IDENFR a3
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 3
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 7
COMMA ,
INTCON 7
RBRACE }
COMMA ,
LBRACE {
INTCON 6
COMMA ,
INTCON 7
COMMA ,
INTCON 8
RBRACE }
RBRACE }
SEMICN ;
IDENFR a
ASSIGN =
INTCON 3
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LEQ <=
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "\nTrue"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "\ntrue"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR i
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "\nfei"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "\ndayu"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
LSS <
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "\nor"
RPARENT )
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 3
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "\n3"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
NEQ !=
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "\nTr1"
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\nend"
RPARENT )
SEMICN ;
INTTK int
IDENFR arr
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 2
COMMA ,
INTCON 3
RBRACE }
RBRACE }
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d"
COMMA ,
IDENFR arr
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
INTCON 10
RPARENT )
SEMICN ;
IDENFR res
ASSIGN =
IDENFR plus1
LPARENT (
IDENFR arr
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "\n%d"
COMMA ,
IDENFR res
RPARENT )
SEMICN ;
IDENFR err
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR m
ASSIGN =
PLUS +
IDENFR l
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d"
COMMA ,
IDENFR m
RPARENT )
SEMICN ;
IDENFR m
ASSIGN =
IDENFR first
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d"
COMMA ,
IDENFR m
RPARENT )
SEMICN ;
IDENFR m
ASSIGN =
MINU -
IDENFR l
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d"
COMMA ,
IDENFR m
RPARENT )
SEMICN ;
IDENFR m
ASSIGN =
IDENFR k
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d"
COMMA ,
IDENFR m
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR m
LSS <
IDENFR l
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d"
COMMA ,
IDENFR l
MULT *
INTCON 3
RPARENT )
SEMICN ;
RBRACE }
IDENFR m
ASSIGN =
IDENFR n
MULT *
INTCON 9
PLUS +
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d"
COMMA ,
IDENFR m
RPARENT )
SEMICN ;
LBRACE {
RBRACE }
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
