CONSTTK const
INTTK int
IDENFR global1
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR global2
ASSIGN =
INTCON 10
COMMA ,
IDENFR global3
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR moduleTest1
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Module1 begin...\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR var1
ASSIGN =
INTCON 0
COMMA ,
IDENFR var2
ASSIGN =
INTCON 10
COMMA ,
IDENFR res
SEMICN ;
WHILETK while
LPARENT (
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR var1
LSS <
INTCON 5
AND &&
IDENFR var2
GRE >
INTCON 5
RPARENT )
LBRACE {
IDENFR var1
ASSIGN =
IDENFR var1
PLUS +
INTCON 1
SEMICN ;
IDENFR var2
ASSIGN =
IDENFR var2
MINU -
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IFTK if
LPARENT (
IDENFR var1
EQL ==
IDENFR var2
AND &&
IDENFR var1
GEQ >=
INTCON 5
AND &&
IDENFR var2
LEQ <=
INTCON 5
RPARENT )
LBRACE {
IDENFR res
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR res
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
RETURNTK return
IDENFR res
SEMICN ;
RBRACE }
INTTK int
IDENFR moduleTest2
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Module2 begin...\n"
RPARENT )
SEMICN ;
SEMICN ;
INTTK int
IDENFR res
ASSIGN =
INTCON 0
SEMICN ;
IFTK if
LPARENT (
IDENFR res
LSS <
INTCON 0
OR ||
IDENFR res
NEQ !=
INTCON 0
OR ||
IDENFR res
EQL ==
INTCON 0
RPARENT )
LBRACE {
IDENFR res
ASSIGN =
IDENFR res
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR res
SEMICN ;
RBRACE }
INTTK int
IDENFR moduleTest3
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Module3 begin...\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR global2
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR global1
PLUS +
IDENFR i
MINU -
INTCON 0
DIV /
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR i
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "20373237\nTest A begin...\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR var
SEMICN ;
IDENFR var
ASSIGN =
IDENFR moduleTest1
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR var
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Module1 passed!\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Module1 failed!\n"
RPARENT )
SEMICN ;
RBRACE }
IDENFR var
ASSIGN =
IDENFR moduleTest2
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
NOT !
LPARENT (
IDENFR var
RPARENT )
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Module2 failed!\n"
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Module2 passed!\n"
RPARENT )
SEMICN ;
IDENFR var
ASSIGN =
IDENFR moduleTest3
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR var
EQL ==
INTCON 10
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Module3 passed!\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Module3 failed!\n"
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Test A end!\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
