CONSTTK const
INTTK int
IDENFR ConstA
ASSIGN =
INTCON 1
COMMA ,
IDENFR tmpConst
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR S
LBRACK [
INTCON 6
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 3
COMMA ,
INTCON 7
COMMA ,
INTCON 6
COMMA ,
INTCON 5
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR cccA
ASSIGN =
INTCON 1
COMMA ,
IDENFR cccB
ASSIGN =
INTCON 2
COMMA ,
IDENFR cccC
ASSIGN =
INTCON 4
SEMICN ;
CONSTTK const
INTTK int
IDENFR Vect2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 4
RBRACE }
COMMA ,
LBRACE {
INTCON 8
COMMA ,
INTCON 16
COMMA ,
INTCON 32
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR A
ASSIGN =
IDENFR ConstA
MULT *
INTCON 2
PLUS +
INTCON 1
SEMICN ;
INTTK int
IDENFR D
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
IDENFR S
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR S
LBRACK [
INTCON 3
RBRACK ]
COMMA ,
IDENFR S
LBRACK [
INTCON 5
RBRACK ]
RBRACE }
SEMICN ;
INTTK int
IDENFR c
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 4
RBRACK ]
SEMICN ;
INTTK int
IDENFR globalVal
ASSIGN =
INTCON 0
SEMICN ;
VOIDTK void
IDENFR noReturn
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "This Function has no return!\n"
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR intReturn
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "This Function has int return!\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR multiply_and_add
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "multiply_and_add: a=%d b=%d c=%d\n"
COMMA ,
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
RETURNTK return
IDENFR a
MULT *
IDENFR b
PLUS +
IDENFR c
SEMICN ;
RBRACE }
INTTK int
IDENFR condReturn
LPARENT (
INTTK int
IDENFR val
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR val
EQL ==
INTCON 1
RPARENT )
LBRACE {
RETURNTK return
INTCON 3
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR val
EQL ==
INTCON 2
RPARENT )
LBRACE {
RETURNTK return
INTCON 4
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR val
EQL ==
INTCON 3
RPARENT )
LBRACE {
RETURNTK return
INTCON 8
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 10
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR add
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
IDENFR globalVal
ASSIGN =
IDENFR globalVal
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
IDENFR a
PLUS +
IDENFR b
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "20373649\n"
RPARENT )
SEMICN ;
IDENFR noReturn
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR ans
ASSIGN =
IDENFR multiply_and_add
LPARENT (
IDENFR S
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
INTCON 3
COMMA ,
INTCON 9
RPARENT )
SEMICN ;
LBRACE {
RBRACE }
LBRACE {
RBRACE }
INTTK int
IDENFR WeekDay
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR WeekDay
NEQ !=
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR WeekDay
NEQ !=
INTCON 2
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Weekday != 2\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Weekday == 2\n"
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Weekday == 1\n"
RPARENT )
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR ConstA
ASSIGN =
INTCON 2
SEMICN ;
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "redefined ConstA = %d\n"
COMMA ,
IDENFR ConstA
RPARENT )
SEMICN ;
RBRACE }
LBRACE {
LBRACE {
LBRACE {
RBRACE }
RBRACE }
RBRACE }
IDENFR multiply_and_add
LPARENT (
IDENFR condReturn
LPARENT (
INTCON 1
RPARENT )
COMMA ,
IDENFR condReturn
LPARENT (
INTCON 2
RPARENT )
COMMA ,
IDENFR condReturn
LPARENT (
INTCON 3
RPARENT )
RPARENT )
SEMICN ;
INTTK int
IDENFR bin
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR decimal
ASSIGN =
INTCON 23
SEMICN ;
INTTK int
IDENFR origin_dec
ASSIGN =
IDENFR decimal
SEMICN ;
INTTK int
IDENFR ten
ASSIGN =
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR decimal
NEQ !=
INTCON 0
RPARENT )
LBRACE {
IDENFR bin
ASSIGN =
IDENFR bin
PLUS +
IDENFR ten
MULT *
LPARENT (
IDENFR decimal
MOD %
PLUS +
MINU -
PLUS +
MINU -
INTCON 2
RPARENT )
SEMICN ;
INTTK int
IDENFR tmp
ASSIGN =
IDENFR decimal
DIV /
PLUS +
INTCON 2
SEMICN ;
IDENFR decimal
ASSIGN =
IDENFR tmp
SEMICN ;
IDENFR ten
ASSIGN =
IDENFR ten
MULT *
INTCON 10
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "The binary of decimal %d is %d.\n"
COMMA ,
IDENFR origin_dec
COMMA ,
IDENFR bin
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR bin
NEQ !=
INTCON 0
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "binary != 0\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 3
COMMA ,
IDENFR t
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR num
LBRACK [
INTCON 4
MINU -
INTCON 1
RBRACK ]
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
NEQ !=
INTCON 0
RPARENT )
LBRACE {
IDENFR num
LBRACK [
IDENFR t
RBRACK ]
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR t
ASSIGN =
IDENFR t
PLUS +
INTCON 1
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
MINU -
INTCON 1
SEMICN ;
RBRACE }
IDENFR D
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR num
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR D
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR num
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
IDENFR D
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
IDENFR num
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
IFTK if
LPARENT (
IDENFR num
LBRACK [
INTCON 0
RBRACK ]
GEQ >=
IDENFR num
LBRACK [
INTCON 1
RBRACK ]
AND &&
IDENFR num
LBRACK [
INTCON 1
RBRACK ]
GEQ >=
IDENFR num
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
IDENFR num
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR D
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
IDENFR num
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR D
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
IDENFR num
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
IDENFR D
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR num
LBRACK [
INTCON 0
RBRACK ]
GEQ >=
IDENFR num
LBRACK [
INTCON 2
RBRACK ]
AND &&
IDENFR num
LBRACK [
INTCON 2
RBRACK ]
GEQ >=
IDENFR num
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
LBRACE {
IDENFR num
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR D
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
IDENFR num
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR D
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
IDENFR num
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
IDENFR D
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR num
LBRACK [
INTCON 1
RBRACK ]
GEQ >=
IDENFR num
LBRACK [
INTCON 0
RBRACK ]
AND &&
IDENFR num
LBRACK [
INTCON 0
RBRACK ]
GEQ >=
IDENFR num
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
IDENFR num
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR D
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
IDENFR num
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR D
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR num
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
IDENFR D
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR num
LBRACK [
INTCON 1
RBRACK ]
GEQ >=
IDENFR num
LBRACK [
INTCON 2
RBRACK ]
AND &&
IDENFR num
LBRACK [
INTCON 2
RBRACK ]
GEQ >=
IDENFR num
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
LBRACE {
IDENFR num
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR D
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR num
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR D
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
IDENFR num
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
IDENFR D
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR num
LBRACK [
INTCON 2
RBRACK ]
GEQ >=
IDENFR num
LBRACK [
INTCON 0
RBRACK ]
AND &&
IDENFR num
LBRACK [
INTCON 0
RBRACK ]
GEQ >=
IDENFR num
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
LBRACE {
IDENFR num
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR D
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
IDENFR num
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR D
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR num
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
IDENFR D
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR num
LBRACK [
INTCON 2
RBRACK ]
GEQ >=
IDENFR num
LBRACK [
INTCON 1
RBRACK ]
AND &&
IDENFR num
LBRACK [
INTCON 0
RBRACK ]
LEQ <=
IDENFR num
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
LBRACE {
IDENFR num
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR D
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR num
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR D
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
IDENFR num
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
IDENFR D
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "This situation should never happen!\n"
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "The correct sort of the input array is: %d %d %d.\n"
COMMA ,
IDENFR num
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR num
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR num
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 0
EQL ==
INTCON 2
OR ||
INTCON 3
EQL ==
INTCON 5
OR ||
INTCON 2
EQL ==
INTCON 2
OR ||
LPARENT (
INTCON 3
PLUS +
INTCON 1
RPARENT )
EQL ==
INTCON 6
OR ||
IDENFR intReturn
LPARENT (
RPARENT )
EQL ==
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "short circuit evaluation: Or\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 3
GRE >
INTCON 2
AND &&
NOT !
INTCON 0
AND &&
IDENFR add
LPARENT (
INTCON 1
COMMA ,
INTCON 2
RPARENT )
EQL ==
INTCON 4
AND &&
IDENFR add
LPARENT (
INTCON 1
COMMA ,
INTCON 4
RPARENT )
EQL ==
INTCON 5
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Never happen!\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR globalVal
EQL ==
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "globalVal: %d. short circuit evaluation:And\n"
COMMA ,
IDENFR globalVal
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "globalVal: %d. short circuit evaluation:And Failed\n"
COMMA ,
IDENFR globalVal
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
