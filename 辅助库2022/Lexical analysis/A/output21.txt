CONSTTK const
INTTK int
IDENFR one
ASSIGN =
INTCON 1
COMMA ,
IDENFR two
ASSIGN =
INTCON 2
COMMA ,
IDENFR three
ASSIGN =
IDENFR one
PLUS +
IDENFR two
SEMICN ;
CONSTTK const
INTTK int
IDENFR four
ASSIGN =
INTCON 4
COMMA ,
IDENFR five
ASSIGN =
INTCON 5
SEMICN ;
INTTK int
IDENFR x1
ASSIGN =
INTCON 0
COMMA ,
IDENFR x2
ASSIGN =
INTCON 0
SEMICN ;
CONSTTK const
INTTK int
IDENFR a
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR arr_t
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
INTTK int
IDENFR add
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
SEMICN ;
RBRACE }
INTTK int
IDENFR add_three
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
PLUS +
IDENFR c
SEMICN ;
RBRACE }
INTTK int
IDENFR total_array2
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
INTTK int
IDENFR x
RPARENT )
LBRACE {
INTTK int
IDENFR sum
ASSIGN =
INTCON 0
COMMA ,
IDENFR i
ASSIGN =
INTCON 0
COMMA ,
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR x
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
INTCON 2
RPARENT )
LBRACE {
IDENFR sum
ASSIGN =
IDENFR sum
PLUS +
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR sum
SEMICN ;
RBRACE }
INTTK int
IDENFR total
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR n
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR sum
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR n
RPARENT )
LBRACE {
IDENFR sum
ASSIGN =
IDENFR sum
PLUS +
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR sum
SEMICN ;
RBRACE }
INTTK int
IDENFR getone
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
VOIDTK void
IDENFR needprint
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "20373473\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR getsize
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
LBRACE {
RBRACE }
LBRACE {
SEMICN ;
RBRACE }
INTTK int
IDENFR s
ASSIGN =
MINU -
INTCON 1
SEMICN ;
IDENFR s
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR s
ASSIGN =
IDENFR getone
LPARENT (
RPARENT )
SEMICN ;
IDENFR s
ASSIGN =
IDENFR s
MINU -
INTCON 1
SEMICN ;
IDENFR s
ASSIGN =
LPARENT (
IDENFR s
PLUS +
INTCON 4
RPARENT )
DIV /
INTCON 2
MULT *
INTCON 5
SEMICN ;
IDENFR s
ASSIGN =
MINU -
IDENFR s
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR s
GRE >
INTCON 0
RPARENT )
IDENFR s
ASSIGN =
IDENFR getsize
LPARENT (
IDENFR s
RPARENT )
SEMICN ;
IDENFR needprint
LPARENT (
RPARENT )
SEMICN ;
LBRACE {
INTTK int
IDENFR one
ASSIGN =
INTCON 0
COMMA ,
IDENFR two
ASSIGN =
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d\n"
COMMA ,
IDENFR one
COMMA ,
IDENFR two
RPARENT )
SEMICN ;
RBRACE }
IDENFR s
ASSIGN =
IDENFR add_three
LPARENT (
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RPARENT )
SEMICN ;
INTTK int
IDENFR temp
ASSIGN =
IDENFR add
LPARENT (
IDENFR one
COMMA ,
IDENFR two
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR temp
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR array1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
INTTK int
IDENFR array2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 2
COMMA ,
INTCON 3
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR array3
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
IDENFR temp
ASSIGN =
IDENFR total_array2
LPARENT (
IDENFR array2
COMMA ,
INTCON 2
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
IDENFR total
LPARENT (
IDENFR array1
COMMA ,
INTCON 2
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
GRE >
IDENFR array1
LBRACK [
INTCON 0
RBRACK ]
AND &&
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR array1
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR x
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR array1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 2
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR total
LPARENT (
IDENFR array2
LBRACK [
IDENFR i
RBRACK ]
COMMA ,
INTCON 2
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR array2
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
LSS <
IDENFR x
AND &&
INTCON 0
LEQ <=
IDENFR x
RPARENT )
LBRACE {
IDENFR array2
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR x
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR array2
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
CONTINUETK continue
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
PLUS +
IDENFR i
PLUS +
IDENFR i
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR a
MOD %
IDENFR i
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR i
MULT *
IDENFR a
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR add
LPARENT (
IDENFR a
COMMA ,
IDENFR i
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR i
DIV /
IDENFR i
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 2
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR array1
LBRACK [
IDENFR i
RBRACK ]
NEQ !=
IDENFR array3
LBRACK [
IDENFR i
RBRACK ]
AND &&
IDENFR array1
LBRACK [
IDENFR i
RBRACK ]
GEQ >=
IDENFR array3
LBRACK [
IDENFR i
RBRACK ]
OR ||
IDENFR array1
LBRACK [
IDENFR i
RBRACK ]
GRE >
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR array1
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR array1
LBRACK [
IDENFR i
RBRACK ]
EQL ==
IDENFR array3
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d"
COMMA ,
IDENFR i
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
