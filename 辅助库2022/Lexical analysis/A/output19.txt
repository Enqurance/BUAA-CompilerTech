CONSTTK const
INTTK int
IDENFR N
ASSIGN =
INTCON 510
COMMA ,
IDENFR M
ASSIGN =
MINU -
INTCON 520
COMMA ,
IDENFR KK
ASSIGN =
MINU -
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR NN
ASSIGN =
INTCON 55
COMMA ,
IDENFR MM
ASSIGN =
INTCON 2222
SEMICN ;
CONSTTK const
INTTK int
IDENFR K
ASSIGN =
MINU -
INTCON 24
SEMICN ;
CONSTTK const
INTTK int
IDENFR a_3
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 4
COMMA ,
INTCON 5
RBRACE }
COMMA ,
IDENFR a_4
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 899
COMMA ,
INTCON 99
RBRACE }
COMMA ,
LBRACE {
INTCON 1222
COMMA ,
INTCON 25555
RBRACE }
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR a_1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
IDENFR a_2
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 2
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR a
LBRACK [
INTCON 510
RBRACK ]
COMMA ,
IDENFR b
LBRACK [
INTCON 510
RBRACK ]
LBRACK [
INTCON 510
RBRACK ]
COMMA ,
IDENFR n
COMMA ,
IDENFR m
SEMICN ;
INTTK int
IDENFR xxxx
COMMA ,
IDENFR yyyy
SEMICN ;
INTTK int
IDENFR t
ASSIGN =
INTCON 1234
COMMA ,
IDENFR u
ASSIGN =
INTCON 2345
SEMICN ;
INTTK int
IDENFR d
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
PLUS +
INTCON 3
COMMA ,
INTCON 2
MINU -
INTCON 4
RBRACE }
COMMA ,
LBRACE {
INTCON 3
MULT *
INTCON 5
COMMA ,
INTCON 4
MULT *
INTCON 1
PLUS +
INTCON 2
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR tmp_0
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
RBRACE }
SEMICN ;
VOIDTK void
IDENFR pr
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "20373447\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR nonsense
LPARENT (
RPARENT )
LBRACE {
SEMICN ;
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR matrix
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR m
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 4
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
MINU -
INTCON 1
PLUS +
INTCON 2
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 5
MOD %
INTCON 6
COMMA ,
MINU -
INTCON 1
PLUS +
INTCON 2
PLUS +
INTCON 3
PLUS +
INTCON 4
COMMA ,
LPARENT (
INTCON 1
MINU -
INTCON 2
RPARENT )
MINU -
INTCON 3
MINU -
INTCON 4
COMMA ,
INTCON 1
MULT *
INTCON 2
MULT *
INTCON 3
MULT *
INTCON 4
RBRACE }
COMMA ,
LBRACE {
INTCON 100
DIV /
INTCON 10
DIV /
INTCON 10
MULT *
LPARENT (
MINU -
INTCON 1
RPARENT )
COMMA ,
LPARENT (
INTCON 1
MINU -
INTCON 2
RPARENT )
MULT *
LPARENT (
INTCON 3
PLUS +
INTCON 5
RPARENT )
COMMA ,
INTCON 1
COMMA ,
INTCON 2
RBRACE }
RBRACE }
COMMA ,
IDENFR m1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
MINU -
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
IDENFR m2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
INTTK int
IDENFR tu
ASSIGN =
IDENFR t
PLUS +
IDENFR u
SEMICN ;
IDENFR tu
ASSIGN =
IDENFR t
MULT *
IDENFR u
SEMICN ;
IDENFR tmp_0
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 5
MULT *
INTCON 5
PLUS +
INTCON 1
SEMICN ;
IDENFR m
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 134
MOD %
INTCON 100
PLUS +
MINU -
INTCON 1
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR logic
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
COMMA ,
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
IFTK if
LPARENT (
IDENFR i
LEQ <=
IDENFR j
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR j
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
GEQ >=
IDENFR j
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR j
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
LSS <
INTCON 100
AND &&
IDENFR j
GRE >
INTCON 100
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 0
AND &&
IDENFR j
NEQ !=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 0
AND &&
NOT !
IDENFR j
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "YeG1\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR i
OR ||
IDENFR j
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "YeG2\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
OR ||
NOT !
IDENFR j
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "YeG3\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR i
OR ||
NOT !
IDENFR j
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "YeG4\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR i
AND &&
NOT !
IDENFR j
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "YeG5\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR i
NEQ !=
IDENFR j
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR j
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
NEQ !=
NOT !
IDENFR j
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
IDENFR i
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR j
ASSIGN =
IDENFR i
MINU -
PLUS +
MINU -
PLUS +
IDENFR i
MULT *
INTCON 100
DIV /
INTCON 10
MOD %
INTCON 10
MULT *
LPARENT (
MINU -
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR getInt
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
SEMICN ;
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
VOIDTK void
IDENFR prd
LPARENT (
INTTK int
IDENFR d
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
INTTK int
IDENFR x
COMMA ,
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
COMMA ,
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
GEQ >=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR d
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
RPARENT )
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR j
EQL ==
INTCON 2
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 2
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f1
LPARENT (
INTTK int
IDENFR x
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f2
LPARENT (
INTTK int
IDENFR d
LBRACK [
RBRACK ]
LBRACK [
INTCON 1
PLUS +
INTCON 1
RBRACK ]
RPARENT )
LBRACE {
IDENFR d
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 10000
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f3
LPARENT (
INTTK int
IDENFR x
RPARENT )
LBRACE {
SEMICN ;
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f4
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR f5
LPARENT (
INTTK int
IDENFR x
COMMA ,
INTTK int
IDENFR y
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR pr
LPARENT (
RPARENT )
SEMICN ;
IDENFR nonsense
LPARENT (
RPARENT )
SEMICN ;
IDENFR n
ASSIGN =
IDENFR getInt
LPARENT (
RPARENT )
SEMICN ;
IDENFR m
ASSIGN =
IDENFR getInt
LPARENT (
RPARENT )
SEMICN ;
IDENFR matrix
LPARENT (
RPARENT )
SEMICN ;
IDENFR f1
LPARENT (
IDENFR n
RPARENT )
SEMICN ;
IDENFR f2
LPARENT (
IDENFR d
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR n
PLUS +
IDENFR m
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR tmp_0
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR tmp_0
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR a_2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR a_2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR a_2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
MULT *
IDENFR tmp_0
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR tmp_0
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR n
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR a_2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR m
RPARENT )
SEMICN ;
IDENFR f4
LPARENT (
IDENFR d
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
IDENFR f5
LPARENT (
IDENFR tmp_0
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR d
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR f5
LPARENT (
IDENFR n
COMMA ,
IDENFR tmp_0
RPARENT )
SEMICN ;
IDENFR logic
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
IDENFR n
SEMICN ;
INTTK int
IDENFR b
ASSIGN =
IDENFR m
SEMICN ;
IDENFR a
ASSIGN =
IDENFR a
PLUS +
MINU -
PLUS +
IDENFR a
SEMICN ;
IDENFR b
ASSIGN =
IDENFR b
MINU -
PLUS +
MINU -
IDENFR a
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
IDENFR b
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR a
LEQ <=
IDENFR b
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR a
ASSIGN =
INTCON 2
SEMICN ;
IDENFR b
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 10000
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "%d -- %d\n"
COMMA ,
IDENFR n
COMMA ,
IDENFR m
RPARENT )
SEMICN ;
IDENFR prd
LPARENT (
IDENFR d
COMMA ,
INTCON 100
COMMA ,
IDENFR tmp_0
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR n
PLUS +
IDENFR m
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR n
MINU -
IDENFR m
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR n
MULT *
IDENFR m
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR n
MOD %
IDENFR m
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
