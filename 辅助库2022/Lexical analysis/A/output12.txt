CONSTTK const
INTTK int
IDENFR a1
ASSIGN =
INTCON 2
COMMA ,
IDENFR d1
ASSIGN =
INTCON 3
COMMA ,
IDENFR e1
ASSIGN =
INTCON 4
SEMICN ;
CONSTTK const
INTTK int
IDENFR h1
ASSIGN =
INTCON 3
SEMICN ;
CONSTTK const
INTTK int
IDENFR t1
ASSIGN =
INTCON 0
COMMA ,
IDENFR t2
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR b1
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR c1
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR test
ASSIGN =
INTCON 0
SEMICN ;
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR f2
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR f3
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
INTTK int
IDENFR temp
SEMICN ;
IDENFR temp
ASSIGN =
IDENFR a
PLUS +
IDENFR b
SEMICN ;
RETURNTK return
IDENFR temp
SEMICN ;
RBRACE }
INTTK int
IDENFR f4
LPARENT (
RPARENT )
LBRACE {
IDENFR test
ASSIGN =
IDENFR test
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR f5
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR f6
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR f7
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "20373275\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR a
COMMA ,
IDENFR g
ASSIGN =
INTCON 2
COMMA ,
IDENFR h
ASSIGN =
INTCON 3
SEMICN ;
INTTK int
IDENFR y
COMMA ,
IDENFR z
SEMICN ;
INTTK int
IDENFR b
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR c
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
INTTK int
IDENFR d
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
INTTK int
IDENFR e
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
RBRACE }
SEMICN ;
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
IDENFR f5
LPARENT (
IDENFR d
RPARENT )
SEMICN ;
IDENFR f6
LPARENT (
IDENFR e
RPARENT )
SEMICN ;
IDENFR f7
LPARENT (
IDENFR d
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR d
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
IDENFR d
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR f3
LPARENT (
IDENFR d
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR d
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR e
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
EQL ==
INTCON 1
RPARENT )
LBRACE {
INTTK int
IDENFR m
SEMICN ;
IDENFR m
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "m:%d\n"
COMMA ,
IDENFR m
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 0
AND &&
IDENFR f4
LPARENT (
RPARENT )
RPARENT )
LBRACE {
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR test
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 1
OR ||
IDENFR f4
LPARENT (
RPARENT )
RPARENT )
LBRACE {
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR test
RPARENT )
SEMICN ;
IDENFR h
ASSIGN =
MINU -
INTCON 20
SEMICN ;
IDENFR h
ASSIGN =
PLUS +
INTCON 30
SEMICN ;
IDENFR h
ASSIGN =
LPARENT (
IDENFR h
PLUS +
INTCON 1
RPARENT )
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IDENFR b
ASSIGN =
IDENFR b
MINU -
INTCON 1
SEMICN ;
IDENFR b
ASSIGN =
IDENFR b
MULT *
INTCON 1
SEMICN ;
IDENFR b
ASSIGN =
INTCON 1
SEMICN ;
IDENFR b
ASSIGN =
IDENFR b
MOD %
INTCON 1
SEMICN ;
IDENFR b
ASSIGN =
INTCON 1
SEMICN ;
IDENFR b
ASSIGN =
IDENFR b
DIV /
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR b
OR ||
IDENFR d
LBRACK [
INTCON 1
RBRACK ]
GEQ >=
IDENFR d
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR a
LSS <
IDENFR b
OR ||
IDENFR d
LBRACK [
INTCON 2
RBRACK ]
LEQ <=
IDENFR d
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
INTCON 0
RPARENT )
LBRACE {
RBRACE }
WHILETK while
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
INTCON 0
EQL ==
INTCON 1
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
BREAKTK break
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
