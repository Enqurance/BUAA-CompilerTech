CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR b
ASSIGN =
INTCON 2
COMMA ,
IDENFR c
ASSIGN =
INTCON 3
COMMA ,
IDENFR ddd
ASSIGN =
INTCON 4
SEMICN ;
CONSTTK const
INTTK int
IDENFR onedearray
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR twodearray
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
COMMA ,
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 2
COMMA ,
INTCON 3
RBRACE }
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR twodearray1
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
COMMA ,
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 2
COMMA ,
INTCON 3
RBRACE }
RBRACE }
COMMA ,
IDENFR twodearray111
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
COMMA ,
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 2
COMMA ,
INTCON 3
RBRACE }
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR onedearray11111
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
RBRACE }
COMMA ,
IDENFR onedearray1221
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR ww
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR www
ASSIGN =
INTCON 1
MINU -
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR wwww
ASSIGN =
INTCON 1
MULT *
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR wwwww
ASSIGN =
INTCON 1
DIV /
INTCON 1
SEMICN ;
VOIDTK void
IDENFR funcnon1
LPARENT (
RPARENT )
LBRACE {
RBRACE }
INTTK int
IDENFR funcint1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR funcint1
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR add3
LPARENT (
INTTK int
IDENFR k
COMMA ,
INTTK int
IDENFR l
COMMA ,
INTTK int
IDENFR z
RPARENT )
LBRACE {
RETURNTK return
IDENFR k
PLUS +
IDENFR z
PLUS +
IDENFR l
SEMICN ;
RBRACE }
INTTK int
IDENFR add2
LPARENT (
INTTK int
IDENFR k
COMMA ,
INTTK int
IDENFR l
RPARENT )
LBRACE {
RETURNTK return
IDENFR k
PLUS +
IDENFR l
SEMICN ;
RBRACE }
INTTK int
IDENFR add1
LPARENT (
INTTK int
IDENFR k
RPARENT )
LBRACE {
RETURNTK return
IDENFR k
SEMICN ;
RBRACE }
VOIDTK void
IDENFR addd
LPARENT (
INTTK int
IDENFR ooo
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR threeparam
LPARENT (
INTTK int
IDENFR w
COMMA ,
INTTK int
IDENFR z
COMMA ,
INTTK int
IDENFR k
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR twoparam
LPARENT (
INTTK int
IDENFR w
COMMA ,
INTTK int
IDENFR z
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR funcparam1
LPARENT (
INTTK int
IDENFR i
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR funcparam3
LPARENT (
INTTK int
IDENFR i
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR c
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR funcparam2arr
LPARENT (
INTTK int
IDENFR i
LBRACK [
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
LBRACE {
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR as
SEMICN ;
INTTK int
IDENFR asd
COMMA ,
IDENFR asfa
COMMA ,
IDENFR asffff
SEMICN ;
IDENFR as
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR emptyarr
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
RBRACE }
SEMICN ;
INTTK int
IDENFR emptyarr1
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR var1
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR var2
ASSIGN =
INTCON 2
COMMA ,
IDENFR var3
ASSIGN =
INTCON 3
COMMA ,
IDENFR var4
ASSIGN =
INTCON 4
SEMICN ;
IDENFR var1
ASSIGN =
LPARENT (
MINU -
IDENFR as
RPARENT )
SEMICN ;
IDENFR var1
ASSIGN =
PLUS +
IDENFR as
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR as
RPARENT )
LBRACE {
IDENFR as
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR vararray1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
INTTK int
IDENFR func1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
INTTK int
IDENFR func2
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
INTTK int
IDENFR func3
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
INTTK int
IDENFR vararray2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
COMMA ,
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 2
COMMA ,
INTCON 3
RBRACE }
RBRACE }
SEMICN ;
IDENFR vararray2
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 4
SEMICN ;
INTTK int
IDENFR vararray21
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
COMMA ,
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 2
COMMA ,
INTCON 3
RBRACE }
RBRACE }
COMMA ,
IDENFR vararray213
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
COMMA ,
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 2
COMMA ,
INTCON 3
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR vararray31231
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
IDENFR vararray212
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
IDENFR var4
ASSIGN =
IDENFR var1
MULT *
IDENFR var2
SEMICN ;
IDENFR var4
ASSIGN =
IDENFR var2
DIV /
IDENFR var1
SEMICN ;
IDENFR var4
ASSIGN =
IDENFR var1
MOD %
IDENFR var2
SEMICN ;
IDENFR var4
ASSIGN =
IDENFR var1
PLUS +
IDENFR var2
SEMICN ;
IDENFR var4
ASSIGN =
IDENFR var2
MINU -
IDENFR var1
SEMICN ;
IDENFR var4
ASSIGN =
INTCON 3
PLUS +
INTCON 3
DIV /
INTCON 3
PLUS +
IDENFR var1
MULT *
IDENFR var2
SEMICN ;
INTTK int
IDENFR func
SEMICN ;
IDENFR func
ASSIGN =
IDENFR add2
LPARENT (
IDENFR var3
COMMA ,
IDENFR var4
RPARENT )
SEMICN ;
IDENFR func
ASSIGN =
IDENFR add1
LPARENT (
IDENFR var2
RPARENT )
SEMICN ;
IDENFR func
ASSIGN =
IDENFR funcint1
LPARENT (
RPARENT )
SEMICN ;
IDENFR twoparam
LPARENT (
IDENFR var1
COMMA ,
IDENFR var2
RPARENT )
SEMICN ;
IDENFR threeparam
LPARENT (
IDENFR var3
COMMA ,
IDENFR var1
COMMA ,
IDENFR var2
RPARENT )
SEMICN ;
IDENFR addd
LPARENT (
IDENFR var3
RPARENT )
SEMICN ;
IDENFR funcnon1
LPARENT (
RPARENT )
SEMICN ;
IDENFR funcparam1
LPARENT (
IDENFR vararray1
RPARENT )
SEMICN ;
IDENFR funcparam3
LPARENT (
IDENFR func1
COMMA ,
IDENFR func2
COMMA ,
IDENFR vararray21
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR funcparam2arr
LPARENT (
IDENFR emptyarr1
RPARENT )
SEMICN ;
WHILETK while
LPARENT (
IDENFR var4
NEQ !=
INTCON 0
RPARENT )
LBRACE {
IDENFR var4
ASSIGN =
INTCON 0
SEMICN ;
IFTK if
LPARENT (
IDENFR var4
EQL ==
INTCON 3
RPARENT )
LBRACE {
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR var3
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR var4
GRE >
INTCON 4
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
RBRACE }
IFTK if
LPARENT (
IDENFR a
LSS <
IDENFR b
AND &&
IDENFR a
EQL ==
INTCON 1
RPARENT )
LBRACE {
IDENFR var4
ASSIGN =
INTCON 3
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR b
OR ||
IDENFR a
EQL ==
INTCON 1
RPARENT )
LBRACE {
IDENFR var4
ASSIGN =
INTCON 3
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
LEQ <=
IDENFR b
RPARENT )
LBRACE {
IDENFR var4
ASSIGN =
INTCON 3
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
IDENFR b
RPARENT )
LBRACE {
IDENFR var4
ASSIGN =
INTCON 3
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR var1
EQL ==
IDENFR var2
RPARENT )
LBRACE {
IDENFR var4
ASSIGN =
INTCON 3
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR var1
NEQ !=
IDENFR var2
RPARENT )
LBRACE {
IDENFR var4
ASSIGN =
INTCON 3
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "20231229\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR a
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR ddd
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR var1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR var2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR var3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR vararray2
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR vararray2
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
