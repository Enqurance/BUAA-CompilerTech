CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR b
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR c
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR d
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR e
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
INTTK int
IDENFR f
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR fk
LPARENT (
RPARENT )
LBRACE {
IDENFR d
ASSIGN =
INTCON 10
SEMICN ;
RETURNTK return
IDENFR d
PLUS +
IDENFR e
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
IDENFR pm
LPARENT (
INTTK int
IDENFR z
COMMA ,
INTTK int
IDENFR x
RPARENT )
LBRACE {
RETURNTK return
IDENFR z
PLUS +
IDENFR x
SEMICN ;
RBRACE }
VOIDTK void
IDENFR mp
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR c
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
IDENFR b
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR a
PLUS +
IDENFR c
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Author: 19376160\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR d
ASSIGN =
INTCON 2
PLUS +
INTCON 4
SEMICN ;
LBRACE {
INTTK int
IDENFR d
ASSIGN =
INTCON 3
SEMICN ;
RBRACE }
LBRACE {
RBRACE }
RBRACE }
INTTK int
IDENFR d
ASSIGN =
INTCON 11
SEMICN ;
INTTK int
IDENFR e
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 11
COMMA ,
INTCON 22
RBRACE }
SEMICN ;
INTTK int
IDENFR f
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 11
COMMA ,
INTCON 22
RBRACE }
COMMA ,
LBRACE {
INTCON 33
COMMA ,
INTCON 44
RBRACE }
RBRACE }
SEMICN ;
WHILETK while
LPARENT (
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR e
LBRACK [
INTCON 1
RBRACK ]
EQL ==
MINU -
INTCON 1
AND &&
IDENFR f
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
EQL ==
INTCON 5
AND &&
INTCON 2
GEQ >=
INTCON 1
AND &&
IDENFR fk
LPARENT (
RPARENT )
EQL ==
INTCON 0
AND &&
NOT !
LPARENT (
INTCON 1
PLUS +
INTCON 0
RPARENT )
RPARENT )
LBRACE {
IDENFR e
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 3
MULT *
INTCON 4
SEMICN ;
CONTINUETK continue
SEMICN ;
IDENFR mp
LPARENT (
IDENFR e
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR f
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR f
RPARENT )
SEMICN ;
IDENFR d
ASSIGN =
IDENFR pm
LPARENT (
IDENFR e
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR e
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR e
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR fk
LPARENT (
RPARENT )
SEMICN ;
IDENFR mp
LPARENT (
IDENFR d
COMMA ,
IDENFR e
COMMA ,
IDENFR f
RPARENT )
SEMICN ;
IFTK if
LPARENT (
MINU -
INTCON 1
EQL ==
MINU -
INTCON 1
OR ||
IDENFR f
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
EQL ==
INTCON 5
OR ||
INTCON 2
GRE >
INTCON 1
OR ||
INTCON 4
LEQ <=
INTCON 5
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "There\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "is\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "nothing\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "special\n"
RPARENT )
SEMICN ;
RBRACE }
BREAKTK break
SEMICN ;
RBRACE }
IDENFR e
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 5
MOD %
INTCON 2
SEMICN ;
IDENFR e
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR e
LBRACK [
INTCON 1
RBRACK ]
DIV /
INTCON 2
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR a
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR d
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR e
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR f
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "The end"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
