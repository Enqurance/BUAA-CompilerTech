CONSTTK const
INTTK int
IDENFR _a
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
MINU -
INTCON 1
COMMA ,
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
IDENFR b
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR c
COMMA ,
IDENFR d
COMMA ,
IDENFR f
SEMICN ;
CONSTTK const
INTTK int
IDENFR array
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR a1
ASSIGN =
INTCON 0
COMMA ,
IDENFR a2
ASSIGN =
INTCON 0
COMMA ,
IDENFR a3
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR func
LPARENT (
INTTK int
IDENFR par1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR par1
EQL ==
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IFTK if
LPARENT (
IDENFR par1
GRE >
INTCON 10
AND &&
IDENFR par1
LEQ <=
INTCON 100
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IFTK if
LPARENT (
IDENFR par1
LEQ <=
MINU -
INTCON 10
OR ||
IDENFR par1
GEQ >=
INTCON 100
RPARENT )
LBRACE {
RETURNTK return
MINU -
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IFTK if
LPARENT (
IDENFR par1
NEQ !=
INTCON 1
RPARENT )
LBRACE {
RETURNTK return
INTCON 2
SEMICN ;
RBRACE }
RBRACE }
RBRACE }
RBRACE }
RETURNTK return
INTCON 3
SEMICN ;
RBRACE }
INTTK int
IDENFR func1
LPARENT (
INTTK int
IDENFR par1
COMMA ,
INTTK int
IDENFR par2
RPARENT )
LBRACE {
IFTK if
LPARENT (
NOT !
IDENFR par1
EQL ==
INTCON 1
RPARENT )
SEMICN ;
RETURNTK return
IDENFR par1
PLUS +
IDENFR par2
SEMICN ;
RBRACE }
INTTK int
IDENFR func2
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
IDENFR func3
LPARENT (
INTTK int
IDENFR par1
COMMA ,
INTTK int
IDENFR par2
COMMA ,
INTTK int
IDENFR par3
RPARENT )
LBRACE {
RETURNTK return
IDENFR par1
PLUS +
IDENFR par2
PLUS +
IDENFR par3
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
MINU -
INTCON 10
SEMICN ;
INTTK int
IDENFR a1
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "begin\n"
RPARENT )
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 20
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR func
LPARENT (
IDENFR i
RPARENT )
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 25
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 22
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR i
RPARENT )
SEMICN ;
RBRACE }
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 30
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 27
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR i
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR c
ASSIGN =
IDENFR func1
LPARENT (
INTCON 1
COMMA ,
INTCON 2
RPARENT )
SEMICN ;
INTTK int
IDENFR cd
ASSIGN =
IDENFR func3
LPARENT (
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
