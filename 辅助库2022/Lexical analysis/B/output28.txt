CONSTTK const
INTTK int
IDENFR MAXN
ASSIGN =
INTCON 100
SEMICN ;
VOIDTK void
IDENFR swap
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR i
COMMA ,
INTTK int
IDENFR j
RPARENT )
LBRACE {
INTTK int
IDENFR tmp
ASSIGN =
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR a
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR a
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR tmp
SEMICN ;
RBRACE }
VOIDTK void
IDENFR heapify
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR i
RPARENT )
LBRACE {
INTTK int
IDENFR l
COMMA ,
IDENFR r
SEMICN ;
INTTK int
IDENFR largest
SEMICN ;
IDENFR l
ASSIGN =
INTCON 2
MULT *
IDENFR i
SEMICN ;
IDENFR r
ASSIGN =
INTCON 2
MULT *
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR l
LEQ <=
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
LBRACK [
IDENFR l
RBRACK ]
GRE >
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
IDENFR largest
ASSIGN =
IDENFR l
SEMICN ;
ELSETK else
IDENFR largest
ASSIGN =
IDENFR i
SEMICN ;
RBRACE }
ELSETK else
IDENFR largest
ASSIGN =
IDENFR i
SEMICN ;
IFTK if
LPARENT (
IDENFR r
LEQ <=
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
LBRACK [
IDENFR r
RBRACK ]
GRE >
IDENFR a
LBRACK [
IDENFR largest
RBRACK ]
RPARENT )
IDENFR largest
ASSIGN =
IDENFR r
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR largest
NEQ !=
IDENFR i
RPARENT )
LBRACE {
IDENFR swap
LPARENT (
IDENFR a
COMMA ,
IDENFR i
COMMA ,
IDENFR largest
RPARENT )
SEMICN ;
IDENFR heapify
LPARENT (
IDENFR a
COMMA ,
IDENFR largest
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
VOIDTK void
IDENFR build_heap
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
DIV /
INTCON 2
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
GEQ >=
INTCON 1
RPARENT )
LBRACE {
IDENFR heapify
LPARENT (
IDENFR a
COMMA ,
IDENFR i
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
MINU -
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
VOIDTK void
IDENFR heap_sort
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
COMMA ,
IDENFR n
SEMICN ;
INTTK int
IDENFR a
LBRACK [
IDENFR MAXN
RBRACK ]
SEMICN ;
IDENFR n
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR n
SEMICN ;
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR n
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR build_heap
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR n
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
GEQ >=
INTCON 2
RPARENT )
LBRACE {
IDENFR swap
LPARENT (
IDENFR a
COMMA ,
INTCON 1
COMMA ,
IDENFR i
RPARENT )
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
MINU -
INTCON 1
SEMICN ;
IDENFR heapify
LPARENT (
IDENFR a
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
MINU -
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "20377020\n"
RPARENT )
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR n
PLUS +
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR heap_sort
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
