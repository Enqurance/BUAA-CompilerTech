CONSTTK const
INTTK int
IDENFR MOD
ASSIGN =
INTCON 13331
COMMA ,
IDENFR TEST0
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
RBRACE }
COMMA ,
IDENFR TEST1
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR num
LBRACK [
INTCON 100
RBRACK ]
SEMICN ;
VOIDTK void
IDENFR mul
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
INTTK int
IDENFR c
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR temp
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 0
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
COMMA ,
IDENFR j
COMMA ,
IDENFR k
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 2
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
INTCON 2
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR k
LSS <
INTCON 2
RPARENT )
LBRACE {
INTTK int
IDENFR x
ASSIGN =
IDENFR temp
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
PLUS +
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR k
RBRACK ]
MULT *
IDENFR b
LBRACK [
IDENFR k
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR temp
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR x
MOD %
IDENFR MOD
SEMICN ;
IDENFR k
ASSIGN =
IDENFR k
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 2
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
INTCON 2
RPARENT )
LBRACE {
IDENFR c
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR temp
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR f_final
LPARENT (
INTTK int
IDENFR n
RPARENT )
LBRACE {
INTTK int
IDENFR x
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
SEMICN ;
INTTK int
IDENFR res
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 1
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR t
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 0
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR k
ASSIGN =
IDENFR n
MINU -
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR k
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR k
MOD %
INTCON 2
RPARENT )
LBRACE {
IDENFR mul
LPARENT (
IDENFR res
COMMA ,
IDENFR t
COMMA ,
IDENFR res
RPARENT )
SEMICN ;
RBRACE }
IDENFR mul
LPARENT (
IDENFR t
COMMA ,
IDENFR t
COMMA ,
IDENFR t
RPARENT )
SEMICN ;
IDENFR k
ASSIGN =
IDENFR k
DIV /
INTCON 2
SEMICN ;
RBRACE }
INTTK int
IDENFR c
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 0
RBRACE }
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 2
RPARENT )
LBRACE {
INTTK int
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
INTCON 2
RPARENT )
LBRACE {
INTTK int
IDENFR r
ASSIGN =
IDENFR c
LBRACK [
IDENFR i
RBRACK ]
PLUS +
IDENFR x
LBRACK [
IDENFR j
RBRACK ]
MULT *
IDENFR res
LBRACK [
IDENFR j
RBRACK ]
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IDENFR c
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR r
MOD %
IDENFR MOD
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR c
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
VOIDTK void
IDENFR printAns
LPARENT (
INTTK int
IDENFR n
COMMA ,
INTTK int
IDENFR x
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LEQ <=
IDENFR n
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d "
COMMA ,
IDENFR f_final
LPARENT (
IDENFR x
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "20373569 the mafia~\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "testConst: %d %d %d\n"
COMMA ,
IDENFR TEST0
LBRACK [
INTCON 1
RBRACK ]
MULT *
IDENFR TEST0
LBRACK [
INTCON 4
RBRACK ]
COMMA ,
IDENFR TEST1
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
MULT *
IDENFR TEST1
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR TEST1
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR TEST0
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
SEMICN ;
INTTK int
IDENFR n
SEMICN ;
IDENFR n
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LEQ <=
IDENFR n
RPARENT )
LBRACE {
INTTK int
IDENFR a
SEMICN ;
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR num
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR a
SEMICN ;
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
IDENFR printAns
LPARENT (
IDENFR n
COMMA ,
IDENFR num
RPARENT )
SEMICN ;
INTTK int
IDENFR maxx
ASSIGN =
IDENFR num
LBRACK [
IDENFR n
RBRACK ]
SEMICN ;
IDENFR maxx
ASSIGN =
IDENFR maxx
PLUS +
INTCON 5
MINU -
PLUS +
MINU -
PLUS +
LPARENT (
LPARENT (
IDENFR num
LBRACK [
IDENFR n
RBRACK ]
MULT *
INTCON 2
DIV /
INTCON 99
PLUS +
IDENFR num
LBRACK [
INTCON 1
RBRACK ]
MULT *
IDENFR num
LBRACK [
IDENFR n
RBRACK ]
MOD %
IDENFR MOD
RPARENT )
MINU -
INTCON 1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "\ntestExp: %d\n"
COMMA ,
IDENFR maxx
RPARENT )
SEMICN ;
LBRACE {
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
