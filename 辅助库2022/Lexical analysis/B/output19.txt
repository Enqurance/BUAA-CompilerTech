CONSTTK const
INTTK int
IDENFR simple_const_a
ASSIGN =
INTCON 6
DIV /
INTCON 4
SEMICN ;
CONSTTK const
INTTK int
IDENFR arr_1d_a
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
COMMA ,
INTCON 6
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR arr_2d_a
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 7
COMMA ,
INTCON 8
RBRACE }
COMMA ,
LBRACE {
INTCON 9
COMMA ,
INTCON 10
RBRACE }
RBRACE }
COMMA ,
IDENFR arr_2d_b
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 44
COMMA ,
INTCON 55
RBRACE }
COMMA ,
LBRACE {
INTCON 66
COMMA ,
INTCON 77
RBRACE }
COMMA ,
LBRACE {
INTCON 88
COMMA ,
INTCON 99
RBRACE }
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR simple_cosnt_b
ASSIGN =
INTCON 11
COMMA ,
IDENFR arr_1d_b
LBRACK [
INTCON 9
RBRACK ]
ASSIGN =
LBRACE {
INTCON 11
COMMA ,
INTCON 22
COMMA ,
INTCON 33
COMMA ,
INTCON 44
COMMA ,
INTCON 55
COMMA ,
INTCON 66
COMMA ,
INTCON 77
COMMA ,
INTCON 88
COMMA ,
INTCON 99
RBRACE }
SEMICN ;
INTTK int
IDENFR simple_var_c
ASSIGN =
INTCON 327
SEMICN ;
INTTK int
IDENFR simple_var_d
SEMICN ;
INTTK int
IDENFR arr_1d_c
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 896
COMMA ,
INTCON 1
RBRACE }
COMMA ,
IDENFR arr_1d_d
LBRACK [
INTCON 10
RBRACK ]
SEMICN ;
INTTK int
IDENFR arr_2d_c
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
COMMA ,
IDENFR arr_2d_d
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 3
COMMA ,
INTCON 56
RBRACE }
COMMA ,
LBRACE {
INTCON 45
COMMA ,
INTCON 16
RBRACE }
RBRACE }
COMMA ,
IDENFR arr_2d_e
LBRACK [
INTCON 10
RBRACK ]
LBRACK [
INTCON 10
RBRACK ]
SEMICN ;
VOIDTK void
IDENFR empty_func
LPARENT (
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR para_only
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR c
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Successfully call a function with 3 types of paras.\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR put_stu_id
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "20373453\n\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR sum_arr_1d
LPARENT (
INTTK int
IDENFR arr
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR length
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
COMMA ,
IDENFR sum
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LEQ <=
IDENFR length
MINU -
INTCON 1
RPARENT )
LBRACE {
IDENFR sum
ASSIGN =
IDENFR sum
PLUS +
IDENFR arr
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR sum
SEMICN ;
RBRACE }
INTTK int
IDENFR get_then_print
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR const_tmp
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 66
COMMA ,
INTCON 88
RBRACE }
SEMICN ;
INTTK int
IDENFR tmp
COMMA ,
IDENFR ans
SEMICN ;
INTTK int
IDENFR ret
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
IDENFR tmp
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR tmp
GRE >
INTCON 100
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "\nJust get a number [%d] (greater than 100).\n"
COMMA ,
IDENFR tmp
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "\nJust get a number [%d] (smaller than or equal to 100).\n"
COMMA ,
IDENFR tmp
RPARENT )
SEMICN ;
RBRACE }
IDENFR ret
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR tmp
SEMICN ;
IDENFR ret
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR tmp
PLUS +
LPARENT (
IDENFR const_tmp
LBRACK [
INTCON 0
RBRACK ]
DIV /
INTCON 2
RPARENT )
SEMICN ;
IDENFR ret
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
IDENFR const_tmp
LBRACK [
INTCON 0
RBRACK ]
MULT *
IDENFR const_tmp
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
IDENFR ans
ASSIGN =
IDENFR sum_arr_1d
LPARENT (
IDENFR ret
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
INTCON 3
RPARENT )
SEMICN ;
RETURNTK return
IDENFR ans
SEMICN ;
RBRACE }
VOIDTK void
IDENFR put_global_simple_var_c
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "GLOBAL simple_var_c: %d\n"
COMMA ,
IDENFR simple_var_c
RPARENT )
SEMICN ;
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR n
COMMA ,
IDENFR ans
LBRACK [
INTCON 10
RBRACK ]
SEMICN ;
INTTK int
IDENFR t
ASSIGN =
INTCON 10
SEMICN ;
IDENFR put_stu_id
LPARENT (
RPARENT )
SEMICN ;
IDENFR empty_func
LPARENT (
RPARENT )
SEMICN ;
IDENFR simple_var_d
ASSIGN =
IDENFR arr_1d_b
LBRACK [
INTCON 0
RBRACK ]
DIV /
IDENFR arr_1d_a
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
IDENFR para_only
LPARENT (
IDENFR simple_var_d
COMMA ,
IDENFR arr_1d_c
COMMA ,
IDENFR arr_2d_d
RPARENT )
SEMICN ;
WHILETK while
LPARENT (
IDENFR t
RPARENT )
LBRACE {
IDENFR t
ASSIGN =
IDENFR t
MINU -
INTCON 1
SEMICN ;
IDENFR n
ASSIGN =
IDENFR get_then_print
LPARENT (
RPARENT )
MOD %
INTCON 10
PLUS +
INTCON 10
SEMICN ;
IFTK if
LPARENT (
IDENFR n
GEQ >=
INTCON 10
RPARENT )
IDENFR n
ASSIGN =
IDENFR n
MINU -
INTCON 10
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "lucky number: %d\n"
COMMA ,
IDENFR n
RPARENT )
SEMICN ;
INTTK int
IDENFR simple_var_c
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR index
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR simple_var_c
LSS <
INTCON 8
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR simple_var_c
EQL ==
INTCON 2
RPARENT )
LBRACE {
IDENFR simple_var_c
ASSIGN =
IDENFR simple_var_c
PLUS +
INTCON 1
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IFTK if
LPARENT (
IDENFR n
PLUS +
INTCON 1
LEQ <=
IDENFR simple_var_c
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "(%d)%d\n"
COMMA ,
IDENFR simple_var_c
COMMA ,
IDENFR arr_1d_b
LBRACK [
IDENFR simple_var_c
RBRACK ]
RPARENT )
SEMICN ;
IDENFR ans
LBRACK [
IDENFR index
RBRACK ]
ASSIGN =
IDENFR arr_1d_b
LBRACK [
IDENFR simple_var_c
RBRACK ]
SEMICN ;
IDENFR index
ASSIGN =
IDENFR index
PLUS +
INTCON 1
SEMICN ;
IDENFR simple_var_c
ASSIGN =
IDENFR simple_var_c
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR n
PLUS +
INTCON 1
NEQ !=
IDENFR simple_var_c
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "The ones digit of the lucky number is greater than 7.\n"
RPARENT )
SEMICN ;
RBRACE }
IDENFR put_global_simple_var_c
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
