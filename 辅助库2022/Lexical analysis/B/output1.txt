CONSTTK const
INTTK int
IDENFR aaa
ASSIGN =
INTCON 1
COMMA ,
IDENFR bbb
ASSIGN =
INTCON 2
SEMICN ;
CONSTTK const
INTTK int
IDENFR ccc
ASSIGN =
INTCON 3
SEMICN ;
CONSTTK const
INTTK int
IDENFR ggg
ASSIGN =
INTCON 1
PLUS +
INTCON 2
SEMICN ;
CONSTTK const
INTTK int
IDENFR hhh
ASSIGN =
INTCON 1
MINU -
INTCON 2
SEMICN ;
CONSTTK const
INTTK int
IDENFR iii
ASSIGN =
INTCON 1
MULT *
INTCON 2
SEMICN ;
CONSTTK const
INTTK int
IDENFR arr1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR arr2
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR arr3
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
RBRACE }
SEMICN ;
VOIDTK void
IDENFR nothing
LPARENT (
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR nothing1
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR nothing2
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR nothing3
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
LBRACE {
RBRACE }
INTTK int
IDENFR zero
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
SEMICN ;
INTTK int
IDENFR array1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
INTTK int
IDENFR array2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR b
ASSIGN =
INTCON 1
MULT *
INTCON 2
SEMICN ;
INTTK int
IDENFR c
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 2
SEMICN ;
INTTK int
IDENFR d
ASSIGN =
IDENFR b
PLUS +
IDENFR c
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
INTCON 0
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR array1
LBRACK [
IDENFR i
RBRACK ]
EQL ==
INTCON 3
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR array1
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR array2
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR array1
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
IFTK if
LPARENT (
IDENFR array2
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
EQL ==
INTCON 1
RPARENT )
LBRACE {
IDENFR array2
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR array2
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR b
ASSIGN =
IDENFR c
PLUS +
IDENFR d
SEMICN ;
IDENFR b
ASSIGN =
IDENFR c
MULT *
IDENFR d
SEMICN ;
IDENFR b
ASSIGN =
IDENFR c
MINU -
IDENFR d
SEMICN ;
IDENFR b
ASSIGN =
IDENFR c
PLUS +
IDENFR d
PLUS +
IDENFR d
SEMICN ;
IDENFR b
ASSIGN =
IDENFR c
DIV /
INTCON 1
SEMICN ;
IDENFR d
ASSIGN =
INTCON 1
SEMICN ;
IDENFR b
ASSIGN =
IDENFR c
DIV /
INTCON 1
SEMICN ;
IDENFR b
ASSIGN =
IDENFR c
MOD %
INTCON 1
SEMICN ;
INTTK int
IDENFR m
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR n
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR result
SEMICN ;
IFTK if
LPARENT (
IDENFR m
PLUS +
IDENFR n
RPARENT )
LBRACE {
IDENFR m
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR n
RPARENT )
LBRACE {
IDENFR m
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR m
MINU -
IDENFR n
RPARENT )
LBRACE {
IDENFR m
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR m
LSS <
IDENFR n
RPARENT )
LBRACE {
IDENFR m
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR m
LEQ <=
IDENFR n
RPARENT )
LBRACE {
IDENFR m
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR m
GEQ >=
IDENFR n
RPARENT )
LBRACE {
IDENFR m
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR m
NEQ !=
IDENFR n
RPARENT )
LBRACE {
IDENFR m
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "19231240\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR a
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR array1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR array1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR array1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR array1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR array1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
