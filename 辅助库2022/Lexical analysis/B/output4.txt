CONSTTK const
INTTK int
IDENFR NUM
ASSIGN =
INTCON 3
SEMICN ;
CONSTTK const
INTTK int
IDENFR NUMd
ASSIGN =
INTCON 1
COMMA ,
IDENFR NUMe
ASSIGN =
INTCON 2
SEMICN ;
CONSTTK const
INTTK int
IDENFR NUMa
ASSIGN =
INTCON 5
COMMA ,
IDENFR NUMb
ASSIGN =
LPARENT (
INTCON 1
PLUS +
INTCON 5
RPARENT )
MULT *
INTCON 3
DIV /
INTCON 6
COMMA ,
IDENFR NUMc
ASSIGN =
MINU -
INTCON 2
SEMICN ;
CONSTTK const
INTTK int
IDENFR CON_arr
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR CON_brr
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
LBRACE {
INTCON 4
COMMA ,
INTCON 5
COMMA ,
INTCON 6
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR n
ASSIGN =
INTCON 0
SEMICN ;
VOIDTK void
IDENFR func
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1000
SEMICN ;
RBRACE }
INTTK int
IDENFR ffunc
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
VOIDTK void
IDENFR function1
LPARENT (
INTTK int
IDENFR parm
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "function void with one parm : Success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR function2
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR function3
LPARENT (
INTTK int
IDENFR parm1
COMMA ,
INTTK int
IDENFR parm2
COMMA ,
INTTK int
IDENFR parm3
RPARENT )
LBRACE {
RETURNTK return
IDENFR parm1
PLUS +
IDENFR parm2
PLUS +
IDENFR parm3
SEMICN ;
RBRACE }
INTTK int
IDENFR function4
LPARENT (
INTTK int
IDENFR parm1
COMMA ,
INTTK int
IDENFR parm2
RPARENT )
LBRACE {
RETURNTK return
INTCON 2
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
LBRACE {
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "20185641"
RPARENT )
SEMICN ;
INTTK int
IDENFR arr
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
INTTK int
IDENFR brr
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
LBRACE {
INTCON 4
COMMA ,
INTCON 5
COMMA ,
INTCON 6
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR err
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
IDENFR CON_arr
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR CON_arr
LBRACK [
INTCON 1
RBRACK ]
RBRACE }
RBRACE }
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "\nCheck some basic arry define: Success!\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR f
ASSIGN =
INTCON 1
COMMA ,
IDENFR g
ASSIGN =
PLUS +
INTCON 4
SEMICN ;
INTTK int
IDENFR b
COMMA ,
IDENFR c
ASSIGN =
LPARENT (
LPARENT (
INTCON 3
MULT *
LPARENT (
INTCON 1
PLUS +
INTCON 5
RPARENT )
RPARENT )
DIV /
INTCON 6
RPARENT )
MOD %
INTCON 2
COMMA ,
IDENFR d
ASSIGN =
IDENFR a
PLUS +
INTCON 8
SEMICN ;
INTTK int
IDENFR e
ASSIGN =
IDENFR NUM
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Check some basic Def and const: Success!\n"
RPARENT )
SEMICN ;
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Check a simple ;: Success!\n"
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR a
NEQ !=
INTCON 0
RPARENT )
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
LPARENT (
IDENFR e
MINU -
INTCON 3
RPARENT )
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Check if with else: Wrong!\n"
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR in
ASSIGN =
IDENFR brr
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
PLUS +
INTCON 6
SEMICN ;
IDENFR func
LPARENT (
IDENFR arr
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Check function with arry: Success!\n"
RPARENT )
SEMICN ;
IDENFR func
LPARENT (
IDENFR brr
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Check function with part of arry: Success!\n"
RPARENT )
SEMICN ;
WHILETK while
LPARENT (
IDENFR brr
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
GRE >
INTCON 1
RPARENT )
LBRACE {
IDENFR brr
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR in
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
INTTK int
IDENFR res
ASSIGN =
IDENFR ffunc
LPARENT (
IDENFR brr
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR res
EQL ==
INTCON 1
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Check functioin with two dimission parm: Success!\n"
RPARENT )
SEMICN ;
IDENFR function1
LPARENT (
INTCON 3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "function (int with no parm ): Success!\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR re
ASSIGN =
IDENFR function3
LPARENT (
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR re
EQL ==
INTCON 6
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
INTTK int
IDENFR re2
ASSIGN =
IDENFR function4
LPARENT (
INTCON 4
COMMA ,
IDENFR f
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Check function: Success!"
RPARENT )
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR f
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Check UnaryOp : ! : Wrong!\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR f
LEQ <=
MINU -
INTCON 2
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Check <= : Wrong!\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
