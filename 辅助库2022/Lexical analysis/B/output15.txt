VOIDTK void
IDENFR f0
LPARENT (
RPARENT )
LBRACE {
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "20373361\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON ""
RPARENT )
SEMICN ;
CONSTTK const
INTTK int
IDENFR c_tool
ASSIGN =
INTCON 20
SEMICN ;
CONSTTK const
INTTK int
IDENFR ci_a
ASSIGN =
IDENFR c_tool
MOD %
INTCON 3
COMMA ,
IDENFR ca_a
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
IDENFR c_tool
PLUS +
INTCON 1
COMMA ,
MINU -
INTCON 2
COMMA ,
IDENFR c_tool
MINU -
INTCON 1
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR ca_b
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
LPARENT (
INTCON 1
PLUS +
INTCON 1
RPARENT )
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
IDENFR c_tool
MULT *
INTCON 2
RBRACE }
COMMA ,
LBRACE {
IDENFR c_tool
DIV /
INTCON 3
COMMA ,
INTCON 5
RBRACE }
RBRACE }
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d ia-%d aa-%d-%d-%d ab-%d-%d-%d-%d\n"
COMMA ,
INTCON 1
PLUS +
INTCON 0
COMMA ,
IDENFR ci_a
COMMA ,
IDENFR ca_a
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR ca_a
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR ca_a
LBRACK [
INTCON 1
PLUS +
INTCON 1
RBRACK ]
COMMA ,
IDENFR ca_b
LBRACK [
IDENFR c_tool
MINU -
INTCON 20
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR ca_b
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR ca_b
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR ca_b
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
INTTK int
IDENFR tool_
SEMICN ;
IDENFR tool_
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 10
SEMICN ;
INTTK int
IDENFR i_a
SEMICN ;
INTTK int
IDENFR a_a
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
INTTK int
IDENFR t1
ASSIGN =
INTCON 13
COMMA ,
IDENFR t2
SEMICN ;
IDENFR t2
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR a_a
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
LPARENT (
IDENFR t1
PLUS +
LPARENT (
IDENFR t2
MOD %
INTCON 3
RPARENT )
RPARENT )
DIV /
INTCON 2
SEMICN ;
IDENFR a_a
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LPARENT (
LPARENT (
LPARENT (
LPARENT (
INTCON 97
RPARENT )
RPARENT )
RPARENT )
RPARENT )
SEMICN ;
IDENFR a_a
LBRACK [
IDENFR t1
MINU -
INTCON 11
RBRACK ]
ASSIGN =
IDENFR a_a
LBRACK [
INTCON 0
RBRACK ]
MULT *
LPARENT (
INTCON 9
MINU -
IDENFR a_a
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
INTTK int
IDENFR i_b
ASSIGN =
IDENFR c_tool
DIV /
INTCON 19
COMMA ,
IDENFR a_b
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 10
RBRACE }
COMMA ,
IDENFR a_c
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
IDENFR tool_
RBRACE }
COMMA ,
LBRACE {
MINU -
INTCON 9
RBRACE }
RBRACE }
SEMICN ;
IDENFR i_a
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR a_c
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR a_c
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
MINU -
PLUS +
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d %d %d %d %d %d\n"
COMMA ,
IDENFR i_a
COMMA ,
IDENFR i_b
COMMA ,
IDENFR a_a
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR a_a
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR a_a
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
IDENFR a_b
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR a_b
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR a_c
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR a_c
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
LBRACE {
INTTK int
IDENFR i_a
ASSIGN =
INTCON 100
SEMICN ;
LBRACE {
INTCON 100
SEMICN ;
INTTK int
IDENFR i_a
ASSIGN =
INTCON 200
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "in in block i_a = %d\n"
COMMA ,
IDENFR i_a
RPARENT )
SEMICN ;
RBRACE }
IDENFR f0
LPARENT (
RPARENT )
SEMICN ;
IDENFR i_a
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "in block i_a = %d\n"
COMMA ,
IDENFR i_a
RPARENT )
SEMICN ;
RBRACE }
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "out block i_a = %d\n"
COMMA ,
IDENFR i_a
RPARENT )
SEMICN ;
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "t\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "t\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "t\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "t"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
